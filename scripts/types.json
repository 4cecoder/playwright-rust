[
  {
    "expression": "[null]|[Object]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Object",
        "properties": [
          {
            "alias": "role",
            "async": false,
            "comment": "The [role](https://www.w3.org/TR/wai-aria/#usage_intro).",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "role",
            "required": true,
            "spec": [
              {
                "text": "The [role](https://www.w3.org/TR/wai-aria/#usage_intro).",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "name",
            "async": false,
            "comment": "A human readable name for the node.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "name",
            "required": true,
            "spec": [
              {
                "text": "A human readable name for the node.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "value",
            "async": false,
            "comment": "The current value of the node, if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "value",
            "required": false,
            "spec": [
              {
                "text": "The current value of the node, if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]|[float]",
              "name": "",
              "union": [
                {
                  "name": "string"
                },
                {
                  "name": "float"
                }
              ]
            }
          },
          {
            "alias": "description",
            "async": false,
            "comment": "An additional human readable description of the node, if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "description",
            "required": false,
            "spec": [
              {
                "text": "An additional human readable description of the node, if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "keyshortcuts",
            "async": false,
            "comment": "Keyboard shortcuts associated with this node, if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "keyshortcuts",
            "required": false,
            "spec": [
              {
                "text": "Keyboard shortcuts associated with this node, if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "roledescription",
            "async": false,
            "comment": "A human readable alternative to the role, if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "roledescription",
            "required": false,
            "spec": [
              {
                "text": "A human readable alternative to the role, if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "valuetext",
            "async": false,
            "comment": "A description of the current value, if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "valuetext",
            "required": false,
            "spec": [
              {
                "text": "A description of the current value, if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "disabled",
            "async": false,
            "comment": "Whether the node is disabled, if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "disabled",
            "required": false,
            "spec": [
              {
                "text": "Whether the node is disabled, if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[boolean]",
              "name": "boolean"
            }
          },
          {
            "alias": "expanded",
            "async": false,
            "comment": "Whether the node is expanded or collapsed, if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "expanded",
            "required": false,
            "spec": [
              {
                "text": "Whether the node is expanded or collapsed, if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[boolean]",
              "name": "boolean"
            }
          },
          {
            "alias": "focused",
            "async": false,
            "comment": "Whether the node is focused, if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "focused",
            "required": false,
            "spec": [
              {
                "text": "Whether the node is focused, if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[boolean]",
              "name": "boolean"
            }
          },
          {
            "alias": "modal",
            "async": false,
            "comment": "Whether the node is [modal](https://en.wikipedia.org/wiki/Modal_window), if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "modal",
            "required": false,
            "spec": [
              {
                "text": "Whether the node is [modal](https://en.wikipedia.org/wiki/Modal_window), if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[boolean]",
              "name": "boolean"
            }
          },
          {
            "alias": "multiline",
            "async": false,
            "comment": "Whether the node text input supports multiline, if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "multiline",
            "required": false,
            "spec": [
              {
                "text": "Whether the node text input supports multiline, if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[boolean]",
              "name": "boolean"
            }
          },
          {
            "alias": "multiselectable",
            "async": false,
            "comment": "Whether more than one child can be selected, if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "multiselectable",
            "required": false,
            "spec": [
              {
                "text": "Whether more than one child can be selected, if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[boolean]",
              "name": "boolean"
            }
          },
          {
            "alias": "readonly",
            "async": false,
            "comment": "Whether the node is read only, if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "readonly",
            "required": false,
            "spec": [
              {
                "text": "Whether the node is read only, if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[boolean]",
              "name": "boolean"
            }
          },
          {
            "alias": "required",
            "async": false,
            "comment": "Whether the node is required, if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "required",
            "required": false,
            "spec": [
              {
                "text": "Whether the node is required, if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[boolean]",
              "name": "boolean"
            }
          },
          {
            "alias": "selected",
            "async": false,
            "comment": "Whether the node is selected in its parent node, if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "selected",
            "required": false,
            "spec": [
              {
                "text": "Whether the node is selected in its parent node, if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[boolean]",
              "name": "boolean"
            }
          },
          {
            "alias": "checked",
            "async": false,
            "comment": "Whether the checkbox is checked, or \"mixed\", if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "checked",
            "required": false,
            "spec": [
              {
                "text": "Whether the checkbox is checked, or \"mixed\", if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[boolean]|\"mixed\"",
              "name": "",
              "union": [
                {
                  "name": "boolean"
                },
                {
                  "name": "\"mixed\""
                }
              ]
            }
          },
          {
            "alias": "pressed",
            "async": false,
            "comment": "Whether the toggle button is checked, or \"mixed\", if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "pressed",
            "required": false,
            "spec": [
              {
                "text": "Whether the toggle button is checked, or \"mixed\", if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[boolean]|\"mixed\"",
              "name": "",
              "union": [
                {
                  "name": "boolean"
                },
                {
                  "name": "\"mixed\""
                }
              ]
            }
          },
          {
            "alias": "level",
            "async": false,
            "comment": "The level of a heading, if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "level",
            "required": false,
            "spec": [
              {
                "text": "The level of a heading, if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[int]",
              "name": "int"
            }
          },
          {
            "alias": "valuemin",
            "async": false,
            "comment": "The minimum value in a node, if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "valuemin",
            "required": false,
            "spec": [
              {
                "text": "The minimum value in a node, if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[float]",
              "name": "float"
            }
          },
          {
            "alias": "valuemax",
            "async": false,
            "comment": "The maximum value in a node, if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "valuemax",
            "required": false,
            "spec": [
              {
                "text": "The maximum value in a node, if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[float]",
              "name": "float"
            }
          },
          {
            "alias": "autocomplete",
            "async": false,
            "comment": "What kind of autocomplete is supported by a control, if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "autocomplete",
            "required": false,
            "spec": [
              {
                "text": "What kind of autocomplete is supported by a control, if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "haspopup",
            "async": false,
            "comment": "What kind of popup is currently being shown for a node, if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "haspopup",
            "required": false,
            "spec": [
              {
                "text": "What kind of popup is currently being shown for a node, if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "invalid",
            "async": false,
            "comment": "Whether and in what way this node's value is invalid, if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "invalid",
            "required": false,
            "spec": [
              {
                "text": "Whether and in what way this node's value is invalid, if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "orientation",
            "async": false,
            "comment": "Whether the node is oriented horizontally or vertically, if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "orientation",
            "required": false,
            "spec": [
              {
                "text": "Whether the node is oriented horizontally or vertically, if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "children",
            "async": false,
            "comment": "Child nodes, if any, if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "children",
            "required": false,
            "spec": [
              {
                "text": "Child nodes, if any, if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[Array]<[Object]>",
              "name": "Array",
              "templates": [
                {
                  "name": "Object"
                }
              ]
            }
          }
        ]
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "interestingOnly",
        "async": false,
        "comment": "Prune uninteresting nodes from the tree. Defaults to `true`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "interestingOnly",
        "required": false,
        "spec": [
          {
            "text": "Prune uninteresting nodes from the tree. Defaults to `true`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "root",
        "async": false,
        "comment": "The root DOM element for the snapshot. Defaults to the whole page.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "root",
        "required": false,
        "spec": [
          {
            "text": "The root DOM element for the snapshot. Defaults to the whole page.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[ElementHandle]",
          "name": "ElementHandle"
        }
      }
    ]
  },
  {
    "expression": "[Array]<[AndroidDevice]>",
    "name": "Array",
    "templates": [
      {
        "name": "AndroidDevice"
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[float]",
    "name": "float"
  },
  {
    "expression": "[AndroidWebView]",
    "name": "AndroidWebView"
  },
  {
    "name": "void"
  },
  {
    "name": "void"
  },
  {
    "expression": "[AndroidSelector]",
    "name": "AndroidSelector"
  },
  {
    "expression": "[Object]",
    "name": "Object",
    "properties": [
      {
        "alias": "x",
        "async": false,
        "comment": "",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "x",
        "required": true,
        "spec": [
          {
            "text": "",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "y",
        "async": false,
        "comment": "",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "y",
        "required": true,
        "spec": [
          {
            "text": "",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "speed",
        "async": false,
        "comment": "Optional speed of the drag in pixels per second.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "speed",
        "required": false,
        "spec": [
          {
            "text": "Optional speed of the drag in pixels per second.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: AndroidDevice.setDefaultTimeout`] method.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: AndroidDevice.setDefaultTimeout`] method.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[AndroidSelector]",
    "name": "AndroidSelector"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: AndroidDevice.setDefaultTimeout`] method.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: AndroidDevice.setDefaultTimeout`] method.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[AndroidSelector]",
    "name": "AndroidSelector"
  },
  {
    "expression": "[AndroidFlingDirection]<\"down\"|\"up\"|\"left\"|\"right\">",
    "name": "AndroidFlingDirection",
    "union": [
      {
        "name": "\"down\""
      },
      {
        "name": "\"up\""
      },
      {
        "name": "\"left\""
      },
      {
        "name": "\"right\""
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "speed",
        "async": false,
        "comment": "Optional speed of the fling in pixels per second.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "speed",
        "required": false,
        "spec": [
          {
            "text": "Optional speed of the fling in pixels per second.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: AndroidDevice.setDefaultTimeout`] method.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: AndroidDevice.setDefaultTimeout`] method.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[AndroidElementInfo]",
    "name": "AndroidElementInfo"
  },
  {
    "expression": "[AndroidSelector]",
    "name": "AndroidSelector"
  },
  {
    "expression": "[AndroidInput]",
    "name": "AndroidInput"
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]|[Buffer]",
    "name": "",
    "union": [
      {
        "name": "string"
      },
      {
        "name": "Buffer"
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "args",
        "async": false,
        "comment": "Optional arguments to pass to the `shell:cmd package install` call. Defaults to `-r -t -S`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "args",
        "required": false,
        "spec": [
          {
            "text": "Optional arguments to pass to the `shell:cmd package install` call. Defaults to `-r -t -S`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[string]>",
          "name": "Array",
          "templates": [
            {
              "name": "string"
            }
          ]
        }
      }
    ]
  },
  {
    "expression": "[ChromiumBrowserContext]",
    "name": "ChromiumBrowserContext"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "acceptDownloads",
        "async": false,
        "comment": "Whether to automatically download all the attachments. Defaults to `false` where all the downloads are canceled.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "acceptDownloads",
        "required": false,
        "spec": [
          {
            "text": "Whether to automatically download all the attachments. Defaults to `false` where all the downloads are canceled.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "bypassCSP",
        "async": false,
        "comment": "Toggles bypassing page's Content-Security-Policy.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "bypassCSP",
        "required": false,
        "spec": [
          {
            "text": "Toggles bypassing page's Content-Security-Policy.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "colorScheme",
        "async": false,
        "comment": "Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See\n[`method: Page.emulateMedia`] for more details. Defaults to `'light'`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "colorScheme",
        "required": false,
        "spec": [
          {
            "text": "Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See [`method: Page.emulateMedia`] for more details. Defaults to `'light'`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[ColorScheme]<\"light\"|\"dark\"|\"no-preference\">",
          "name": "ColorScheme",
          "union": [
            {
              "name": "\"light\""
            },
            {
              "name": "\"dark\""
            },
            {
              "name": "\"no-preference\""
            }
          ]
        }
      },
      {
        "alias": "command",
        "async": false,
        "comment": "Optional package name to launch instead of default Chrome for Android.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "command",
        "required": false,
        "spec": [
          {
            "text": "Optional package name to launch instead of default Chrome for Android.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "deviceScaleFactor",
        "async": false,
        "comment": "Specify device scale factor (can be thought of as dpr). Defaults to `1`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "deviceScaleFactor",
        "required": false,
        "spec": [
          {
            "text": "Specify device scale factor (can be thought of as dpr). Defaults to `1`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "extraHTTPHeaders",
        "async": false,
        "comment": "An object containing additional HTTP headers to be sent with every request. All header values must be strings.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "extraHTTPHeaders",
        "required": false,
        "spec": [
          {
            "text": "An object containing additional HTTP headers to be sent with every request. All header values must be strings.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]<[string], [string]>",
          "name": "Object",
          "templates": [
            {
              "name": "string"
            },
            {
              "name": "string"
            }
          ]
        }
      },
      {
        "alias": "geolocation",
        "async": false,
        "comment": "",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "geolocation",
        "required": false,
        "spec": [],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "latitude",
              "async": false,
              "comment": "Latitude between -90 and 90.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "latitude",
              "required": true,
              "spec": [
                {
                  "text": "Latitude between -90 and 90.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            },
            {
              "alias": "longitude",
              "async": false,
              "comment": "Longitude between -180 and 180.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "longitude",
              "required": true,
              "spec": [
                {
                  "text": "Longitude between -180 and 180.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            },
            {
              "alias": "accuracy",
              "async": false,
              "comment": "Non-negative accuracy value. Defaults to `0`.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "accuracy",
              "required": false,
              "spec": [
                {
                  "text": "Non-negative accuracy value. Defaults to `0`.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            }
          ]
        }
      },
      {
        "alias": "hasTouch",
        "async": false,
        "comment": "Specifies if viewport supports touch events. Defaults to false.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "hasTouch",
        "required": false,
        "spec": [
          {
            "text": "Specifies if viewport supports touch events. Defaults to false.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "httpCredentials",
        "async": false,
        "comment": "Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication).",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "httpCredentials",
        "required": false,
        "spec": [
          {
            "text": "Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication).",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "username",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "username",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            },
            {
              "alias": "password",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "password",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            }
          ]
        }
      },
      {
        "alias": "ignoreHTTPSErrors",
        "async": false,
        "comment": "Whether to ignore HTTPS errors during navigation. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "ignoreHTTPSErrors",
        "required": false,
        "spec": [
          {
            "text": "Whether to ignore HTTPS errors during navigation. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "isMobile",
        "async": false,
        "comment": "Whether the `meta viewport` tag is taken into account and touch events are enabled. Defaults to `false`. Not supported\nin Firefox.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "isMobile",
        "required": false,
        "spec": [
          {
            "text": "Whether the `meta viewport` tag is taken into account and touch events are enabled. Defaults to `false`. Not supported in Firefox.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "javaScriptEnabled",
        "async": false,
        "comment": "Whether or not to enable JavaScript in the context. Defaults to `true`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "javaScriptEnabled",
        "required": false,
        "spec": [
          {
            "text": "Whether or not to enable JavaScript in the context. Defaults to `true`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "locale",
        "async": false,
        "comment": "Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language`\nrequest header value as well as number and date formatting rules.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "locale",
        "required": false,
        "spec": [
          {
            "text": "Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "logger",
        "async": false,
        "comment": "Logger sink for Playwright logging.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "logger",
        "required": false,
        "spec": [
          {
            "text": "Logger sink for Playwright logging.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Logger]",
          "name": "Logger"
        }
      },
      {
        "alias": "noViewport",
        "async": false,
        "comment": "Does not enforce fixed viewport, allows resizing window in the headed mode.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "noViewport",
        "required": false,
        "spec": [
          {
            "text": "Does not enforce fixed viewport, allows resizing window in the headed mode.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "offline",
        "async": false,
        "comment": "Whether to emulate network being offline. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "offline",
        "required": false,
        "spec": [
          {
            "text": "Whether to emulate network being offline. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "permissions",
        "async": false,
        "comment": "A list of permissions to grant to all pages in this context. See [`method: BrowserContext.grantPermissions`] for more\ndetails.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "permissions",
        "required": false,
        "spec": [
          {
            "text": "A list of permissions to grant to all pages in this context. See [`method: BrowserContext.grantPermissions`] for more details.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[string]>",
          "name": "Array",
          "templates": [
            {
              "name": "string"
            }
          ]
        }
      },
      {
        "alias": "recordHar",
        "async": false,
        "comment": "Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file. If not\nspecified, the HAR is not recorded. Make sure to await [`method: BrowserContext.close`] for the HAR to be saved.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "recordHar",
        "required": false,
        "spec": [
          {
            "text": "Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file. If not specified, the HAR is not recorded. Make sure to await [`method: BrowserContext.close`] for the HAR to be saved.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "omitContent",
              "async": false,
              "comment": "Optional setting to control whether to omit request content from the HAR. Defaults to `false`.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "omitContent",
              "required": false,
              "spec": [
                {
                  "text": "Optional setting to control whether to omit request content from the HAR. Defaults to `false`.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[boolean]",
                "name": "boolean"
              }
            },
            {
              "alias": "path",
              "async": false,
              "comment": "Path on the filesystem to write the HAR file to.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "path",
              "required": true,
              "spec": [
                {
                  "text": "Path on the filesystem to write the HAR file to.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[path]",
                "name": "path"
              }
            }
          ]
        }
      },
      {
        "alias": "recordHarOmitContent",
        "async": false,
        "comment": "Optional setting to control whether to omit request content from the HAR. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {
            "python": "record_har_omit_content"
          },
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "recordHarOmitContent",
        "required": false,
        "spec": [
          {
            "text": "Optional setting to control whether to omit request content from the HAR. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "recordHarPath",
        "async": false,
        "comment": "Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into the specified HAR file on the\nfilesystem. If not specified, the HAR is not recorded. Make sure to call [`method: BrowserContext.close`] for the HAR to\nbe saved.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {
            "python": "record_har_path"
          },
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "recordHarPath",
        "required": false,
        "spec": [
          {
            "text": "Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into the specified HAR file on the filesystem. If not specified, the HAR is not recorded. Make sure to call [`method: BrowserContext.close`] for the HAR to be saved.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "recordVideo",
        "async": false,
        "comment": "Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded. Make\nsure to await [`method: BrowserContext.close`] for videos to be saved.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "recordVideo",
        "required": false,
        "spec": [
          {
            "text": "Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded. Make sure to await [`method: BrowserContext.close`] for videos to be saved.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "dir",
              "async": false,
              "comment": "Path to the directory to put videos into.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "dir",
              "required": true,
              "spec": [
                {
                  "text": "Path to the directory to put videos into.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[path]",
                "name": "path"
              }
            },
            {
              "alias": "size",
              "async": false,
              "comment": "Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit\ninto 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page\nwill be scaled down if necessary to fit the specified size.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "size",
              "required": false,
              "spec": [
                {
                  "text": "Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[Object]",
                "name": "Object",
                "properties": [
                  {
                    "alias": "width",
                    "async": false,
                    "comment": "Video frame width.",
                    "deprecated": false,
                    "kind": "property",
                    "langs": {},
                    "name": "width",
                    "required": true,
                    "spec": [
                      {
                        "text": "Video frame width.",
                        "type": "text"
                      }
                    ],
                    "type": {
                      "expression": "[int]",
                      "name": "int"
                    }
                  },
                  {
                    "alias": "height",
                    "async": false,
                    "comment": "Video frame height.",
                    "deprecated": false,
                    "kind": "property",
                    "langs": {},
                    "name": "height",
                    "required": true,
                    "spec": [
                      {
                        "text": "Video frame height.",
                        "type": "text"
                      }
                    ],
                    "type": {
                      "expression": "[int]",
                      "name": "int"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      {
        "alias": "recordVideoDir",
        "async": false,
        "comment": "Enables video recording for all pages into the specified directory. If not specified videos are not recorded. Make sure\nto call [`method: BrowserContext.close`] for videos to be saved.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {
            "python": "record_video_dir"
          },
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "recordVideoDir",
        "required": false,
        "spec": [
          {
            "text": "Enables video recording for all pages into the specified directory. If not specified videos are not recorded. Make sure to call [`method: BrowserContext.close`] for videos to be saved.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "recordVideoSize",
        "async": false,
        "comment": "Dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into\n800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will\nbe scaled down if necessary to fit the specified size.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {
            "python": "record_video_size"
          },
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "recordVideoSize",
        "required": false,
        "spec": [
          {
            "text": "Dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "width",
              "async": false,
              "comment": "Video frame width.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "width",
              "required": true,
              "spec": [
                {
                  "text": "Video frame width.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[int]",
                "name": "int"
              }
            },
            {
              "alias": "height",
              "async": false,
              "comment": "Video frame height.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "height",
              "required": true,
              "spec": [
                {
                  "text": "Video frame height.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[int]",
                "name": "int"
              }
            }
          ]
        }
      },
      {
        "alias": "screen",
        "async": false,
        "comment": "Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the `viewport`\nis set.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {
            "csharp": "screenSize",
            "java": "screenSize"
          },
          "overrides": {},
          "types": {}
        },
        "name": "screen",
        "required": false,
        "spec": [
          {
            "text": "Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the `viewport` is set.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "width",
              "async": false,
              "comment": "page width in pixels.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "width",
              "required": true,
              "spec": [
                {
                  "text": "page width in pixels.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[int]",
                "name": "int"
              }
            },
            {
              "alias": "height",
              "async": false,
              "comment": "page height in pixels.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "height",
              "required": true,
              "spec": [
                {
                  "text": "page height in pixels.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[int]",
                "name": "int"
              }
            }
          ]
        }
      },
      {
        "alias": "timezoneId",
        "async": false,
        "comment": "Changes the timezone of the context. See\n[ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1)\nfor a list of supported timezone IDs.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timezoneId",
        "required": false,
        "spec": [
          {
            "text": "Changes the timezone of the context. See [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1) for a list of supported timezone IDs.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "userAgent",
        "async": false,
        "comment": "Specific user agent to use in this context.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "userAgent",
        "required": false,
        "spec": [
          {
            "text": "Specific user agent to use in this context.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "videoSize",
        "async": false,
        "comment": "**DEPRECATED** Use `recordVideo` instead.",
        "deprecated": true,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "videoSize",
        "required": false,
        "spec": [
          {
            "text": "**DEPRECATED** Use `recordVideo` instead.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "width",
              "async": false,
              "comment": "Video frame width.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "width",
              "required": true,
              "spec": [
                {
                  "text": "Video frame width.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[int]",
                "name": "int"
              }
            },
            {
              "alias": "height",
              "async": false,
              "comment": "Video frame height.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "height",
              "required": true,
              "spec": [
                {
                  "text": "Video frame height.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[int]",
                "name": "int"
              }
            }
          ]
        }
      },
      {
        "alias": "videosPath",
        "async": false,
        "comment": "**DEPRECATED** Use `recordVideo` instead.",
        "deprecated": true,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "videosPath",
        "required": false,
        "spec": [
          {
            "text": "**DEPRECATED** Use `recordVideo` instead.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "viewport",
        "async": false,
        "comment": "Emulates consistent viewport for each page. Defaults to an 1280x720 viewport. `null` disables the default viewport.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {
            "csharp": "viewportSize",
            "java": "viewportSize"
          },
          "only": [
            "js",
            "java"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "viewport",
        "required": false,
        "spec": [
          {
            "text": "Emulates consistent viewport for each page. Defaults to an 1280x720 viewport. `null` disables the default viewport.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[null]|[Object]",
          "name": "",
          "union": [
            {
              "name": "null"
            },
            {
              "name": "Object",
              "properties": [
                {
                  "alias": "width",
                  "async": false,
                  "comment": "page width in pixels.",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "width",
                  "required": true,
                  "spec": [
                    {
                      "text": "page width in pixels.",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[int]",
                    "name": "int"
                  }
                },
                {
                  "alias": "height",
                  "async": false,
                  "comment": "page height in pixels.",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "height",
                  "required": true,
                  "spec": [
                    {
                      "text": "page height in pixels.",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[int]",
                    "name": "int"
                  }
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "viewport",
        "async": false,
        "comment": "Sets a consistent viewport for each page. Defaults to an 1280x720 viewport. `no_viewport` disables the fixed viewport.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "viewport",
        "required": false,
        "spec": [
          {
            "text": "Sets a consistent viewport for each page. Defaults to an 1280x720 viewport. `no_viewport` disables the fixed viewport.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[null]|[Object]",
          "name": "",
          "union": [
            {
              "name": "null"
            },
            {
              "name": "Object",
              "properties": [
                {
                  "alias": "width",
                  "async": false,
                  "comment": "page width in pixels.",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "width",
                  "required": true,
                  "spec": [
                    {
                      "text": "page width in pixels.",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[int]",
                    "name": "int"
                  }
                },
                {
                  "alias": "height",
                  "async": false,
                  "comment": "page height in pixels.",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "height",
                  "required": true,
                  "spec": [
                    {
                      "text": "page height in pixels.",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[int]",
                    "name": "int"
                  }
                }
              ]
            }
          ]
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[AndroidSelector]",
    "name": "AndroidSelector"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: AndroidDevice.setDefaultTimeout`] method.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: AndroidDevice.setDefaultTimeout`] method.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[AndroidSocket]",
    "name": "AndroidSocket"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "void"
  },
  {
    "expression": "[AndroidSelector]",
    "name": "AndroidSelector"
  },
  {
    "expression": "[float]",
    "name": "float"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "speed",
        "async": false,
        "comment": "Optional speed of the pinch in pixels per second.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "speed",
        "required": false,
        "spec": [
          {
            "text": "Optional speed of the pinch in pixels per second.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: AndroidDevice.setDefaultTimeout`] method.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: AndroidDevice.setDefaultTimeout`] method.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[AndroidSelector]",
    "name": "AndroidSelector"
  },
  {
    "expression": "[float]",
    "name": "float"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "speed",
        "async": false,
        "comment": "Optional speed of the pinch in pixels per second.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "speed",
        "required": false,
        "spec": [
          {
            "text": "Optional speed of the pinch in pixels per second.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: AndroidDevice.setDefaultTimeout`] method.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: AndroidDevice.setDefaultTimeout`] method.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[AndroidSelector]",
    "name": "AndroidSelector"
  },
  {
    "expression": "[AndroidKey]",
    "name": "AndroidKey"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: AndroidDevice.setDefaultTimeout`] method.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: AndroidDevice.setDefaultTimeout`] method.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]|[Buffer]",
    "name": "",
    "union": [
      {
        "name": "string"
      },
      {
        "name": "Buffer"
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "mode",
        "async": false,
        "comment": "Optional file mode, defaults to `644` (`rw-r--r--`).",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "mode",
        "required": false,
        "spec": [
          {
            "text": "Optional file mode, defaults to `644` (`rw-r--r--`).",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[int]",
          "name": "int"
        }
      }
    ]
  },
  {
    "expression": "[Buffer]",
    "name": "Buffer"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "path",
        "async": false,
        "comment": "The file path to save the image to. If `path` is a relative path, then it is resolved relative to the current working\ndirectory. If no path is provided, the image won't be saved to the disk.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "path",
        "required": false,
        "spec": [
          {
            "text": "The file path to save the image to. If `path` is a relative path, then it is resolved relative to the current working directory. If no path is provided, the image won't be saved to the disk.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[AndroidSelector]",
    "name": "AndroidSelector"
  },
  {
    "expression": "[AndroidScrollDirection]<\"down\"|\"up\"|\"left\"|\"right\">",
    "name": "AndroidScrollDirection",
    "union": [
      {
        "name": "\"down\""
      },
      {
        "name": "\"up\""
      },
      {
        "name": "\"left\""
      },
      {
        "name": "\"right\""
      }
    ]
  },
  {
    "expression": "[float]",
    "name": "float"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "speed",
        "async": false,
        "comment": "Optional speed of the scroll in pixels per second.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "speed",
        "required": false,
        "spec": [
          {
            "text": "Optional speed of the scroll in pixels per second.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: AndroidDevice.setDefaultTimeout`] method.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: AndroidDevice.setDefaultTimeout`] method.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "void"
  },
  {
    "expression": "[float]",
    "name": "float"
  },
  {
    "expression": "[Buffer]",
    "name": "Buffer"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "void"
  },
  {
    "expression": "[AndroidSelector]",
    "name": "AndroidSelector"
  },
  {
    "expression": "[AndroidSwipeDirection]<\"down\"|\"up\"|\"left\"|\"right\">",
    "name": "AndroidSwipeDirection",
    "union": [
      {
        "name": "\"down\""
      },
      {
        "name": "\"up\""
      },
      {
        "name": "\"left\""
      },
      {
        "name": "\"right\""
      }
    ]
  },
  {
    "expression": "[float]",
    "name": "float"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "speed",
        "async": false,
        "comment": "Optional speed of the swipe in pixels per second.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "speed",
        "required": false,
        "spec": [
          {
            "text": "Optional speed of the swipe in pixels per second.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: AndroidDevice.setDefaultTimeout`] method.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: AndroidDevice.setDefaultTimeout`] method.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[AndroidSelector]",
    "name": "AndroidSelector"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "duration",
        "async": false,
        "comment": "Optional duration of the tap in milliseconds.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "duration",
        "required": false,
        "spec": [
          {
            "text": "Optional duration of the tap in milliseconds.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: AndroidDevice.setDefaultTimeout`] method.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: AndroidDevice.setDefaultTimeout`] method.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[AndroidSelector]",
    "name": "AndroidSelector"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "state",
        "async": false,
        "comment": "Optional state. Can be either:\n- default - wait for element to be present.\n- `'gone'` - wait for element to not be present.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "state",
        "required": false,
        "spec": [
          {
            "text": "Optional state. Can be either:",
            "type": "text"
          },
          {
            "liType": "bullet",
            "text": "default - wait for element to be present.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'gone'` - wait for element to not be present.",
            "type": "li"
          }
        ],
        "type": {
          "expression": "\"gone\"",
          "name": "\"gone\""
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: AndroidDevice.setDefaultTimeout`] method.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: AndroidDevice.setDefaultTimeout`] method.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[any]",
    "name": "any"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[function]|[Object]",
    "name": "",
    "union": [
      {
        "name": "function"
      },
      {
        "name": "Object",
        "properties": [
          {
            "alias": "predicate",
            "async": false,
            "comment": "receives the event data and resolves to truthy value when the waiting should resolve.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "predicate",
            "required": true,
            "spec": [
              {
                "text": "receives the event data and resolves to truthy value when the waiting should resolve.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[function]",
              "name": "function"
            }
          },
          {
            "alias": "timeout",
            "async": false,
            "comment": "maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\nvalue can be changed by using the [`method: AndroidDevice.setDefaultTimeout`].",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "timeout",
            "required": false,
            "spec": [
              {
                "text": "maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [`method: AndroidDevice.setDefaultTimeout`].",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[float]",
              "name": "float"
            }
          }
        ]
      }
    ]
  },
  {
    "expression": "[AndroidWebView]",
    "name": "AndroidWebView"
  },
  {
    "expression": "[Object]",
    "name": "Object",
    "properties": [
      {
        "alias": "pkg",
        "async": false,
        "comment": "Package identifier.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "pkg",
        "required": true,
        "spec": [
          {
            "text": "Package identifier.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: AndroidDevice.setDefaultTimeout`] method.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: AndroidDevice.setDefaultTimeout`] method.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Array]<[AndroidWebView]>",
    "name": "Array",
    "templates": [
      {
        "name": "AndroidWebView"
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[Object]",
    "name": "Object",
    "properties": [
      {
        "alias": "x",
        "async": false,
        "comment": "",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "x",
        "required": true,
        "spec": [
          {
            "text": "",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "y",
        "async": false,
        "comment": "",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "y",
        "required": true,
        "spec": [
          {
            "text": "",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Object]",
    "name": "Object",
    "properties": [
      {
        "alias": "x",
        "async": false,
        "comment": "",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "x",
        "required": true,
        "spec": [
          {
            "text": "",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "y",
        "async": false,
        "comment": "",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "y",
        "required": true,
        "spec": [
          {
            "text": "",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[int]",
    "name": "int"
  },
  {
    "name": "void"
  },
  {
    "expression": "[AndroidKey]",
    "name": "AndroidKey"
  },
  {
    "name": "void"
  },
  {
    "expression": "[Object]",
    "name": "Object",
    "properties": [
      {
        "alias": "x",
        "async": false,
        "comment": "",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "x",
        "required": true,
        "spec": [
          {
            "text": "",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "y",
        "async": false,
        "comment": "",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "y",
        "required": true,
        "spec": [
          {
            "text": "",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Array]<[Object]>",
    "name": "Array",
    "templates": [
      {
        "name": "Object",
        "properties": [
          {
            "alias": "x",
            "async": false,
            "comment": "",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "x",
            "required": true,
            "spec": [
              {
                "text": "",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[float]",
              "name": "float"
            }
          },
          {
            "alias": "y",
            "async": false,
            "comment": "",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "y",
            "required": true,
            "spec": [
              {
                "text": "",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[float]",
              "name": "float"
            }
          }
        ]
      }
    ]
  },
  {
    "expression": "[int]",
    "name": "int"
  },
  {
    "name": "void"
  },
  {
    "expression": "[Object]",
    "name": "Object",
    "properties": [
      {
        "alias": "x",
        "async": false,
        "comment": "",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "x",
        "required": true,
        "spec": [
          {
            "text": "",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "y",
        "async": false,
        "comment": "",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "y",
        "required": true,
        "spec": [
          {
            "text": "",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "void"
  },
  {
    "expression": "[Buffer]",
    "name": "Buffer"
  },
  {
    "name": "void"
  },
  {
    "name": "void"
  },
  {
    "expression": "[Buffer]",
    "name": "Buffer"
  },
  {
    "name": "void"
  },
  {
    "expression": "[Page]",
    "name": "Page"
  },
  {
    "expression": "[int]",
    "name": "int"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[Browser]",
    "name": "Browser"
  },
  {
    "name": "void"
  },
  {
    "expression": "[Array]<[BrowserContext]>",
    "name": "Array",
    "templates": [
      {
        "name": "BrowserContext"
      }
    ]
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[BrowserContext]",
    "name": "BrowserContext"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "acceptDownloads",
        "async": false,
        "comment": "Whether to automatically download all the attachments. Defaults to `false` where all the downloads are canceled.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "acceptDownloads",
        "required": false,
        "spec": [
          {
            "text": "Whether to automatically download all the attachments. Defaults to `false` where all the downloads are canceled.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "bypassCSP",
        "async": false,
        "comment": "Toggles bypassing page's Content-Security-Policy.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "bypassCSP",
        "required": false,
        "spec": [
          {
            "text": "Toggles bypassing page's Content-Security-Policy.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "colorScheme",
        "async": false,
        "comment": "Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See\n[`method: Page.emulateMedia`] for more details. Defaults to `'light'`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "colorScheme",
        "required": false,
        "spec": [
          {
            "text": "Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See [`method: Page.emulateMedia`] for more details. Defaults to `'light'`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[ColorScheme]<\"light\"|\"dark\"|\"no-preference\">",
          "name": "ColorScheme",
          "union": [
            {
              "name": "\"light\""
            },
            {
              "name": "\"dark\""
            },
            {
              "name": "\"no-preference\""
            }
          ]
        }
      },
      {
        "alias": "deviceScaleFactor",
        "async": false,
        "comment": "Specify device scale factor (can be thought of as dpr). Defaults to `1`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "deviceScaleFactor",
        "required": false,
        "spec": [
          {
            "text": "Specify device scale factor (can be thought of as dpr). Defaults to `1`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "extraHTTPHeaders",
        "async": false,
        "comment": "An object containing additional HTTP headers to be sent with every request. All header values must be strings.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "extraHTTPHeaders",
        "required": false,
        "spec": [
          {
            "text": "An object containing additional HTTP headers to be sent with every request. All header values must be strings.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]<[string], [string]>",
          "name": "Object",
          "templates": [
            {
              "name": "string"
            },
            {
              "name": "string"
            }
          ]
        }
      },
      {
        "alias": "geolocation",
        "async": false,
        "comment": "",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "geolocation",
        "required": false,
        "spec": [],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "latitude",
              "async": false,
              "comment": "Latitude between -90 and 90.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "latitude",
              "required": true,
              "spec": [
                {
                  "text": "Latitude between -90 and 90.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            },
            {
              "alias": "longitude",
              "async": false,
              "comment": "Longitude between -180 and 180.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "longitude",
              "required": true,
              "spec": [
                {
                  "text": "Longitude between -180 and 180.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            },
            {
              "alias": "accuracy",
              "async": false,
              "comment": "Non-negative accuracy value. Defaults to `0`.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "accuracy",
              "required": false,
              "spec": [
                {
                  "text": "Non-negative accuracy value. Defaults to `0`.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            }
          ]
        }
      },
      {
        "alias": "hasTouch",
        "async": false,
        "comment": "Specifies if viewport supports touch events. Defaults to false.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "hasTouch",
        "required": false,
        "spec": [
          {
            "text": "Specifies if viewport supports touch events. Defaults to false.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "httpCredentials",
        "async": false,
        "comment": "Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication).",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "httpCredentials",
        "required": false,
        "spec": [
          {
            "text": "Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication).",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "username",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "username",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            },
            {
              "alias": "password",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "password",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            }
          ]
        }
      },
      {
        "alias": "ignoreHTTPSErrors",
        "async": false,
        "comment": "Whether to ignore HTTPS errors during navigation. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "ignoreHTTPSErrors",
        "required": false,
        "spec": [
          {
            "text": "Whether to ignore HTTPS errors during navigation. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "isMobile",
        "async": false,
        "comment": "Whether the `meta viewport` tag is taken into account and touch events are enabled. Defaults to `false`. Not supported\nin Firefox.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "isMobile",
        "required": false,
        "spec": [
          {
            "text": "Whether the `meta viewport` tag is taken into account and touch events are enabled. Defaults to `false`. Not supported in Firefox.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "javaScriptEnabled",
        "async": false,
        "comment": "Whether or not to enable JavaScript in the context. Defaults to `true`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "javaScriptEnabled",
        "required": false,
        "spec": [
          {
            "text": "Whether or not to enable JavaScript in the context. Defaults to `true`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "locale",
        "async": false,
        "comment": "Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language`\nrequest header value as well as number and date formatting rules.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "locale",
        "required": false,
        "spec": [
          {
            "text": "Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "logger",
        "async": false,
        "comment": "Logger sink for Playwright logging.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "logger",
        "required": false,
        "spec": [
          {
            "text": "Logger sink for Playwright logging.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Logger]",
          "name": "Logger"
        }
      },
      {
        "alias": "noViewport",
        "async": false,
        "comment": "Does not enforce fixed viewport, allows resizing window in the headed mode.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "noViewport",
        "required": false,
        "spec": [
          {
            "text": "Does not enforce fixed viewport, allows resizing window in the headed mode.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "offline",
        "async": false,
        "comment": "Whether to emulate network being offline. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "offline",
        "required": false,
        "spec": [
          {
            "text": "Whether to emulate network being offline. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "permissions",
        "async": false,
        "comment": "A list of permissions to grant to all pages in this context. See [`method: BrowserContext.grantPermissions`] for more\ndetails.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "permissions",
        "required": false,
        "spec": [
          {
            "text": "A list of permissions to grant to all pages in this context. See [`method: BrowserContext.grantPermissions`] for more details.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[string]>",
          "name": "Array",
          "templates": [
            {
              "name": "string"
            }
          ]
        }
      },
      {
        "alias": "proxy",
        "async": false,
        "comment": "Network proxy settings to use with this context. Note that browser needs to be launched with the global proxy for this\noption to work. If all contexts override the proxy, global proxy will be never used and can be any string, for example\n`launch({ proxy: { server: 'per-context' } })`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "proxy",
        "required": false,
        "spec": [
          {
            "text": "Network proxy settings to use with this context. Note that browser needs to be launched with the global proxy for this option to work. If all contexts override the proxy, global proxy will be never used and can be any string, for example `launch({ proxy: { server: 'per-context' } })`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "server",
              "async": false,
              "comment": "Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or\n`socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "server",
              "required": true,
              "spec": [
                {
                  "text": "Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            },
            {
              "alias": "bypass",
              "async": false,
              "comment": "Optional coma-separated domains to bypass proxy, for example `\".com, chromium.org, .domain.com\"`.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "bypass",
              "required": false,
              "spec": [
                {
                  "text": "Optional coma-separated domains to bypass proxy, for example `\".com, chromium.org, .domain.com\"`.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            },
            {
              "alias": "username",
              "async": false,
              "comment": "Optional username to use if HTTP proxy requires authentication.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "username",
              "required": false,
              "spec": [
                {
                  "text": "Optional username to use if HTTP proxy requires authentication.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            },
            {
              "alias": "password",
              "async": false,
              "comment": "Optional password to use if HTTP proxy requires authentication.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "password",
              "required": false,
              "spec": [
                {
                  "text": "Optional password to use if HTTP proxy requires authentication.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            }
          ]
        }
      },
      {
        "alias": "recordHar",
        "async": false,
        "comment": "Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file. If not\nspecified, the HAR is not recorded. Make sure to await [`method: BrowserContext.close`] for the HAR to be saved.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "recordHar",
        "required": false,
        "spec": [
          {
            "text": "Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file. If not specified, the HAR is not recorded. Make sure to await [`method: BrowserContext.close`] for the HAR to be saved.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "omitContent",
              "async": false,
              "comment": "Optional setting to control whether to omit request content from the HAR. Defaults to `false`.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "omitContent",
              "required": false,
              "spec": [
                {
                  "text": "Optional setting to control whether to omit request content from the HAR. Defaults to `false`.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[boolean]",
                "name": "boolean"
              }
            },
            {
              "alias": "path",
              "async": false,
              "comment": "Path on the filesystem to write the HAR file to.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "path",
              "required": true,
              "spec": [
                {
                  "text": "Path on the filesystem to write the HAR file to.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[path]",
                "name": "path"
              }
            }
          ]
        }
      },
      {
        "alias": "recordHarOmitContent",
        "async": false,
        "comment": "Optional setting to control whether to omit request content from the HAR. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {
            "python": "record_har_omit_content"
          },
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "recordHarOmitContent",
        "required": false,
        "spec": [
          {
            "text": "Optional setting to control whether to omit request content from the HAR. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "recordHarPath",
        "async": false,
        "comment": "Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into the specified HAR file on the\nfilesystem. If not specified, the HAR is not recorded. Make sure to call [`method: BrowserContext.close`] for the HAR to\nbe saved.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {
            "python": "record_har_path"
          },
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "recordHarPath",
        "required": false,
        "spec": [
          {
            "text": "Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into the specified HAR file on the filesystem. If not specified, the HAR is not recorded. Make sure to call [`method: BrowserContext.close`] for the HAR to be saved.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "recordVideo",
        "async": false,
        "comment": "Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded. Make\nsure to await [`method: BrowserContext.close`] for videos to be saved.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "recordVideo",
        "required": false,
        "spec": [
          {
            "text": "Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded. Make sure to await [`method: BrowserContext.close`] for videos to be saved.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "dir",
              "async": false,
              "comment": "Path to the directory to put videos into.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "dir",
              "required": true,
              "spec": [
                {
                  "text": "Path to the directory to put videos into.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[path]",
                "name": "path"
              }
            },
            {
              "alias": "size",
              "async": false,
              "comment": "Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit\ninto 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page\nwill be scaled down if necessary to fit the specified size.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "size",
              "required": false,
              "spec": [
                {
                  "text": "Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[Object]",
                "name": "Object",
                "properties": [
                  {
                    "alias": "width",
                    "async": false,
                    "comment": "Video frame width.",
                    "deprecated": false,
                    "kind": "property",
                    "langs": {},
                    "name": "width",
                    "required": true,
                    "spec": [
                      {
                        "text": "Video frame width.",
                        "type": "text"
                      }
                    ],
                    "type": {
                      "expression": "[int]",
                      "name": "int"
                    }
                  },
                  {
                    "alias": "height",
                    "async": false,
                    "comment": "Video frame height.",
                    "deprecated": false,
                    "kind": "property",
                    "langs": {},
                    "name": "height",
                    "required": true,
                    "spec": [
                      {
                        "text": "Video frame height.",
                        "type": "text"
                      }
                    ],
                    "type": {
                      "expression": "[int]",
                      "name": "int"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      {
        "alias": "recordVideoDir",
        "async": false,
        "comment": "Enables video recording for all pages into the specified directory. If not specified videos are not recorded. Make sure\nto call [`method: BrowserContext.close`] for videos to be saved.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {
            "python": "record_video_dir"
          },
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "recordVideoDir",
        "required": false,
        "spec": [
          {
            "text": "Enables video recording for all pages into the specified directory. If not specified videos are not recorded. Make sure to call [`method: BrowserContext.close`] for videos to be saved.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "recordVideoSize",
        "async": false,
        "comment": "Dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into\n800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will\nbe scaled down if necessary to fit the specified size.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {
            "python": "record_video_size"
          },
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "recordVideoSize",
        "required": false,
        "spec": [
          {
            "text": "Dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "width",
              "async": false,
              "comment": "Video frame width.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "width",
              "required": true,
              "spec": [
                {
                  "text": "Video frame width.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[int]",
                "name": "int"
              }
            },
            {
              "alias": "height",
              "async": false,
              "comment": "Video frame height.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "height",
              "required": true,
              "spec": [
                {
                  "text": "Video frame height.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[int]",
                "name": "int"
              }
            }
          ]
        }
      },
      {
        "alias": "screen",
        "async": false,
        "comment": "Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the `viewport`\nis set.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {
            "csharp": "screenSize",
            "java": "screenSize"
          },
          "overrides": {},
          "types": {}
        },
        "name": "screen",
        "required": false,
        "spec": [
          {
            "text": "Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the `viewport` is set.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "width",
              "async": false,
              "comment": "page width in pixels.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "width",
              "required": true,
              "spec": [
                {
                  "text": "page width in pixels.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[int]",
                "name": "int"
              }
            },
            {
              "alias": "height",
              "async": false,
              "comment": "page height in pixels.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "height",
              "required": true,
              "spec": [
                {
                  "text": "page height in pixels.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[int]",
                "name": "int"
              }
            }
          ]
        }
      },
      {
        "alias": "storageState",
        "async": false,
        "comment": "Populates context with given storage state. This option can be used to initialize context with logged-in information\nobtained via [`method: BrowserContext.storageState`]. Either a path to the file with saved storage, or an object with\nthe following fields:",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "storageState",
        "required": false,
        "spec": [
          {
            "text": "Populates context with given storage state. This option can be used to initialize context with logged-in information obtained via [`method: BrowserContext.storageState`]. Either a path to the file with saved storage, or an object with the following fields:",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]|[Object]",
          "name": "",
          "union": [
            {
              "name": "path"
            },
            {
              "name": "Object",
              "properties": [
                {
                  "alias": "cookies",
                  "async": false,
                  "comment": "Optional cookies to set for context",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "cookies",
                  "required": false,
                  "spec": [
                    {
                      "text": "Optional cookies to set for context",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[Array]<[Object]>",
                    "name": "Array",
                    "templates": [
                      {
                        "name": "Object",
                        "properties": [
                          {
                            "alias": "name",
                            "async": false,
                            "comment": "",
                            "deprecated": false,
                            "kind": "property",
                            "langs": {},
                            "name": "name",
                            "required": true,
                            "spec": [
                              {
                                "text": "",
                                "type": "text"
                              }
                            ],
                            "type": {
                              "expression": "[string]",
                              "name": "string"
                            }
                          },
                          {
                            "alias": "value",
                            "async": false,
                            "comment": "",
                            "deprecated": false,
                            "kind": "property",
                            "langs": {},
                            "name": "value",
                            "required": true,
                            "spec": [
                              {
                                "text": "",
                                "type": "text"
                              }
                            ],
                            "type": {
                              "expression": "[string]",
                              "name": "string"
                            }
                          },
                          {
                            "alias": "url",
                            "async": false,
                            "comment": "Optional either url or domain / path are required",
                            "deprecated": false,
                            "kind": "property",
                            "langs": {},
                            "name": "url",
                            "required": false,
                            "spec": [
                              {
                                "text": "Optional either url or domain / path are required",
                                "type": "text"
                              }
                            ],
                            "type": {
                              "expression": "[string]",
                              "name": "string"
                            }
                          },
                          {
                            "alias": "domain",
                            "async": false,
                            "comment": "Optional either url or domain / path are required",
                            "deprecated": false,
                            "kind": "property",
                            "langs": {},
                            "name": "domain",
                            "required": false,
                            "spec": [
                              {
                                "text": "Optional either url or domain / path are required",
                                "type": "text"
                              }
                            ],
                            "type": {
                              "expression": "[string]",
                              "name": "string"
                            }
                          },
                          {
                            "alias": "path",
                            "async": false,
                            "comment": "Optional either url or domain / path are required",
                            "deprecated": false,
                            "kind": "property",
                            "langs": {},
                            "name": "path",
                            "required": false,
                            "spec": [
                              {
                                "text": "Optional either url or domain / path are required",
                                "type": "text"
                              }
                            ],
                            "type": {
                              "expression": "[string]",
                              "name": "string"
                            }
                          },
                          {
                            "alias": "expires",
                            "async": false,
                            "comment": "Optional Unix time in seconds.",
                            "deprecated": false,
                            "kind": "property",
                            "langs": {},
                            "name": "expires",
                            "required": false,
                            "spec": [
                              {
                                "text": "Optional Unix time in seconds.",
                                "type": "text"
                              }
                            ],
                            "type": {
                              "expression": "[float]",
                              "name": "float"
                            }
                          },
                          {
                            "alias": "httpOnly",
                            "async": false,
                            "comment": "Optional httpOnly flag",
                            "deprecated": false,
                            "kind": "property",
                            "langs": {},
                            "name": "httpOnly",
                            "required": false,
                            "spec": [
                              {
                                "text": "Optional httpOnly flag",
                                "type": "text"
                              }
                            ],
                            "type": {
                              "expression": "[boolean]",
                              "name": "boolean"
                            }
                          },
                          {
                            "alias": "secure",
                            "async": false,
                            "comment": "Optional secure flag",
                            "deprecated": false,
                            "kind": "property",
                            "langs": {},
                            "name": "secure",
                            "required": false,
                            "spec": [
                              {
                                "text": "Optional secure flag",
                                "type": "text"
                              }
                            ],
                            "type": {
                              "expression": "[boolean]",
                              "name": "boolean"
                            }
                          },
                          {
                            "alias": "sameSite",
                            "async": false,
                            "comment": "Optional sameSite flag",
                            "deprecated": false,
                            "kind": "property",
                            "langs": {},
                            "name": "sameSite",
                            "required": false,
                            "spec": [
                              {
                                "text": "Optional sameSite flag",
                                "type": "text"
                              }
                            ],
                            "type": {
                              "expression": "[SameSiteAttribute]<\"Strict\"|\"Lax\"|\"None\">",
                              "name": "SameSiteAttribute",
                              "union": [
                                {
                                  "name": "\"Strict\""
                                },
                                {
                                  "name": "\"Lax\""
                                },
                                {
                                  "name": "\"None\""
                                }
                              ]
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "alias": "origins",
                  "async": false,
                  "comment": "Optional localStorage to set for context",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "origins",
                  "required": false,
                  "spec": [
                    {
                      "text": "Optional localStorage to set for context",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[Array]<[Object]>",
                    "name": "Array",
                    "templates": [
                      {
                        "name": "Object",
                        "properties": [
                          {
                            "alias": "origin",
                            "async": false,
                            "comment": "",
                            "deprecated": false,
                            "kind": "property",
                            "langs": {},
                            "name": "origin",
                            "required": true,
                            "spec": [
                              {
                                "text": "",
                                "type": "text"
                              }
                            ],
                            "type": {
                              "expression": "[string]",
                              "name": "string"
                            }
                          },
                          {
                            "alias": "localStorage",
                            "async": false,
                            "comment": "",
                            "deprecated": false,
                            "kind": "property",
                            "langs": {},
                            "name": "localStorage",
                            "required": true,
                            "spec": [
                              {
                                "text": "",
                                "type": "text"
                              }
                            ],
                            "type": {
                              "expression": "[Array]<[Object]>",
                              "name": "Array",
                              "templates": [
                                {
                                  "name": "Object",
                                  "properties": [
                                    {
                                      "alias": "name",
                                      "async": false,
                                      "comment": "",
                                      "deprecated": false,
                                      "kind": "property",
                                      "langs": {},
                                      "name": "name",
                                      "required": true,
                                      "spec": [
                                        {
                                          "text": "",
                                          "type": "text"
                                        }
                                      ],
                                      "type": {
                                        "expression": "[string]",
                                        "name": "string"
                                      }
                                    },
                                    {
                                      "alias": "value",
                                      "async": false,
                                      "comment": "",
                                      "deprecated": false,
                                      "kind": "property",
                                      "langs": {},
                                      "name": "value",
                                      "required": true,
                                      "spec": [
                                        {
                                          "text": "",
                                          "type": "text"
                                        }
                                      ],
                                      "type": {
                                        "expression": "[string]",
                                        "name": "string"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "storageState",
        "async": false,
        "comment": "Populates context with given storage state. This option can be used to initialize context with logged-in information\nobtained via [`method: BrowserContext.storageState`].",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "storageState",
        "required": false,
        "spec": [
          {
            "text": "Populates context with given storage state. This option can be used to initialize context with logged-in information obtained via [`method: BrowserContext.storageState`].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "storageStatePath",
        "async": false,
        "comment": "Populates context with given storage state. This option can be used to initialize context with logged-in information\nobtained via [`method: BrowserContext.storageState`]. Path to the file with saved storage state.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "storageStatePath",
        "required": false,
        "spec": [
          {
            "text": "Populates context with given storage state. This option can be used to initialize context with logged-in information obtained via [`method: BrowserContext.storageState`]. Path to the file with saved storage state.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "timezoneId",
        "async": false,
        "comment": "Changes the timezone of the context. See\n[ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1)\nfor a list of supported timezone IDs.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timezoneId",
        "required": false,
        "spec": [
          {
            "text": "Changes the timezone of the context. See [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1) for a list of supported timezone IDs.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "userAgent",
        "async": false,
        "comment": "Specific user agent to use in this context.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "userAgent",
        "required": false,
        "spec": [
          {
            "text": "Specific user agent to use in this context.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "videoSize",
        "async": false,
        "comment": "**DEPRECATED** Use `recordVideo` instead.",
        "deprecated": true,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "videoSize",
        "required": false,
        "spec": [
          {
            "text": "**DEPRECATED** Use `recordVideo` instead.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "width",
              "async": false,
              "comment": "Video frame width.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "width",
              "required": true,
              "spec": [
                {
                  "text": "Video frame width.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[int]",
                "name": "int"
              }
            },
            {
              "alias": "height",
              "async": false,
              "comment": "Video frame height.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "height",
              "required": true,
              "spec": [
                {
                  "text": "Video frame height.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[int]",
                "name": "int"
              }
            }
          ]
        }
      },
      {
        "alias": "videosPath",
        "async": false,
        "comment": "**DEPRECATED** Use `recordVideo` instead.",
        "deprecated": true,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "videosPath",
        "required": false,
        "spec": [
          {
            "text": "**DEPRECATED** Use `recordVideo` instead.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "viewport",
        "async": false,
        "comment": "Emulates consistent viewport for each page. Defaults to an 1280x720 viewport. `null` disables the default viewport.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {
            "csharp": "viewportSize",
            "java": "viewportSize"
          },
          "only": [
            "js",
            "java"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "viewport",
        "required": false,
        "spec": [
          {
            "text": "Emulates consistent viewport for each page. Defaults to an 1280x720 viewport. `null` disables the default viewport.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[null]|[Object]",
          "name": "",
          "union": [
            {
              "name": "null"
            },
            {
              "name": "Object",
              "properties": [
                {
                  "alias": "width",
                  "async": false,
                  "comment": "page width in pixels.",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "width",
                  "required": true,
                  "spec": [
                    {
                      "text": "page width in pixels.",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[int]",
                    "name": "int"
                  }
                },
                {
                  "alias": "height",
                  "async": false,
                  "comment": "page height in pixels.",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "height",
                  "required": true,
                  "spec": [
                    {
                      "text": "page height in pixels.",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[int]",
                    "name": "int"
                  }
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "viewport",
        "async": false,
        "comment": "Sets a consistent viewport for each page. Defaults to an 1280x720 viewport. `no_viewport` disables the fixed viewport.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "viewport",
        "required": false,
        "spec": [
          {
            "text": "Sets a consistent viewport for each page. Defaults to an 1280x720 viewport. `no_viewport` disables the fixed viewport.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[null]|[Object]",
          "name": "",
          "union": [
            {
              "name": "null"
            },
            {
              "name": "Object",
              "properties": [
                {
                  "alias": "width",
                  "async": false,
                  "comment": "page width in pixels.",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "width",
                  "required": true,
                  "spec": [
                    {
                      "text": "page width in pixels.",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[int]",
                    "name": "int"
                  }
                },
                {
                  "alias": "height",
                  "async": false,
                  "comment": "page height in pixels.",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "height",
                  "required": true,
                  "spec": [
                    {
                      "text": "page height in pixels.",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[int]",
                    "name": "int"
                  }
                }
              ]
            }
          ]
        }
      }
    ]
  },
  {
    "expression": "[Page]",
    "name": "Page"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "acceptDownloads",
        "async": false,
        "comment": "Whether to automatically download all the attachments. Defaults to `false` where all the downloads are canceled.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "acceptDownloads",
        "required": false,
        "spec": [
          {
            "text": "Whether to automatically download all the attachments. Defaults to `false` where all the downloads are canceled.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "bypassCSP",
        "async": false,
        "comment": "Toggles bypassing page's Content-Security-Policy.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "bypassCSP",
        "required": false,
        "spec": [
          {
            "text": "Toggles bypassing page's Content-Security-Policy.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "colorScheme",
        "async": false,
        "comment": "Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See\n[`method: Page.emulateMedia`] for more details. Defaults to `'light'`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "colorScheme",
        "required": false,
        "spec": [
          {
            "text": "Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See [`method: Page.emulateMedia`] for more details. Defaults to `'light'`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[ColorScheme]<\"light\"|\"dark\"|\"no-preference\">",
          "name": "ColorScheme",
          "union": [
            {
              "name": "\"light\""
            },
            {
              "name": "\"dark\""
            },
            {
              "name": "\"no-preference\""
            }
          ]
        }
      },
      {
        "alias": "deviceScaleFactor",
        "async": false,
        "comment": "Specify device scale factor (can be thought of as dpr). Defaults to `1`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "deviceScaleFactor",
        "required": false,
        "spec": [
          {
            "text": "Specify device scale factor (can be thought of as dpr). Defaults to `1`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "extraHTTPHeaders",
        "async": false,
        "comment": "An object containing additional HTTP headers to be sent with every request. All header values must be strings.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "extraHTTPHeaders",
        "required": false,
        "spec": [
          {
            "text": "An object containing additional HTTP headers to be sent with every request. All header values must be strings.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]<[string], [string]>",
          "name": "Object",
          "templates": [
            {
              "name": "string"
            },
            {
              "name": "string"
            }
          ]
        }
      },
      {
        "alias": "geolocation",
        "async": false,
        "comment": "",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "geolocation",
        "required": false,
        "spec": [],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "latitude",
              "async": false,
              "comment": "Latitude between -90 and 90.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "latitude",
              "required": true,
              "spec": [
                {
                  "text": "Latitude between -90 and 90.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            },
            {
              "alias": "longitude",
              "async": false,
              "comment": "Longitude between -180 and 180.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "longitude",
              "required": true,
              "spec": [
                {
                  "text": "Longitude between -180 and 180.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            },
            {
              "alias": "accuracy",
              "async": false,
              "comment": "Non-negative accuracy value. Defaults to `0`.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "accuracy",
              "required": false,
              "spec": [
                {
                  "text": "Non-negative accuracy value. Defaults to `0`.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            }
          ]
        }
      },
      {
        "alias": "hasTouch",
        "async": false,
        "comment": "Specifies if viewport supports touch events. Defaults to false.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "hasTouch",
        "required": false,
        "spec": [
          {
            "text": "Specifies if viewport supports touch events. Defaults to false.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "httpCredentials",
        "async": false,
        "comment": "Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication).",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "httpCredentials",
        "required": false,
        "spec": [
          {
            "text": "Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication).",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "username",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "username",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            },
            {
              "alias": "password",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "password",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            }
          ]
        }
      },
      {
        "alias": "ignoreHTTPSErrors",
        "async": false,
        "comment": "Whether to ignore HTTPS errors during navigation. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "ignoreHTTPSErrors",
        "required": false,
        "spec": [
          {
            "text": "Whether to ignore HTTPS errors during navigation. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "isMobile",
        "async": false,
        "comment": "Whether the `meta viewport` tag is taken into account and touch events are enabled. Defaults to `false`. Not supported\nin Firefox.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "isMobile",
        "required": false,
        "spec": [
          {
            "text": "Whether the `meta viewport` tag is taken into account and touch events are enabled. Defaults to `false`. Not supported in Firefox.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "javaScriptEnabled",
        "async": false,
        "comment": "Whether or not to enable JavaScript in the context. Defaults to `true`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "javaScriptEnabled",
        "required": false,
        "spec": [
          {
            "text": "Whether or not to enable JavaScript in the context. Defaults to `true`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "locale",
        "async": false,
        "comment": "Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language`\nrequest header value as well as number and date formatting rules.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "locale",
        "required": false,
        "spec": [
          {
            "text": "Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "logger",
        "async": false,
        "comment": "Logger sink for Playwright logging.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "logger",
        "required": false,
        "spec": [
          {
            "text": "Logger sink for Playwright logging.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Logger]",
          "name": "Logger"
        }
      },
      {
        "alias": "noViewport",
        "async": false,
        "comment": "Does not enforce fixed viewport, allows resizing window in the headed mode.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "noViewport",
        "required": false,
        "spec": [
          {
            "text": "Does not enforce fixed viewport, allows resizing window in the headed mode.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "offline",
        "async": false,
        "comment": "Whether to emulate network being offline. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "offline",
        "required": false,
        "spec": [
          {
            "text": "Whether to emulate network being offline. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "permissions",
        "async": false,
        "comment": "A list of permissions to grant to all pages in this context. See [`method: BrowserContext.grantPermissions`] for more\ndetails.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "permissions",
        "required": false,
        "spec": [
          {
            "text": "A list of permissions to grant to all pages in this context. See [`method: BrowserContext.grantPermissions`] for more details.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[string]>",
          "name": "Array",
          "templates": [
            {
              "name": "string"
            }
          ]
        }
      },
      {
        "alias": "proxy",
        "async": false,
        "comment": "Network proxy settings to use with this context. Note that browser needs to be launched with the global proxy for this\noption to work. If all contexts override the proxy, global proxy will be never used and can be any string, for example\n`launch({ proxy: { server: 'per-context' } })`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "proxy",
        "required": false,
        "spec": [
          {
            "text": "Network proxy settings to use with this context. Note that browser needs to be launched with the global proxy for this option to work. If all contexts override the proxy, global proxy will be never used and can be any string, for example `launch({ proxy: { server: 'per-context' } })`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "server",
              "async": false,
              "comment": "Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or\n`socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "server",
              "required": true,
              "spec": [
                {
                  "text": "Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            },
            {
              "alias": "bypass",
              "async": false,
              "comment": "Optional coma-separated domains to bypass proxy, for example `\".com, chromium.org, .domain.com\"`.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "bypass",
              "required": false,
              "spec": [
                {
                  "text": "Optional coma-separated domains to bypass proxy, for example `\".com, chromium.org, .domain.com\"`.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            },
            {
              "alias": "username",
              "async": false,
              "comment": "Optional username to use if HTTP proxy requires authentication.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "username",
              "required": false,
              "spec": [
                {
                  "text": "Optional username to use if HTTP proxy requires authentication.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            },
            {
              "alias": "password",
              "async": false,
              "comment": "Optional password to use if HTTP proxy requires authentication.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "password",
              "required": false,
              "spec": [
                {
                  "text": "Optional password to use if HTTP proxy requires authentication.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            }
          ]
        }
      },
      {
        "alias": "recordHar",
        "async": false,
        "comment": "Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file. If not\nspecified, the HAR is not recorded. Make sure to await [`method: BrowserContext.close`] for the HAR to be saved.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "recordHar",
        "required": false,
        "spec": [
          {
            "text": "Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file. If not specified, the HAR is not recorded. Make sure to await [`method: BrowserContext.close`] for the HAR to be saved.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "omitContent",
              "async": false,
              "comment": "Optional setting to control whether to omit request content from the HAR. Defaults to `false`.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "omitContent",
              "required": false,
              "spec": [
                {
                  "text": "Optional setting to control whether to omit request content from the HAR. Defaults to `false`.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[boolean]",
                "name": "boolean"
              }
            },
            {
              "alias": "path",
              "async": false,
              "comment": "Path on the filesystem to write the HAR file to.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "path",
              "required": true,
              "spec": [
                {
                  "text": "Path on the filesystem to write the HAR file to.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[path]",
                "name": "path"
              }
            }
          ]
        }
      },
      {
        "alias": "recordHarOmitContent",
        "async": false,
        "comment": "Optional setting to control whether to omit request content from the HAR. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {
            "python": "record_har_omit_content"
          },
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "recordHarOmitContent",
        "required": false,
        "spec": [
          {
            "text": "Optional setting to control whether to omit request content from the HAR. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "recordHarPath",
        "async": false,
        "comment": "Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into the specified HAR file on the\nfilesystem. If not specified, the HAR is not recorded. Make sure to call [`method: BrowserContext.close`] for the HAR to\nbe saved.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {
            "python": "record_har_path"
          },
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "recordHarPath",
        "required": false,
        "spec": [
          {
            "text": "Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into the specified HAR file on the filesystem. If not specified, the HAR is not recorded. Make sure to call [`method: BrowserContext.close`] for the HAR to be saved.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "recordVideo",
        "async": false,
        "comment": "Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded. Make\nsure to await [`method: BrowserContext.close`] for videos to be saved.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "recordVideo",
        "required": false,
        "spec": [
          {
            "text": "Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded. Make sure to await [`method: BrowserContext.close`] for videos to be saved.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "dir",
              "async": false,
              "comment": "Path to the directory to put videos into.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "dir",
              "required": true,
              "spec": [
                {
                  "text": "Path to the directory to put videos into.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[path]",
                "name": "path"
              }
            },
            {
              "alias": "size",
              "async": false,
              "comment": "Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit\ninto 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page\nwill be scaled down if necessary to fit the specified size.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "size",
              "required": false,
              "spec": [
                {
                  "text": "Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[Object]",
                "name": "Object",
                "properties": [
                  {
                    "alias": "width",
                    "async": false,
                    "comment": "Video frame width.",
                    "deprecated": false,
                    "kind": "property",
                    "langs": {},
                    "name": "width",
                    "required": true,
                    "spec": [
                      {
                        "text": "Video frame width.",
                        "type": "text"
                      }
                    ],
                    "type": {
                      "expression": "[int]",
                      "name": "int"
                    }
                  },
                  {
                    "alias": "height",
                    "async": false,
                    "comment": "Video frame height.",
                    "deprecated": false,
                    "kind": "property",
                    "langs": {},
                    "name": "height",
                    "required": true,
                    "spec": [
                      {
                        "text": "Video frame height.",
                        "type": "text"
                      }
                    ],
                    "type": {
                      "expression": "[int]",
                      "name": "int"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      {
        "alias": "recordVideoDir",
        "async": false,
        "comment": "Enables video recording for all pages into the specified directory. If not specified videos are not recorded. Make sure\nto call [`method: BrowserContext.close`] for videos to be saved.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {
            "python": "record_video_dir"
          },
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "recordVideoDir",
        "required": false,
        "spec": [
          {
            "text": "Enables video recording for all pages into the specified directory. If not specified videos are not recorded. Make sure to call [`method: BrowserContext.close`] for videos to be saved.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "recordVideoSize",
        "async": false,
        "comment": "Dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into\n800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will\nbe scaled down if necessary to fit the specified size.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {
            "python": "record_video_size"
          },
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "recordVideoSize",
        "required": false,
        "spec": [
          {
            "text": "Dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "width",
              "async": false,
              "comment": "Video frame width.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "width",
              "required": true,
              "spec": [
                {
                  "text": "Video frame width.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[int]",
                "name": "int"
              }
            },
            {
              "alias": "height",
              "async": false,
              "comment": "Video frame height.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "height",
              "required": true,
              "spec": [
                {
                  "text": "Video frame height.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[int]",
                "name": "int"
              }
            }
          ]
        }
      },
      {
        "alias": "screen",
        "async": false,
        "comment": "Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the `viewport`\nis set.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {
            "csharp": "screenSize",
            "java": "screenSize"
          },
          "overrides": {},
          "types": {}
        },
        "name": "screen",
        "required": false,
        "spec": [
          {
            "text": "Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the `viewport` is set.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "width",
              "async": false,
              "comment": "page width in pixels.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "width",
              "required": true,
              "spec": [
                {
                  "text": "page width in pixels.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[int]",
                "name": "int"
              }
            },
            {
              "alias": "height",
              "async": false,
              "comment": "page height in pixels.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "height",
              "required": true,
              "spec": [
                {
                  "text": "page height in pixels.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[int]",
                "name": "int"
              }
            }
          ]
        }
      },
      {
        "alias": "storageState",
        "async": false,
        "comment": "Populates context with given storage state. This option can be used to initialize context with logged-in information\nobtained via [`method: BrowserContext.storageState`]. Either a path to the file with saved storage, or an object with\nthe following fields:",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "storageState",
        "required": false,
        "spec": [
          {
            "text": "Populates context with given storage state. This option can be used to initialize context with logged-in information obtained via [`method: BrowserContext.storageState`]. Either a path to the file with saved storage, or an object with the following fields:",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]|[Object]",
          "name": "",
          "union": [
            {
              "name": "path"
            },
            {
              "name": "Object",
              "properties": [
                {
                  "alias": "cookies",
                  "async": false,
                  "comment": "Optional cookies to set for context",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "cookies",
                  "required": false,
                  "spec": [
                    {
                      "text": "Optional cookies to set for context",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[Array]<[Object]>",
                    "name": "Array",
                    "templates": [
                      {
                        "name": "Object",
                        "properties": [
                          {
                            "alias": "name",
                            "async": false,
                            "comment": "",
                            "deprecated": false,
                            "kind": "property",
                            "langs": {},
                            "name": "name",
                            "required": true,
                            "spec": [
                              {
                                "text": "",
                                "type": "text"
                              }
                            ],
                            "type": {
                              "expression": "[string]",
                              "name": "string"
                            }
                          },
                          {
                            "alias": "value",
                            "async": false,
                            "comment": "",
                            "deprecated": false,
                            "kind": "property",
                            "langs": {},
                            "name": "value",
                            "required": true,
                            "spec": [
                              {
                                "text": "",
                                "type": "text"
                              }
                            ],
                            "type": {
                              "expression": "[string]",
                              "name": "string"
                            }
                          },
                          {
                            "alias": "url",
                            "async": false,
                            "comment": "Optional either url or domain / path are required",
                            "deprecated": false,
                            "kind": "property",
                            "langs": {},
                            "name": "url",
                            "required": false,
                            "spec": [
                              {
                                "text": "Optional either url or domain / path are required",
                                "type": "text"
                              }
                            ],
                            "type": {
                              "expression": "[string]",
                              "name": "string"
                            }
                          },
                          {
                            "alias": "domain",
                            "async": false,
                            "comment": "Optional either url or domain / path are required",
                            "deprecated": false,
                            "kind": "property",
                            "langs": {},
                            "name": "domain",
                            "required": false,
                            "spec": [
                              {
                                "text": "Optional either url or domain / path are required",
                                "type": "text"
                              }
                            ],
                            "type": {
                              "expression": "[string]",
                              "name": "string"
                            }
                          },
                          {
                            "alias": "path",
                            "async": false,
                            "comment": "Optional either url or domain / path are required",
                            "deprecated": false,
                            "kind": "property",
                            "langs": {},
                            "name": "path",
                            "required": false,
                            "spec": [
                              {
                                "text": "Optional either url or domain / path are required",
                                "type": "text"
                              }
                            ],
                            "type": {
                              "expression": "[string]",
                              "name": "string"
                            }
                          },
                          {
                            "alias": "expires",
                            "async": false,
                            "comment": "Optional Unix time in seconds.",
                            "deprecated": false,
                            "kind": "property",
                            "langs": {},
                            "name": "expires",
                            "required": false,
                            "spec": [
                              {
                                "text": "Optional Unix time in seconds.",
                                "type": "text"
                              }
                            ],
                            "type": {
                              "expression": "[float]",
                              "name": "float"
                            }
                          },
                          {
                            "alias": "httpOnly",
                            "async": false,
                            "comment": "Optional httpOnly flag",
                            "deprecated": false,
                            "kind": "property",
                            "langs": {},
                            "name": "httpOnly",
                            "required": false,
                            "spec": [
                              {
                                "text": "Optional httpOnly flag",
                                "type": "text"
                              }
                            ],
                            "type": {
                              "expression": "[boolean]",
                              "name": "boolean"
                            }
                          },
                          {
                            "alias": "secure",
                            "async": false,
                            "comment": "Optional secure flag",
                            "deprecated": false,
                            "kind": "property",
                            "langs": {},
                            "name": "secure",
                            "required": false,
                            "spec": [
                              {
                                "text": "Optional secure flag",
                                "type": "text"
                              }
                            ],
                            "type": {
                              "expression": "[boolean]",
                              "name": "boolean"
                            }
                          },
                          {
                            "alias": "sameSite",
                            "async": false,
                            "comment": "Optional sameSite flag",
                            "deprecated": false,
                            "kind": "property",
                            "langs": {},
                            "name": "sameSite",
                            "required": false,
                            "spec": [
                              {
                                "text": "Optional sameSite flag",
                                "type": "text"
                              }
                            ],
                            "type": {
                              "expression": "[SameSiteAttribute]<\"Strict\"|\"Lax\"|\"None\">",
                              "name": "SameSiteAttribute",
                              "union": [
                                {
                                  "name": "\"Strict\""
                                },
                                {
                                  "name": "\"Lax\""
                                },
                                {
                                  "name": "\"None\""
                                }
                              ]
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "alias": "origins",
                  "async": false,
                  "comment": "Optional localStorage to set for context",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "origins",
                  "required": false,
                  "spec": [
                    {
                      "text": "Optional localStorage to set for context",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[Array]<[Object]>",
                    "name": "Array",
                    "templates": [
                      {
                        "name": "Object",
                        "properties": [
                          {
                            "alias": "origin",
                            "async": false,
                            "comment": "",
                            "deprecated": false,
                            "kind": "property",
                            "langs": {},
                            "name": "origin",
                            "required": true,
                            "spec": [
                              {
                                "text": "",
                                "type": "text"
                              }
                            ],
                            "type": {
                              "expression": "[string]",
                              "name": "string"
                            }
                          },
                          {
                            "alias": "localStorage",
                            "async": false,
                            "comment": "",
                            "deprecated": false,
                            "kind": "property",
                            "langs": {},
                            "name": "localStorage",
                            "required": true,
                            "spec": [
                              {
                                "text": "",
                                "type": "text"
                              }
                            ],
                            "type": {
                              "expression": "[Array]<[Object]>",
                              "name": "Array",
                              "templates": [
                                {
                                  "name": "Object",
                                  "properties": [
                                    {
                                      "alias": "name",
                                      "async": false,
                                      "comment": "",
                                      "deprecated": false,
                                      "kind": "property",
                                      "langs": {},
                                      "name": "name",
                                      "required": true,
                                      "spec": [
                                        {
                                          "text": "",
                                          "type": "text"
                                        }
                                      ],
                                      "type": {
                                        "expression": "[string]",
                                        "name": "string"
                                      }
                                    },
                                    {
                                      "alias": "value",
                                      "async": false,
                                      "comment": "",
                                      "deprecated": false,
                                      "kind": "property",
                                      "langs": {},
                                      "name": "value",
                                      "required": true,
                                      "spec": [
                                        {
                                          "text": "",
                                          "type": "text"
                                        }
                                      ],
                                      "type": {
                                        "expression": "[string]",
                                        "name": "string"
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "storageState",
        "async": false,
        "comment": "Populates context with given storage state. This option can be used to initialize context with logged-in information\nobtained via [`method: BrowserContext.storageState`].",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "storageState",
        "required": false,
        "spec": [
          {
            "text": "Populates context with given storage state. This option can be used to initialize context with logged-in information obtained via [`method: BrowserContext.storageState`].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "storageStatePath",
        "async": false,
        "comment": "Populates context with given storage state. This option can be used to initialize context with logged-in information\nobtained via [`method: BrowserContext.storageState`]. Path to the file with saved storage state.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "storageStatePath",
        "required": false,
        "spec": [
          {
            "text": "Populates context with given storage state. This option can be used to initialize context with logged-in information obtained via [`method: BrowserContext.storageState`]. Path to the file with saved storage state.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "timezoneId",
        "async": false,
        "comment": "Changes the timezone of the context. See\n[ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1)\nfor a list of supported timezone IDs.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timezoneId",
        "required": false,
        "spec": [
          {
            "text": "Changes the timezone of the context. See [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1) for a list of supported timezone IDs.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "userAgent",
        "async": false,
        "comment": "Specific user agent to use in this context.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "userAgent",
        "required": false,
        "spec": [
          {
            "text": "Specific user agent to use in this context.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "videoSize",
        "async": false,
        "comment": "**DEPRECATED** Use `recordVideo` instead.",
        "deprecated": true,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "videoSize",
        "required": false,
        "spec": [
          {
            "text": "**DEPRECATED** Use `recordVideo` instead.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "width",
              "async": false,
              "comment": "Video frame width.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "width",
              "required": true,
              "spec": [
                {
                  "text": "Video frame width.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[int]",
                "name": "int"
              }
            },
            {
              "alias": "height",
              "async": false,
              "comment": "Video frame height.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "height",
              "required": true,
              "spec": [
                {
                  "text": "Video frame height.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[int]",
                "name": "int"
              }
            }
          ]
        }
      },
      {
        "alias": "videosPath",
        "async": false,
        "comment": "**DEPRECATED** Use `recordVideo` instead.",
        "deprecated": true,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "videosPath",
        "required": false,
        "spec": [
          {
            "text": "**DEPRECATED** Use `recordVideo` instead.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "viewport",
        "async": false,
        "comment": "Emulates consistent viewport for each page. Defaults to an 1280x720 viewport. `null` disables the default viewport.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {
            "csharp": "viewportSize",
            "java": "viewportSize"
          },
          "only": [
            "js",
            "java"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "viewport",
        "required": false,
        "spec": [
          {
            "text": "Emulates consistent viewport for each page. Defaults to an 1280x720 viewport. `null` disables the default viewport.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[null]|[Object]",
          "name": "",
          "union": [
            {
              "name": "null"
            },
            {
              "name": "Object",
              "properties": [
                {
                  "alias": "width",
                  "async": false,
                  "comment": "page width in pixels.",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "width",
                  "required": true,
                  "spec": [
                    {
                      "text": "page width in pixels.",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[int]",
                    "name": "int"
                  }
                },
                {
                  "alias": "height",
                  "async": false,
                  "comment": "page height in pixels.",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "height",
                  "required": true,
                  "spec": [
                    {
                      "text": "page height in pixels.",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[int]",
                    "name": "int"
                  }
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "viewport",
        "async": false,
        "comment": "Sets a consistent viewport for each page. Defaults to an 1280x720 viewport. `no_viewport` disables the fixed viewport.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "viewport",
        "required": false,
        "spec": [
          {
            "text": "Sets a consistent viewport for each page. Defaults to an 1280x720 viewport. `no_viewport` disables the fixed viewport.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[null]|[Object]",
          "name": "",
          "union": [
            {
              "name": "null"
            },
            {
              "name": "Object",
              "properties": [
                {
                  "alias": "width",
                  "async": false,
                  "comment": "page width in pixels.",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "width",
                  "required": true,
                  "spec": [
                    {
                      "text": "page width in pixels.",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[int]",
                    "name": "int"
                  }
                },
                {
                  "alias": "height",
                  "async": false,
                  "comment": "page height in pixels.",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "height",
                  "required": true,
                  "spec": [
                    {
                      "text": "page height in pixels.",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[int]",
                    "name": "int"
                  }
                }
              ]
            }
          ]
        }
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[BrowserContext]",
    "name": "BrowserContext"
  },
  {
    "expression": "[Page]",
    "name": "Page"
  },
  {
    "name": "void"
  },
  {
    "expression": "[Array]<[Object]>",
    "name": "Array",
    "templates": [
      {
        "name": "Object",
        "properties": [
          {
            "alias": "name",
            "async": false,
            "comment": "",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "name",
            "required": true,
            "spec": [
              {
                "text": "",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "value",
            "async": false,
            "comment": "",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "value",
            "required": true,
            "spec": [
              {
                "text": "",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "url",
            "async": false,
            "comment": "either url or domain / path are required. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "url",
            "required": false,
            "spec": [
              {
                "text": "either url or domain / path are required. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "domain",
            "async": false,
            "comment": "either url or domain / path are required Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "domain",
            "required": false,
            "spec": [
              {
                "text": "either url or domain / path are required Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "path",
            "async": false,
            "comment": "either url or domain / path are required Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "path",
            "required": false,
            "spec": [
              {
                "text": "either url or domain / path are required Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "expires",
            "async": false,
            "comment": "Unix time in seconds. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "expires",
            "required": false,
            "spec": [
              {
                "text": "Unix time in seconds. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[float]",
              "name": "float"
            }
          },
          {
            "alias": "httpOnly",
            "async": false,
            "comment": "Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "httpOnly",
            "required": false,
            "spec": [
              {
                "text": "Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[boolean]",
              "name": "boolean"
            }
          },
          {
            "alias": "secure",
            "async": false,
            "comment": "Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "secure",
            "required": false,
            "spec": [
              {
                "text": "Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[boolean]",
              "name": "boolean"
            }
          },
          {
            "alias": "sameSite",
            "async": false,
            "comment": "Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "sameSite",
            "required": false,
            "spec": [
              {
                "text": "Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[SameSiteAttribute]<\"Strict\"|\"Lax\"|\"None\">",
              "name": "SameSiteAttribute",
              "union": [
                {
                  "name": "\"Strict\""
                },
                {
                  "name": "\"Lax\""
                },
                {
                  "name": "\"None\""
                }
              ]
            }
          }
        ]
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[function]|[string]|[Object]",
    "name": "",
    "union": [
      {
        "name": "function"
      },
      {
        "name": "string"
      },
      {
        "name": "Object",
        "properties": [
          {
            "alias": "path",
            "async": false,
            "comment": "Path to the JavaScript file. If `path` is a relative path, then it is resolved relative to the current working\ndirectory. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "path",
            "required": false,
            "spec": [
              {
                "text": "Path to the JavaScript file. If `path` is a relative path, then it is resolved relative to the current working directory. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[path]",
              "name": "path"
            }
          },
          {
            "alias": "content",
            "async": false,
            "comment": "Raw script content. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "content",
            "required": false,
            "spec": [
              {
                "text": "Raw script content. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          }
        ]
      }
    ]
  },
  {
    "expression": "[string]|[path]",
    "name": "",
    "union": [
      {
        "name": "string"
      },
      {
        "name": "path"
      }
    ]
  },
  {
    "expression": "[Serializable]",
    "name": "Serializable"
  },
  {
    "expression": "[path]",
    "name": "path"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[null]|[Browser]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Browser"
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "name": "void"
  },
  {
    "name": "void"
  },
  {
    "expression": "[Array]<[Object]>",
    "name": "Array",
    "templates": [
      {
        "name": "Object",
        "properties": [
          {
            "alias": "name",
            "async": false,
            "comment": "",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "name",
            "required": true,
            "spec": [
              {
                "text": "",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "value",
            "async": false,
            "comment": "",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "value",
            "required": true,
            "spec": [
              {
                "text": "",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "domain",
            "async": false,
            "comment": "",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "domain",
            "required": true,
            "spec": [
              {
                "text": "",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "path",
            "async": false,
            "comment": "",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "path",
            "required": true,
            "spec": [
              {
                "text": "",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "expires",
            "async": false,
            "comment": "Unix time in seconds.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "expires",
            "required": true,
            "spec": [
              {
                "text": "Unix time in seconds.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[float]",
              "name": "float"
            }
          },
          {
            "alias": "httpOnly",
            "async": false,
            "comment": "",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "httpOnly",
            "required": true,
            "spec": [
              {
                "text": "",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[boolean]",
              "name": "boolean"
            }
          },
          {
            "alias": "secure",
            "async": false,
            "comment": "",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "secure",
            "required": true,
            "spec": [
              {
                "text": "",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[boolean]",
              "name": "boolean"
            }
          },
          {
            "alias": "sameSite",
            "async": false,
            "comment": "",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "sameSite",
            "required": true,
            "spec": [
              {
                "text": "",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[SameSiteAttribute]<\"Strict\"|\"Lax\"|\"None\">",
              "name": "SameSiteAttribute",
              "union": [
                {
                  "name": "\"Strict\""
                },
                {
                  "name": "\"Lax\""
                },
                {
                  "name": "\"None\""
                }
              ]
            }
          }
        ]
      }
    ]
  },
  {
    "expression": "[string]|[Array]<[string]>",
    "name": "",
    "union": [
      {
        "name": "string"
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "string"
          }
        ]
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[function]",
    "name": "function"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "handle",
        "async": false,
        "comment": "Whether to pass the argument as a handle, instead of passing by value. When passing a handle, only one argument is\nsupported. When passing by value, multiple arguments are supported.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "handle",
        "required": false,
        "spec": [
          {
            "text": "Whether to pass the argument as a handle, instead of passing by value. When passing a handle, only one argument is supported. When passing by value, multiple arguments are supported.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[function]",
    "name": "function"
  },
  {
    "name": "void"
  },
  {
    "expression": "[Array]<[string]>",
    "name": "Array",
    "templates": [
      {
        "name": "string"
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "origin",
        "async": false,
        "comment": "The [origin] to grant permissions to, e.g. \"https://example.com\".",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "origin",
        "required": false,
        "spec": [
          {
            "text": "The [origin] to grant permissions to, e.g. \"https://example.com\".",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      }
    ]
  },
  {
    "expression": "[Page]",
    "name": "Page"
  },
  {
    "expression": "[Array]<[Page]>",
    "name": "Array",
    "templates": [
      {
        "name": "Page"
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]|[RegExp]|[function]([URL]):[boolean]",
    "name": "",
    "union": [
      {
        "name": "string"
      },
      {
        "name": "RegExp"
      },
      {
        "args": [
          {
            "name": "URL"
          }
        ],
        "name": "function",
        "returnType": {
          "name": "boolean"
        }
      }
    ]
  },
  {
    "args": [
      {
        "name": "Route"
      },
      {
        "name": "Request"
      }
    ],
    "expression": "[function]([Route], [Request])",
    "name": "function",
    "returnType": null
  },
  {
    "args": [
      {
        "name": "Route"
      }
    ],
    "expression": "[function]([Route])",
    "name": "function",
    "returnType": null
  },
  {
    "name": "void"
  },
  {
    "expression": "[float]",
    "name": "float"
  },
  {
    "name": "void"
  },
  {
    "expression": "[float]",
    "name": "float"
  },
  {
    "name": "void"
  },
  {
    "expression": "[Object]<[string], [string]>",
    "name": "Object",
    "templates": [
      {
        "name": "string"
      },
      {
        "name": "string"
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[null]|[Object]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Object",
        "properties": [
          {
            "alias": "latitude",
            "async": false,
            "comment": "Latitude between -90 and 90.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "latitude",
            "required": true,
            "spec": [
              {
                "text": "Latitude between -90 and 90.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[float]",
              "name": "float"
            }
          },
          {
            "alias": "longitude",
            "async": false,
            "comment": "Longitude between -180 and 180.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "longitude",
            "required": true,
            "spec": [
              {
                "text": "Longitude between -180 and 180.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[float]",
              "name": "float"
            }
          },
          {
            "alias": "accuracy",
            "async": false,
            "comment": "Non-negative accuracy value. Defaults to `0`.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "accuracy",
            "required": false,
            "spec": [
              {
                "text": "Non-negative accuracy value. Defaults to `0`.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[float]",
              "name": "float"
            }
          }
        ]
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[null]|[Object]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Object",
        "properties": [
          {
            "alias": "username",
            "async": false,
            "comment": "",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "username",
            "required": true,
            "spec": [
              {
                "text": "",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "password",
            "async": false,
            "comment": "",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "password",
            "required": true,
            "spec": [
              {
                "text": "",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          }
        ]
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[Object]",
    "name": "Object",
    "properties": [
      {
        "alias": "cookies",
        "async": false,
        "comment": "",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "cookies",
        "required": true,
        "spec": [
          {
            "text": "",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[Object]>",
          "name": "Array",
          "templates": [
            {
              "name": "Object",
              "properties": [
                {
                  "alias": "name",
                  "async": false,
                  "comment": "",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "name",
                  "required": true,
                  "spec": [
                    {
                      "text": "",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[string]",
                    "name": "string"
                  }
                },
                {
                  "alias": "value",
                  "async": false,
                  "comment": "",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "value",
                  "required": true,
                  "spec": [
                    {
                      "text": "",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[string]",
                    "name": "string"
                  }
                },
                {
                  "alias": "domain",
                  "async": false,
                  "comment": "",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "domain",
                  "required": true,
                  "spec": [
                    {
                      "text": "",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[string]",
                    "name": "string"
                  }
                },
                {
                  "alias": "path",
                  "async": false,
                  "comment": "",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "path",
                  "required": true,
                  "spec": [
                    {
                      "text": "",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[string]",
                    "name": "string"
                  }
                },
                {
                  "alias": "expires",
                  "async": false,
                  "comment": "Unix time in seconds.",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "expires",
                  "required": true,
                  "spec": [
                    {
                      "text": "Unix time in seconds.",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[float]",
                    "name": "float"
                  }
                },
                {
                  "alias": "httpOnly",
                  "async": false,
                  "comment": "",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "httpOnly",
                  "required": true,
                  "spec": [
                    {
                      "text": "",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[boolean]",
                    "name": "boolean"
                  }
                },
                {
                  "alias": "secure",
                  "async": false,
                  "comment": "",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "secure",
                  "required": true,
                  "spec": [
                    {
                      "text": "",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[boolean]",
                    "name": "boolean"
                  }
                },
                {
                  "alias": "sameSite",
                  "async": false,
                  "comment": "",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "sameSite",
                  "required": true,
                  "spec": [
                    {
                      "text": "",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[SameSiteAttribute]<\"Strict\"|\"Lax\"|\"None\">",
                    "name": "SameSiteAttribute",
                    "union": [
                      {
                        "name": "\"Strict\""
                      },
                      {
                        "name": "\"Lax\""
                      },
                      {
                        "name": "\"None\""
                      }
                    ]
                  }
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "origins",
        "async": false,
        "comment": "",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "origins",
        "required": true,
        "spec": [
          {
            "text": "",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[Object]>",
          "name": "Array",
          "templates": [
            {
              "name": "Object",
              "properties": [
                {
                  "alias": "origin",
                  "async": false,
                  "comment": "",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "origin",
                  "required": true,
                  "spec": [
                    {
                      "text": "",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[string]",
                    "name": "string"
                  }
                },
                {
                  "alias": "localStorage",
                  "async": false,
                  "comment": "",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "localStorage",
                  "required": true,
                  "spec": [
                    {
                      "text": "",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[Array]<[Object]>",
                    "name": "Array",
                    "templates": [
                      {
                        "name": "Object",
                        "properties": [
                          {
                            "alias": "name",
                            "async": false,
                            "comment": "",
                            "deprecated": false,
                            "kind": "property",
                            "langs": {},
                            "name": "name",
                            "required": true,
                            "spec": [
                              {
                                "text": "",
                                "type": "text"
                              }
                            ],
                            "type": {
                              "expression": "[string]",
                              "name": "string"
                            }
                          },
                          {
                            "alias": "value",
                            "async": false,
                            "comment": "",
                            "deprecated": false,
                            "kind": "property",
                            "langs": {},
                            "name": "value",
                            "required": true,
                            "spec": [
                              {
                                "text": "",
                                "type": "text"
                              }
                            ],
                            "type": {
                              "expression": "[string]",
                              "name": "string"
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          ]
        }
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "path",
        "async": false,
        "comment": "The file path to save the storage state to. If `path` is a relative path, then it is resolved relative to current\nworking directory. If no path is provided, storage state is still returned, but won't be saved to the disk.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "path",
        "required": false,
        "spec": [
          {
            "text": "The file path to save the storage state to. If `path` is a relative path, then it is resolved relative to current working directory. If no path is provided, storage state is still returned, but won't be saved to the disk.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]|[RegExp]|[function]([URL]):[boolean]",
    "name": "",
    "union": [
      {
        "name": "string"
      },
      {
        "name": "RegExp"
      },
      {
        "args": [
          {
            "name": "URL"
          }
        ],
        "name": "function",
        "returnType": {
          "name": "boolean"
        }
      }
    ]
  },
  {
    "args": [
      {
        "name": "Route"
      },
      {
        "name": "Request"
      }
    ],
    "expression": "[function]([Route], [Request])",
    "name": "function",
    "returnType": null
  },
  {
    "args": [
      {
        "name": "Route"
      }
    ],
    "expression": "[function]([Route])",
    "name": "function",
    "returnType": null
  },
  {
    "expression": "[any]",
    "name": "any"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[function]|[Object]",
    "name": "",
    "union": [
      {
        "name": "function"
      },
      {
        "name": "Object",
        "properties": [
          {
            "alias": "predicate",
            "async": false,
            "comment": "receives the event data and resolves to truthy value when the waiting should resolve.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "predicate",
            "required": true,
            "spec": [
              {
                "text": "receives the event data and resolves to truthy value when the waiting should resolve.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[function]",
              "name": "function"
            }
          },
          {
            "alias": "timeout",
            "async": false,
            "comment": "maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\nvalue can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "timeout",
            "required": false,
            "spec": [
              {
                "text": "maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[float]",
              "name": "float"
            }
          }
        ]
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "predicate",
        "async": false,
        "comment": "Receives the event data and resolves to truthy value when the waiting should resolve.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "predicate",
        "required": false,
        "spec": [
          {
            "text": "Receives the event data and resolves to truthy value when the waiting should resolve.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[function]",
          "name": "function"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\nvalue can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Page]",
    "name": "Page"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "predicate",
        "async": false,
        "comment": "Receives the `Page` object and resolves to truthy value when the waiting should resolve.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "predicate",
        "required": false,
        "spec": [
          {
            "text": "Receives the `Page` object and resolves to truthy value when the waiting should resolve.",
            "type": "text"
          }
        ],
        "type": {
          "args": [
            {
              "name": "Page"
            }
          ],
          "expression": "[function]([Page]):[boolean]",
          "name": "function",
          "returnType": {
            "name": "boolean"
          }
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\nvalue can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Runnable]",
    "name": "Runnable"
  },
  {
    "expression": "[Any]",
    "name": "Any"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "predicate",
        "async": false,
        "comment": "Receives the event data and resolves to truthy value when the waiting should resolve.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "predicate",
        "required": false,
        "spec": [
          {
            "text": "Receives the event data and resolves to truthy value when the waiting should resolve.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[function]",
          "name": "function"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\nvalue can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "name": "void"
  },
  {
    "name": "void"
  },
  {
    "expression": "[ChildProcess]",
    "name": "ChildProcess"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[Browser]",
    "name": "Browser"
  },
  {
    "expression": "[Object]",
    "name": "Object",
    "properties": [
      {
        "alias": "wsEndpoint",
        "async": false,
        "comment": "A browser websocket endpoint to connect to.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "wsEndpoint",
        "required": true,
        "spec": [
          {
            "text": "A browser websocket endpoint to connect to.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "slowMo",
        "async": false,
        "comment": "Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on.\nDefaults to 0.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "slowMo",
        "required": false,
        "spec": [
          {
            "text": "Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on. Defaults to 0.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "logger",
        "async": false,
        "comment": "Logger sink for Playwright logging. Optional.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "logger",
        "required": false,
        "spec": [
          {
            "text": "Logger sink for Playwright logging. Optional.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Logger]",
          "name": "Logger"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds to wait for the connection to be established. Defaults to `30000` (30 seconds). Pass `0` to\ndisable timeout.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds to wait for the connection to be established. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "slowMo",
        "async": false,
        "comment": "Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on.\nDefaults to 0.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "java"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "slowMo",
        "required": false,
        "spec": [
          {
            "text": "Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on. Defaults to 0.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds to wait for the connection to be established. Defaults to `30000` (30 seconds). Pass `0` to\ndisable timeout.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "java"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds to wait for the connection to be established. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Browser]",
    "name": "Browser"
  },
  {
    "expression": "[Object]",
    "name": "Object",
    "properties": [
      {
        "alias": "wsEndpoint",
        "async": false,
        "comment": "A CDP websocket endpoint to connect to.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "wsEndpoint",
        "required": true,
        "spec": [
          {
            "text": "A CDP websocket endpoint to connect to.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "slowMo",
        "async": false,
        "comment": "Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on.\nDefaults to 0.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "slowMo",
        "required": false,
        "spec": [
          {
            "text": "Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on. Defaults to 0.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "logger",
        "async": false,
        "comment": "Logger sink for Playwright logging. Optional.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "logger",
        "required": false,
        "spec": [
          {
            "text": "Logger sink for Playwright logging. Optional.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Logger]",
          "name": "Logger"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds to wait for the connection to be established. Defaults to `30000` (30 seconds). Pass `0` to\ndisable timeout.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds to wait for the connection to be established. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[Browser]",
    "name": "Browser"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "args",
        "async": false,
        "comment": "Additional arguments to pass to the browser instance. The list of Chromium flags can be found\n[here](http://peter.sh/experiments/chromium-command-line-switches/).",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "args",
        "required": false,
        "spec": [
          {
            "text": "Additional arguments to pass to the browser instance. The list of Chromium flags can be found [here](http://peter.sh/experiments/chromium-command-line-switches/).",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[string]>",
          "name": "Array",
          "templates": [
            {
              "name": "string"
            }
          ]
        }
      },
      {
        "alias": "channel",
        "async": false,
        "comment": "Browser distribution channel. Read more about using\n[Google Chrome and Microsoft Edge](./browsers#google-chrome--microsoft-edge).",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "channel",
        "required": false,
        "spec": [
          {
            "text": "Browser distribution channel. Read more about using [Google Chrome and Microsoft Edge](./browsers#google-chrome--microsoft-edge).",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[BrowserChannel]<\"chrome\"|\"chrome-beta\"|\"chrome-dev\"|\"chrome-canary\"|\"msedge\"|\"msedge-beta\"|\"msedge-dev\"|\"msedge-canary\">",
          "name": "BrowserChannel",
          "union": [
            {
              "name": "\"chrome\""
            },
            {
              "name": "\"chrome-beta\""
            },
            {
              "name": "\"chrome-dev\""
            },
            {
              "name": "\"chrome-canary\""
            },
            {
              "name": "\"msedge\""
            },
            {
              "name": "\"msedge-beta\""
            },
            {
              "name": "\"msedge-dev\""
            },
            {
              "name": "\"msedge-canary\""
            }
          ]
        }
      },
      {
        "alias": "chromiumSandbox",
        "async": false,
        "comment": "Enable Chromium sandboxing. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "chromiumSandbox",
        "required": false,
        "spec": [
          {
            "text": "Enable Chromium sandboxing. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "devtools",
        "async": false,
        "comment": "**Chromium-only** Whether to auto-open a Developer Tools panel for each tab. If this option is `true`, the `headless`\noption will be set `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "devtools",
        "required": false,
        "spec": [
          {
            "text": "**Chromium-only** Whether to auto-open a Developer Tools panel for each tab. If this option is `true`, the `headless` option will be set `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "downloadsPath",
        "async": false,
        "comment": "If specified, accepted downloads are downloaded into this directory. Otherwise, temporary directory is created and is\ndeleted when browser is closed.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "downloadsPath",
        "required": false,
        "spec": [
          {
            "text": "If specified, accepted downloads are downloaded into this directory. Otherwise, temporary directory is created and is deleted when browser is closed.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "env",
        "async": false,
        "comment": "Specify environment variables that will be visible to the browser. Defaults to `process.env`.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "env",
        "required": false,
        "spec": [
          {
            "text": "Specify environment variables that will be visible to the browser. Defaults to `process.env`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]<[string], [string]>",
          "name": "Object",
          "templates": [
            {
              "name": "string"
            },
            {
              "name": "string"
            }
          ]
        }
      },
      {
        "alias": "env",
        "async": false,
        "comment": "Specify environment variables that will be visible to the browser. Defaults to `process.env`.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "env",
        "required": false,
        "spec": [
          {
            "text": "Specify environment variables that will be visible to the browser. Defaults to `process.env`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]<[string], [string]|[float]|[boolean]>",
          "name": "Object",
          "templates": [
            {
              "name": "string"
            },
            {
              "name": "",
              "union": [
                {
                  "name": "string"
                },
                {
                  "name": "float"
                },
                {
                  "name": "boolean"
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "executablePath",
        "async": false,
        "comment": "Path to a browser executable to run instead of the bundled one. If `executablePath` is a relative path, then it is\nresolved relative to the current working directory. Note that Playwright only works with the bundled Chromium, Firefox\nor WebKit, use at your own risk.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "executablePath",
        "required": false,
        "spec": [
          {
            "text": "Path to a browser executable to run instead of the bundled one. If `executablePath` is a relative path, then it is resolved relative to the current working directory. Note that Playwright only works with the bundled Chromium, Firefox or WebKit, use at your own risk.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "firefoxUserPrefs",
        "async": false,
        "comment": "Firefox user preferences. Learn more about the Firefox user preferences at\n[`about:config`](https://support.mozilla.org/en-US/kb/about-config-editor-firefox).",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "firefoxUserPrefs",
        "required": false,
        "spec": [
          {
            "text": "Firefox user preferences. Learn more about the Firefox user preferences at [`about:config`](https://support.mozilla.org/en-US/kb/about-config-editor-firefox).",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]<[string], [string]|[float]|[boolean]>",
          "name": "Object",
          "templates": [
            {
              "name": "string"
            },
            {
              "name": "",
              "union": [
                {
                  "name": "string"
                },
                {
                  "name": "float"
                },
                {
                  "name": "boolean"
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "firefoxUserPrefs",
        "async": false,
        "comment": "Firefox user preferences. Learn more about the Firefox user preferences at\n[`about:config`](https://support.mozilla.org/en-US/kb/about-config-editor-firefox).",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "firefoxUserPrefs",
        "required": false,
        "spec": [
          {
            "text": "Firefox user preferences. Learn more about the Firefox user preferences at [`about:config`](https://support.mozilla.org/en-US/kb/about-config-editor-firefox).",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]<[string], [any]>",
          "name": "Object",
          "templates": [
            {
              "name": "string"
            },
            {
              "name": "any"
            }
          ]
        }
      },
      {
        "alias": "handleSIGHUP",
        "async": false,
        "comment": "Close the browser process on SIGHUP. Defaults to `true`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "handleSIGHUP",
        "required": false,
        "spec": [
          {
            "text": "Close the browser process on SIGHUP. Defaults to `true`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "handleSIGINT",
        "async": false,
        "comment": "Close the browser process on Ctrl-C. Defaults to `true`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "handleSIGINT",
        "required": false,
        "spec": [
          {
            "text": "Close the browser process on Ctrl-C. Defaults to `true`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "handleSIGTERM",
        "async": false,
        "comment": "Close the browser process on SIGTERM. Defaults to `true`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "handleSIGTERM",
        "required": false,
        "spec": [
          {
            "text": "Close the browser process on SIGTERM. Defaults to `true`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "headless",
        "async": false,
        "comment": "Whether to run browser in headless mode. More details for\n[Chromium](https://developers.google.com/web/updates/2017/04/headless-chrome) and\n[Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode). Defaults to `true` unless the\n`devtools` option is `true`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "headless",
        "required": false,
        "spec": [
          {
            "text": "Whether to run browser in headless mode. More details for [Chromium](https://developers.google.com/web/updates/2017/04/headless-chrome) and [Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode). Defaults to `true` unless the `devtools` option is `true`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "ignoreAllDefaultArgs",
        "async": false,
        "comment": "If `true`, Playwright does not pass its own configurations args and only uses the ones from `args`. Dangerous option;\nuse with care. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "ignoreAllDefaultArgs",
        "required": false,
        "spec": [
          {
            "text": "If `true`, Playwright does not pass its own configurations args and only uses the ones from `args`. Dangerous option; use with care. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "ignoreDefaultArgs",
        "async": false,
        "comment": "If `true`, Playwright does not pass its own configurations args and only uses the ones from `args`. If an array is\ngiven, then filters out the given default arguments. Dangerous option; use with care. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "ignoreDefaultArgs",
        "required": false,
        "spec": [
          {
            "text": "If `true`, Playwright does not pass its own configurations args and only uses the ones from `args`. If an array is given, then filters out the given default arguments. Dangerous option; use with care. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]|[Array]<[string]>",
          "name": "",
          "union": [
            {
              "name": "boolean"
            },
            {
              "name": "Array",
              "templates": [
                {
                  "name": "string"
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "ignoreDefaultArgs",
        "async": false,
        "comment": "If `true`, Playwright does not pass its own configurations args and only uses the ones from `args`. Dangerous option;\nuse with care.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "ignoreDefaultArgs",
        "required": false,
        "spec": [
          {
            "text": "If `true`, Playwright does not pass its own configurations args and only uses the ones from `args`. Dangerous option; use with care.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[string]>",
          "name": "Array",
          "templates": [
            {
              "name": "string"
            }
          ]
        }
      },
      {
        "alias": "logger",
        "async": false,
        "comment": "Logger sink for Playwright logging.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "logger",
        "required": false,
        "spec": [
          {
            "text": "Logger sink for Playwright logging.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Logger]",
          "name": "Logger"
        }
      },
      {
        "alias": "proxy",
        "async": false,
        "comment": "Network proxy settings.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "proxy",
        "required": false,
        "spec": [
          {
            "text": "Network proxy settings.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "server",
              "async": false,
              "comment": "Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or\n`socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "server",
              "required": true,
              "spec": [
                {
                  "text": "Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            },
            {
              "alias": "bypass",
              "async": false,
              "comment": "Optional coma-separated domains to bypass proxy, for example `\".com, chromium.org, .domain.com\"`.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "bypass",
              "required": false,
              "spec": [
                {
                  "text": "Optional coma-separated domains to bypass proxy, for example `\".com, chromium.org, .domain.com\"`.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            },
            {
              "alias": "username",
              "async": false,
              "comment": "Optional username to use if HTTP proxy requires authentication.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "username",
              "required": false,
              "spec": [
                {
                  "text": "Optional username to use if HTTP proxy requires authentication.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            },
            {
              "alias": "password",
              "async": false,
              "comment": "Optional password to use if HTTP proxy requires authentication.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "password",
              "required": false,
              "spec": [
                {
                  "text": "Optional password to use if HTTP proxy requires authentication.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            }
          ]
        }
      },
      {
        "alias": "slowMo",
        "async": false,
        "comment": "Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "slowMo",
        "required": false,
        "spec": [
          {
            "text": "Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds to wait for the browser instance to start. Defaults to `30000` (30 seconds). Pass `0` to\ndisable timeout.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds to wait for the browser instance to start. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[BrowserContext]",
    "name": "BrowserContext"
  },
  {
    "expression": "[path]",
    "name": "path"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "acceptDownloads",
        "async": false,
        "comment": "Whether to automatically download all the attachments. Defaults to `false` where all the downloads are canceled.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "acceptDownloads",
        "required": false,
        "spec": [
          {
            "text": "Whether to automatically download all the attachments. Defaults to `false` where all the downloads are canceled.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "args",
        "async": false,
        "comment": "Additional arguments to pass to the browser instance. The list of Chromium flags can be found\n[here](http://peter.sh/experiments/chromium-command-line-switches/).",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "args",
        "required": false,
        "spec": [
          {
            "text": "Additional arguments to pass to the browser instance. The list of Chromium flags can be found [here](http://peter.sh/experiments/chromium-command-line-switches/).",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[string]>",
          "name": "Array",
          "templates": [
            {
              "name": "string"
            }
          ]
        }
      },
      {
        "alias": "bypassCSP",
        "async": false,
        "comment": "Toggles bypassing page's Content-Security-Policy.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "bypassCSP",
        "required": false,
        "spec": [
          {
            "text": "Toggles bypassing page's Content-Security-Policy.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "channel",
        "async": false,
        "comment": "Browser distribution channel.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "channel",
        "required": false,
        "spec": [
          {
            "text": "Browser distribution channel.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[BrowserChannel]<\"chrome\"|\"chrome-beta\"|\"chrome-dev\"|\"chrome-canary\"|\"msedge\"|\"msedge-beta\"|\"msedge-dev\"|\"msedge-canary\">",
          "name": "BrowserChannel",
          "union": [
            {
              "name": "\"chrome\""
            },
            {
              "name": "\"chrome-beta\""
            },
            {
              "name": "\"chrome-dev\""
            },
            {
              "name": "\"chrome-canary\""
            },
            {
              "name": "\"msedge\""
            },
            {
              "name": "\"msedge-beta\""
            },
            {
              "name": "\"msedge-dev\""
            },
            {
              "name": "\"msedge-canary\""
            }
          ]
        }
      },
      {
        "alias": "chromiumSandbox",
        "async": false,
        "comment": "Enable Chromium sandboxing. Defaults to `true`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "chromiumSandbox",
        "required": false,
        "spec": [
          {
            "text": "Enable Chromium sandboxing. Defaults to `true`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "colorScheme",
        "async": false,
        "comment": "Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See\n[`method: Page.emulateMedia`] for more details. Defaults to `'light'`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "colorScheme",
        "required": false,
        "spec": [
          {
            "text": "Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See [`method: Page.emulateMedia`] for more details. Defaults to `'light'`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[ColorScheme]<\"light\"|\"dark\"|\"no-preference\">",
          "name": "ColorScheme",
          "union": [
            {
              "name": "\"light\""
            },
            {
              "name": "\"dark\""
            },
            {
              "name": "\"no-preference\""
            }
          ]
        }
      },
      {
        "alias": "deviceScaleFactor",
        "async": false,
        "comment": "Specify device scale factor (can be thought of as dpr). Defaults to `1`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "deviceScaleFactor",
        "required": false,
        "spec": [
          {
            "text": "Specify device scale factor (can be thought of as dpr). Defaults to `1`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "devtools",
        "async": false,
        "comment": "**Chromium-only** Whether to auto-open a Developer Tools panel for each tab. If this option is `true`, the `headless`\noption will be set `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "devtools",
        "required": false,
        "spec": [
          {
            "text": "**Chromium-only** Whether to auto-open a Developer Tools panel for each tab. If this option is `true`, the `headless` option will be set `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "downloadsPath",
        "async": false,
        "comment": "If specified, accepted downloads are downloaded into this directory. Otherwise, temporary directory is created and is\ndeleted when browser is closed.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "downloadsPath",
        "required": false,
        "spec": [
          {
            "text": "If specified, accepted downloads are downloaded into this directory. Otherwise, temporary directory is created and is deleted when browser is closed.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "env",
        "async": false,
        "comment": "Specify environment variables that will be visible to the browser. Defaults to `process.env`.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "env",
        "required": false,
        "spec": [
          {
            "text": "Specify environment variables that will be visible to the browser. Defaults to `process.env`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]<[string], [string]>",
          "name": "Object",
          "templates": [
            {
              "name": "string"
            },
            {
              "name": "string"
            }
          ]
        }
      },
      {
        "alias": "env",
        "async": false,
        "comment": "Specify environment variables that will be visible to the browser. Defaults to `process.env`.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "env",
        "required": false,
        "spec": [
          {
            "text": "Specify environment variables that will be visible to the browser. Defaults to `process.env`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]<[string], [string]|[float]|[boolean]>",
          "name": "Object",
          "templates": [
            {
              "name": "string"
            },
            {
              "name": "",
              "union": [
                {
                  "name": "string"
                },
                {
                  "name": "float"
                },
                {
                  "name": "boolean"
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "executablePath",
        "async": false,
        "comment": "Path to a browser executable to run instead of the bundled one. If `executablePath` is a relative path, then it is\nresolved relative to the current working directory. **BEWARE**: Playwright is only guaranteed to work with the bundled\nChromium, Firefox or WebKit, use at your own risk.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "executablePath",
        "required": false,
        "spec": [
          {
            "text": "Path to a browser executable to run instead of the bundled one. If `executablePath` is a relative path, then it is resolved relative to the current working directory. **BEWARE**: Playwright is only guaranteed to work with the bundled Chromium, Firefox or WebKit, use at your own risk.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "extraHTTPHeaders",
        "async": false,
        "comment": "An object containing additional HTTP headers to be sent with every request. All header values must be strings.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "extraHTTPHeaders",
        "required": false,
        "spec": [
          {
            "text": "An object containing additional HTTP headers to be sent with every request. All header values must be strings.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]<[string], [string]>",
          "name": "Object",
          "templates": [
            {
              "name": "string"
            },
            {
              "name": "string"
            }
          ]
        }
      },
      {
        "alias": "geolocation",
        "async": false,
        "comment": "",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "geolocation",
        "required": false,
        "spec": [],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "latitude",
              "async": false,
              "comment": "Latitude between -90 and 90.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "latitude",
              "required": true,
              "spec": [
                {
                  "text": "Latitude between -90 and 90.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            },
            {
              "alias": "longitude",
              "async": false,
              "comment": "Longitude between -180 and 180.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "longitude",
              "required": true,
              "spec": [
                {
                  "text": "Longitude between -180 and 180.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            },
            {
              "alias": "accuracy",
              "async": false,
              "comment": "Non-negative accuracy value. Defaults to `0`.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "accuracy",
              "required": false,
              "spec": [
                {
                  "text": "Non-negative accuracy value. Defaults to `0`.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            }
          ]
        }
      },
      {
        "alias": "handleSIGHUP",
        "async": false,
        "comment": "Close the browser process on SIGHUP. Defaults to `true`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "handleSIGHUP",
        "required": false,
        "spec": [
          {
            "text": "Close the browser process on SIGHUP. Defaults to `true`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "handleSIGINT",
        "async": false,
        "comment": "Close the browser process on Ctrl-C. Defaults to `true`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "handleSIGINT",
        "required": false,
        "spec": [
          {
            "text": "Close the browser process on Ctrl-C. Defaults to `true`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "handleSIGTERM",
        "async": false,
        "comment": "Close the browser process on SIGTERM. Defaults to `true`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "handleSIGTERM",
        "required": false,
        "spec": [
          {
            "text": "Close the browser process on SIGTERM. Defaults to `true`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "hasTouch",
        "async": false,
        "comment": "Specifies if viewport supports touch events. Defaults to false.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "hasTouch",
        "required": false,
        "spec": [
          {
            "text": "Specifies if viewport supports touch events. Defaults to false.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "headless",
        "async": false,
        "comment": "Whether to run browser in headless mode. More details for\n[Chromium](https://developers.google.com/web/updates/2017/04/headless-chrome) and\n[Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode). Defaults to `true` unless the\n`devtools` option is `true`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "headless",
        "required": false,
        "spec": [
          {
            "text": "Whether to run browser in headless mode. More details for [Chromium](https://developers.google.com/web/updates/2017/04/headless-chrome) and [Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode). Defaults to `true` unless the `devtools` option is `true`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "httpCredentials",
        "async": false,
        "comment": "Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication).",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "httpCredentials",
        "required": false,
        "spec": [
          {
            "text": "Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication).",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "username",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "username",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            },
            {
              "alias": "password",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "password",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            }
          ]
        }
      },
      {
        "alias": "ignoreAllDefaultArgs",
        "async": false,
        "comment": "If `true`, Playwright does not pass its own configurations args and only uses the ones from `args`. Dangerous option;\nuse with care. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "ignoreAllDefaultArgs",
        "required": false,
        "spec": [
          {
            "text": "If `true`, Playwright does not pass its own configurations args and only uses the ones from `args`. Dangerous option; use with care. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "ignoreDefaultArgs",
        "async": false,
        "comment": "If `true`, Playwright does not pass its own configurations args and only uses the ones from `args`. If an array is\ngiven, then filters out the given default arguments. Dangerous option; use with care. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "ignoreDefaultArgs",
        "required": false,
        "spec": [
          {
            "text": "If `true`, Playwright does not pass its own configurations args and only uses the ones from `args`. If an array is given, then filters out the given default arguments. Dangerous option; use with care. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]|[Array]<[string]>",
          "name": "",
          "union": [
            {
              "name": "boolean"
            },
            {
              "name": "Array",
              "templates": [
                {
                  "name": "string"
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "ignoreDefaultArgs",
        "async": false,
        "comment": "If `true`, Playwright does not pass its own configurations args and only uses the ones from `args`. Dangerous option;\nuse with care.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "ignoreDefaultArgs",
        "required": false,
        "spec": [
          {
            "text": "If `true`, Playwright does not pass its own configurations args and only uses the ones from `args`. Dangerous option; use with care.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[string]>",
          "name": "Array",
          "templates": [
            {
              "name": "string"
            }
          ]
        }
      },
      {
        "alias": "ignoreHTTPSErrors",
        "async": false,
        "comment": "Whether to ignore HTTPS errors during navigation. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "ignoreHTTPSErrors",
        "required": false,
        "spec": [
          {
            "text": "Whether to ignore HTTPS errors during navigation. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "isMobile",
        "async": false,
        "comment": "Whether the `meta viewport` tag is taken into account and touch events are enabled. Defaults to `false`. Not supported\nin Firefox.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "isMobile",
        "required": false,
        "spec": [
          {
            "text": "Whether the `meta viewport` tag is taken into account and touch events are enabled. Defaults to `false`. Not supported in Firefox.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "javaScriptEnabled",
        "async": false,
        "comment": "Whether or not to enable JavaScript in the context. Defaults to `true`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "javaScriptEnabled",
        "required": false,
        "spec": [
          {
            "text": "Whether or not to enable JavaScript in the context. Defaults to `true`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "locale",
        "async": false,
        "comment": "Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language`\nrequest header value as well as number and date formatting rules.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "locale",
        "required": false,
        "spec": [
          {
            "text": "Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value, `Accept-Language` request header value as well as number and date formatting rules.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "logger",
        "async": false,
        "comment": "Logger sink for Playwright logging.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "logger",
        "required": false,
        "spec": [
          {
            "text": "Logger sink for Playwright logging.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Logger]",
          "name": "Logger"
        }
      },
      {
        "alias": "noViewport",
        "async": false,
        "comment": "Does not enforce fixed viewport, allows resizing window in the headed mode.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "noViewport",
        "required": false,
        "spec": [
          {
            "text": "Does not enforce fixed viewport, allows resizing window in the headed mode.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "offline",
        "async": false,
        "comment": "Whether to emulate network being offline. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "offline",
        "required": false,
        "spec": [
          {
            "text": "Whether to emulate network being offline. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "permissions",
        "async": false,
        "comment": "A list of permissions to grant to all pages in this context. See [`method: BrowserContext.grantPermissions`] for more\ndetails.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "permissions",
        "required": false,
        "spec": [
          {
            "text": "A list of permissions to grant to all pages in this context. See [`method: BrowserContext.grantPermissions`] for more details.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[string]>",
          "name": "Array",
          "templates": [
            {
              "name": "string"
            }
          ]
        }
      },
      {
        "alias": "proxy",
        "async": false,
        "comment": "Network proxy settings.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "proxy",
        "required": false,
        "spec": [
          {
            "text": "Network proxy settings.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "server",
              "async": false,
              "comment": "Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or\n`socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "server",
              "required": true,
              "spec": [
                {
                  "text": "Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            },
            {
              "alias": "bypass",
              "async": false,
              "comment": "Optional coma-separated domains to bypass proxy, for example `\".com, chromium.org, .domain.com\"`.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "bypass",
              "required": false,
              "spec": [
                {
                  "text": "Optional coma-separated domains to bypass proxy, for example `\".com, chromium.org, .domain.com\"`.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            },
            {
              "alias": "username",
              "async": false,
              "comment": "Optional username to use if HTTP proxy requires authentication.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "username",
              "required": false,
              "spec": [
                {
                  "text": "Optional username to use if HTTP proxy requires authentication.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            },
            {
              "alias": "password",
              "async": false,
              "comment": "Optional password to use if HTTP proxy requires authentication.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "password",
              "required": false,
              "spec": [
                {
                  "text": "Optional password to use if HTTP proxy requires authentication.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            }
          ]
        }
      },
      {
        "alias": "recordHar",
        "async": false,
        "comment": "Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file. If not\nspecified, the HAR is not recorded. Make sure to await [`method: BrowserContext.close`] for the HAR to be saved.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "recordHar",
        "required": false,
        "spec": [
          {
            "text": "Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file. If not specified, the HAR is not recorded. Make sure to await [`method: BrowserContext.close`] for the HAR to be saved.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "omitContent",
              "async": false,
              "comment": "Optional setting to control whether to omit request content from the HAR. Defaults to `false`.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "omitContent",
              "required": false,
              "spec": [
                {
                  "text": "Optional setting to control whether to omit request content from the HAR. Defaults to `false`.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[boolean]",
                "name": "boolean"
              }
            },
            {
              "alias": "path",
              "async": false,
              "comment": "Path on the filesystem to write the HAR file to.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "path",
              "required": true,
              "spec": [
                {
                  "text": "Path on the filesystem to write the HAR file to.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[path]",
                "name": "path"
              }
            }
          ]
        }
      },
      {
        "alias": "recordHarOmitContent",
        "async": false,
        "comment": "Optional setting to control whether to omit request content from the HAR. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {
            "python": "record_har_omit_content"
          },
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "recordHarOmitContent",
        "required": false,
        "spec": [
          {
            "text": "Optional setting to control whether to omit request content from the HAR. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "recordHarPath",
        "async": false,
        "comment": "Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into the specified HAR file on the\nfilesystem. If not specified, the HAR is not recorded. Make sure to call [`method: BrowserContext.close`] for the HAR to\nbe saved.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {
            "python": "record_har_path"
          },
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "recordHarPath",
        "required": false,
        "spec": [
          {
            "text": "Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into the specified HAR file on the filesystem. If not specified, the HAR is not recorded. Make sure to call [`method: BrowserContext.close`] for the HAR to be saved.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "recordVideo",
        "async": false,
        "comment": "Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded. Make\nsure to await [`method: BrowserContext.close`] for videos to be saved.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "recordVideo",
        "required": false,
        "spec": [
          {
            "text": "Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded. Make sure to await [`method: BrowserContext.close`] for videos to be saved.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "dir",
              "async": false,
              "comment": "Path to the directory to put videos into.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "dir",
              "required": true,
              "spec": [
                {
                  "text": "Path to the directory to put videos into.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[path]",
                "name": "path"
              }
            },
            {
              "alias": "size",
              "async": false,
              "comment": "Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit\ninto 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page\nwill be scaled down if necessary to fit the specified size.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "size",
              "required": false,
              "spec": [
                {
                  "text": "Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[Object]",
                "name": "Object",
                "properties": [
                  {
                    "alias": "width",
                    "async": false,
                    "comment": "Video frame width.",
                    "deprecated": false,
                    "kind": "property",
                    "langs": {},
                    "name": "width",
                    "required": true,
                    "spec": [
                      {
                        "text": "Video frame width.",
                        "type": "text"
                      }
                    ],
                    "type": {
                      "expression": "[int]",
                      "name": "int"
                    }
                  },
                  {
                    "alias": "height",
                    "async": false,
                    "comment": "Video frame height.",
                    "deprecated": false,
                    "kind": "property",
                    "langs": {},
                    "name": "height",
                    "required": true,
                    "spec": [
                      {
                        "text": "Video frame height.",
                        "type": "text"
                      }
                    ],
                    "type": {
                      "expression": "[int]",
                      "name": "int"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      {
        "alias": "recordVideoDir",
        "async": false,
        "comment": "Enables video recording for all pages into the specified directory. If not specified videos are not recorded. Make sure\nto call [`method: BrowserContext.close`] for videos to be saved.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {
            "python": "record_video_dir"
          },
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "recordVideoDir",
        "required": false,
        "spec": [
          {
            "text": "Enables video recording for all pages into the specified directory. If not specified videos are not recorded. Make sure to call [`method: BrowserContext.close`] for videos to be saved.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "recordVideoSize",
        "async": false,
        "comment": "Dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into\n800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will\nbe scaled down if necessary to fit the specified size.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {
            "python": "record_video_size"
          },
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "recordVideoSize",
        "required": false,
        "spec": [
          {
            "text": "Dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of each page will be scaled down if necessary to fit the specified size.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "width",
              "async": false,
              "comment": "Video frame width.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "width",
              "required": true,
              "spec": [
                {
                  "text": "Video frame width.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[int]",
                "name": "int"
              }
            },
            {
              "alias": "height",
              "async": false,
              "comment": "Video frame height.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "height",
              "required": true,
              "spec": [
                {
                  "text": "Video frame height.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[int]",
                "name": "int"
              }
            }
          ]
        }
      },
      {
        "alias": "screen",
        "async": false,
        "comment": "Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the `viewport`\nis set.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {
            "csharp": "screenSize",
            "java": "screenSize"
          },
          "overrides": {},
          "types": {}
        },
        "name": "screen",
        "required": false,
        "spec": [
          {
            "text": "Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the `viewport` is set.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "width",
              "async": false,
              "comment": "page width in pixels.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "width",
              "required": true,
              "spec": [
                {
                  "text": "page width in pixels.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[int]",
                "name": "int"
              }
            },
            {
              "alias": "height",
              "async": false,
              "comment": "page height in pixels.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "height",
              "required": true,
              "spec": [
                {
                  "text": "page height in pixels.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[int]",
                "name": "int"
              }
            }
          ]
        }
      },
      {
        "alias": "slowMo",
        "async": false,
        "comment": "Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on.\nDefaults to 0.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "slowMo",
        "required": false,
        "spec": [
          {
            "text": "Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on. Defaults to 0.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds to wait for the browser instance to start. Defaults to `30000` (30 seconds). Pass `0` to\ndisable timeout.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds to wait for the browser instance to start. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "timezoneId",
        "async": false,
        "comment": "Changes the timezone of the context. See\n[ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1)\nfor a list of supported timezone IDs.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timezoneId",
        "required": false,
        "spec": [
          {
            "text": "Changes the timezone of the context. See [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1) for a list of supported timezone IDs.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "userAgent",
        "async": false,
        "comment": "Specific user agent to use in this context.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "userAgent",
        "required": false,
        "spec": [
          {
            "text": "Specific user agent to use in this context.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "videoSize",
        "async": false,
        "comment": "**DEPRECATED** Use `recordVideo` instead.",
        "deprecated": true,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "videoSize",
        "required": false,
        "spec": [
          {
            "text": "**DEPRECATED** Use `recordVideo` instead.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "width",
              "async": false,
              "comment": "Video frame width.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "width",
              "required": true,
              "spec": [
                {
                  "text": "Video frame width.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[int]",
                "name": "int"
              }
            },
            {
              "alias": "height",
              "async": false,
              "comment": "Video frame height.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "height",
              "required": true,
              "spec": [
                {
                  "text": "Video frame height.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[int]",
                "name": "int"
              }
            }
          ]
        }
      },
      {
        "alias": "videosPath",
        "async": false,
        "comment": "**DEPRECATED** Use `recordVideo` instead.",
        "deprecated": true,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "videosPath",
        "required": false,
        "spec": [
          {
            "text": "**DEPRECATED** Use `recordVideo` instead.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "viewport",
        "async": false,
        "comment": "Emulates consistent viewport for each page. Defaults to an 1280x720 viewport. `null` disables the default viewport.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {
            "csharp": "viewportSize",
            "java": "viewportSize"
          },
          "only": [
            "js",
            "java"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "viewport",
        "required": false,
        "spec": [
          {
            "text": "Emulates consistent viewport for each page. Defaults to an 1280x720 viewport. `null` disables the default viewport.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[null]|[Object]",
          "name": "",
          "union": [
            {
              "name": "null"
            },
            {
              "name": "Object",
              "properties": [
                {
                  "alias": "width",
                  "async": false,
                  "comment": "page width in pixels.",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "width",
                  "required": true,
                  "spec": [
                    {
                      "text": "page width in pixels.",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[int]",
                    "name": "int"
                  }
                },
                {
                  "alias": "height",
                  "async": false,
                  "comment": "page height in pixels.",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "height",
                  "required": true,
                  "spec": [
                    {
                      "text": "page height in pixels.",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[int]",
                    "name": "int"
                  }
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "viewport",
        "async": false,
        "comment": "Sets a consistent viewport for each page. Defaults to an 1280x720 viewport. `no_viewport` disables the fixed viewport.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "viewport",
        "required": false,
        "spec": [
          {
            "text": "Sets a consistent viewport for each page. Defaults to an 1280x720 viewport. `no_viewport` disables the fixed viewport.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[null]|[Object]",
          "name": "",
          "union": [
            {
              "name": "null"
            },
            {
              "name": "Object",
              "properties": [
                {
                  "alias": "width",
                  "async": false,
                  "comment": "page width in pixels.",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "width",
                  "required": true,
                  "spec": [
                    {
                      "text": "page width in pixels.",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[int]",
                    "name": "int"
                  }
                },
                {
                  "alias": "height",
                  "async": false,
                  "comment": "page height in pixels.",
                  "deprecated": false,
                  "kind": "property",
                  "langs": {},
                  "name": "height",
                  "required": true,
                  "spec": [
                    {
                      "text": "page height in pixels.",
                      "type": "text"
                    }
                  ],
                  "type": {
                    "expression": "[int]",
                    "name": "int"
                  }
                }
              ]
            }
          ]
        }
      }
    ]
  },
  {
    "expression": "[BrowserServer]",
    "name": "BrowserServer"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "args",
        "async": false,
        "comment": "Additional arguments to pass to the browser instance. The list of Chromium flags can be found\n[here](http://peter.sh/experiments/chromium-command-line-switches/).",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "args",
        "required": false,
        "spec": [
          {
            "text": "Additional arguments to pass to the browser instance. The list of Chromium flags can be found [here](http://peter.sh/experiments/chromium-command-line-switches/).",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[string]>",
          "name": "Array",
          "templates": [
            {
              "name": "string"
            }
          ]
        }
      },
      {
        "alias": "chromiumSandbox",
        "async": false,
        "comment": "Enable Chromium sandboxing. Defaults to `true`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "chromiumSandbox",
        "required": false,
        "spec": [
          {
            "text": "Enable Chromium sandboxing. Defaults to `true`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "devtools",
        "async": false,
        "comment": "**Chromium-only** Whether to auto-open a Developer Tools panel for each tab. If this option is `true`, the `headless`\noption will be set `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "devtools",
        "required": false,
        "spec": [
          {
            "text": "**Chromium-only** Whether to auto-open a Developer Tools panel for each tab. If this option is `true`, the `headless` option will be set `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "downloadsPath",
        "async": false,
        "comment": "If specified, accepted downloads are downloaded into this directory. Otherwise, temporary directory is created and is\ndeleted when browser is closed.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "downloadsPath",
        "required": false,
        "spec": [
          {
            "text": "If specified, accepted downloads are downloaded into this directory. Otherwise, temporary directory is created and is deleted when browser is closed.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "env",
        "async": false,
        "comment": "Specify environment variables that will be visible to the browser. Defaults to `process.env`.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "env",
        "required": false,
        "spec": [
          {
            "text": "Specify environment variables that will be visible to the browser. Defaults to `process.env`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]<[string], [string]|[float]|[boolean]>",
          "name": "Object",
          "templates": [
            {
              "name": "string"
            },
            {
              "name": "",
              "union": [
                {
                  "name": "string"
                },
                {
                  "name": "float"
                },
                {
                  "name": "boolean"
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "executablePath",
        "async": false,
        "comment": "Path to a browser executable to run instead of the bundled one. If `executablePath` is a relative path, then it is\nresolved relative to the current working directory. **BEWARE**: Playwright is only guaranteed to work with the bundled\nChromium, Firefox or WebKit, use at your own risk.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "executablePath",
        "required": false,
        "spec": [
          {
            "text": "Path to a browser executable to run instead of the bundled one. If `executablePath` is a relative path, then it is resolved relative to the current working directory. **BEWARE**: Playwright is only guaranteed to work with the bundled Chromium, Firefox or WebKit, use at your own risk.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "firefoxUserPrefs",
        "async": false,
        "comment": "Firefox user preferences. Learn more about the Firefox user preferences at\n[`about:config`](https://support.mozilla.org/en-US/kb/about-config-editor-firefox).",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "firefoxUserPrefs",
        "required": false,
        "spec": [
          {
            "text": "Firefox user preferences. Learn more about the Firefox user preferences at [`about:config`](https://support.mozilla.org/en-US/kb/about-config-editor-firefox).",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]<[string], [string]|[float]|[boolean]>",
          "name": "Object",
          "templates": [
            {
              "name": "string"
            },
            {
              "name": "",
              "union": [
                {
                  "name": "string"
                },
                {
                  "name": "float"
                },
                {
                  "name": "boolean"
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "handleSIGHUP",
        "async": false,
        "comment": "Close the browser process on SIGHUP. Defaults to `true`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "handleSIGHUP",
        "required": false,
        "spec": [
          {
            "text": "Close the browser process on SIGHUP. Defaults to `true`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "handleSIGINT",
        "async": false,
        "comment": "Close the browser process on Ctrl-C. Defaults to `true`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "handleSIGINT",
        "required": false,
        "spec": [
          {
            "text": "Close the browser process on Ctrl-C. Defaults to `true`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "handleSIGTERM",
        "async": false,
        "comment": "Close the browser process on SIGTERM. Defaults to `true`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "handleSIGTERM",
        "required": false,
        "spec": [
          {
            "text": "Close the browser process on SIGTERM. Defaults to `true`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "headless",
        "async": false,
        "comment": "Whether to run browser in headless mode. More details for\n[Chromium](https://developers.google.com/web/updates/2017/04/headless-chrome) and\n[Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode). Defaults to `true` unless the\n`devtools` option is `true`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "headless",
        "required": false,
        "spec": [
          {
            "text": "Whether to run browser in headless mode. More details for [Chromium](https://developers.google.com/web/updates/2017/04/headless-chrome) and [Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode). Defaults to `true` unless the `devtools` option is `true`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "ignoreDefaultArgs",
        "async": false,
        "comment": "If `true`, Playwright does not pass its own configurations args and only uses the ones from `args`. If an array is\ngiven, then filters out the given default arguments. Dangerous option; use with care. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "ignoreDefaultArgs",
        "required": false,
        "spec": [
          {
            "text": "If `true`, Playwright does not pass its own configurations args and only uses the ones from `args`. If an array is given, then filters out the given default arguments. Dangerous option; use with care. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]|[Array]<[string]>",
          "name": "",
          "union": [
            {
              "name": "boolean"
            },
            {
              "name": "Array",
              "templates": [
                {
                  "name": "string"
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "logger",
        "async": false,
        "comment": "Logger sink for Playwright logging.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "logger",
        "required": false,
        "spec": [
          {
            "text": "Logger sink for Playwright logging.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Logger]",
          "name": "Logger"
        }
      },
      {
        "alias": "port",
        "async": false,
        "comment": "Port to use for the web socket. Defaults to 0 that picks any available port.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "port",
        "required": false,
        "spec": [
          {
            "text": "Port to use for the web socket. Defaults to 0 that picks any available port.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[int]",
          "name": "int"
        }
      },
      {
        "alias": "proxy",
        "async": false,
        "comment": "Network proxy settings.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "proxy",
        "required": false,
        "spec": [
          {
            "text": "Network proxy settings.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "server",
              "async": false,
              "comment": "Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or\n`socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "server",
              "required": true,
              "spec": [
                {
                  "text": "Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            },
            {
              "alias": "bypass",
              "async": false,
              "comment": "Optional coma-separated domains to bypass proxy, for example `\".com, chromium.org, .domain.com\"`.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "bypass",
              "required": false,
              "spec": [
                {
                  "text": "Optional coma-separated domains to bypass proxy, for example `\".com, chromium.org, .domain.com\"`.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            },
            {
              "alias": "username",
              "async": false,
              "comment": "Optional username to use if HTTP proxy requires authentication.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "username",
              "required": false,
              "spec": [
                {
                  "text": "Optional username to use if HTTP proxy requires authentication.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            },
            {
              "alias": "password",
              "async": false,
              "comment": "Optional password to use if HTTP proxy requires authentication.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "password",
              "required": false,
              "spec": [
                {
                  "text": "Optional password to use if HTTP proxy requires authentication.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            }
          ]
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds to wait for the browser instance to start. Defaults to `30000` (30 seconds). Pass `0` to\ndisable timeout.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds to wait for the browser instance to start. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "void"
  },
  {
    "expression": "[Object]",
    "name": "Object"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[Object]",
    "name": "Object"
  },
  {
    "expression": "[CDPSession]",
    "name": "CDPSession"
  },
  {
    "name": "void"
  },
  {
    "expression": "[Page]",
    "name": "Page"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "categories",
        "async": false,
        "comment": "specify custom categories to use instead of default.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "categories",
        "required": false,
        "spec": [
          {
            "text": "specify custom categories to use instead of default.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[string]>",
          "name": "Array",
          "templates": [
            {
              "name": "string"
            }
          ]
        }
      },
      {
        "alias": "path",
        "async": false,
        "comment": "A path to write the trace file to.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "path",
        "required": false,
        "spec": [
          {
            "text": "A path to write the trace file to.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "screenshots",
        "async": false,
        "comment": "captures screenshots in the trace.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "screenshots",
        "required": false,
        "spec": [
          {
            "text": "captures screenshots in the trace.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      }
    ]
  },
  {
    "expression": "[Buffer]",
    "name": "Buffer"
  },
  {
    "expression": "[Page]",
    "name": "Page"
  },
  {
    "expression": "[Worker]",
    "name": "Worker"
  },
  {
    "expression": "[Array]<[Page]>",
    "name": "Array",
    "templates": [
      {
        "name": "Page"
      }
    ]
  },
  {
    "expression": "[CDPSession]",
    "name": "CDPSession"
  },
  {
    "expression": "[Page]",
    "name": "Page"
  },
  {
    "expression": "[Array]<[Worker]>",
    "name": "Array",
    "templates": [
      {
        "name": "Worker"
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "resetOnNavigation",
        "async": false,
        "comment": "Whether to reset coverage on every navigation. Defaults to `true`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "resetOnNavigation",
        "required": false,
        "spec": [
          {
            "text": "Whether to reset coverage on every navigation. Defaults to `true`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "reportAnonymousScripts",
        "async": false,
        "comment": "Whether anonymous scripts generated by the page should be reported. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "reportAnonymousScripts",
        "required": false,
        "spec": [
          {
            "text": "Whether anonymous scripts generated by the page should be reported. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "resetOnNavigation",
        "async": false,
        "comment": "Whether to reset coverage on every navigation. Defaults to `true`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "resetOnNavigation",
        "required": false,
        "spec": [
          {
            "text": "Whether to reset coverage on every navigation. Defaults to `true`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      }
    ]
  },
  {
    "expression": "[Array]<[Object]>",
    "name": "Array",
    "templates": [
      {
        "name": "Object",
        "properties": [
          {
            "alias": "url",
            "async": false,
            "comment": "StyleSheet URL",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "url",
            "required": true,
            "spec": [
              {
                "text": "StyleSheet URL",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "text",
            "async": false,
            "comment": "StyleSheet content, if available.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "text",
            "required": false,
            "spec": [
              {
                "text": "StyleSheet content, if available.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "ranges",
            "async": false,
            "comment": "StyleSheet ranges that were used. Ranges are sorted and non-overlapping.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "ranges",
            "required": true,
            "spec": [
              {
                "text": "StyleSheet ranges that were used. Ranges are sorted and non-overlapping.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[Array]<[Object]>",
              "name": "Array",
              "templates": [
                {
                  "name": "Object",
                  "properties": [
                    {
                      "alias": "start",
                      "async": false,
                      "comment": "A start offset in text, inclusive",
                      "deprecated": false,
                      "kind": "property",
                      "langs": {},
                      "name": "start",
                      "required": true,
                      "spec": [
                        {
                          "text": "A start offset in text, inclusive",
                          "type": "text"
                        }
                      ],
                      "type": {
                        "expression": "[int]",
                        "name": "int"
                      }
                    },
                    {
                      "alias": "end",
                      "async": false,
                      "comment": "An end offset in text, exclusive",
                      "deprecated": false,
                      "kind": "property",
                      "langs": {},
                      "name": "end",
                      "required": true,
                      "spec": [
                        {
                          "text": "An end offset in text, exclusive",
                          "type": "text"
                        }
                      ],
                      "type": {
                        "expression": "[int]",
                        "name": "int"
                      }
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    ]
  },
  {
    "expression": "[Array]<[Object]>",
    "name": "Array",
    "templates": [
      {
        "name": "Object",
        "properties": [
          {
            "alias": "url",
            "async": false,
            "comment": "Script URL",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "url",
            "required": true,
            "spec": [
              {
                "text": "Script URL",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "scriptId",
            "async": false,
            "comment": "Script ID",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "scriptId",
            "required": true,
            "spec": [
              {
                "text": "Script ID",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "source",
            "async": false,
            "comment": "Script content, if applicable.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "source",
            "required": false,
            "spec": [
              {
                "text": "Script content, if applicable.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "functions",
            "async": false,
            "comment": "V8-specific coverage format.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "functions",
            "required": true,
            "spec": [
              {
                "text": "V8-specific coverage format.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[Array]<[Object]>",
              "name": "Array",
              "templates": [
                {
                  "name": "Object",
                  "properties": [
                    {
                      "alias": "functionName",
                      "async": false,
                      "comment": "",
                      "deprecated": false,
                      "kind": "property",
                      "langs": {},
                      "name": "functionName",
                      "required": true,
                      "spec": [
                        {
                          "text": "",
                          "type": "text"
                        }
                      ],
                      "type": {
                        "expression": "[string]",
                        "name": "string"
                      }
                    },
                    {
                      "alias": "isBlockCoverage",
                      "async": false,
                      "comment": "",
                      "deprecated": false,
                      "kind": "property",
                      "langs": {},
                      "name": "isBlockCoverage",
                      "required": true,
                      "spec": [
                        {
                          "text": "",
                          "type": "text"
                        }
                      ],
                      "type": {
                        "expression": "[boolean]",
                        "name": "boolean"
                      }
                    },
                    {
                      "alias": "ranges",
                      "async": false,
                      "comment": "",
                      "deprecated": false,
                      "kind": "property",
                      "langs": {},
                      "name": "ranges",
                      "required": true,
                      "spec": [
                        {
                          "text": "",
                          "type": "text"
                        }
                      ],
                      "type": {
                        "expression": "[Array]<[Object]>",
                        "name": "Array",
                        "templates": [
                          {
                            "name": "Object",
                            "properties": [
                              {
                                "alias": "count",
                                "async": false,
                                "comment": "",
                                "deprecated": false,
                                "kind": "property",
                                "langs": {},
                                "name": "count",
                                "required": true,
                                "spec": [
                                  {
                                    "text": "",
                                    "type": "text"
                                  }
                                ],
                                "type": {
                                  "expression": "[int]",
                                  "name": "int"
                                }
                              },
                              {
                                "alias": "startOffset",
                                "async": false,
                                "comment": "",
                                "deprecated": false,
                                "kind": "property",
                                "langs": {},
                                "name": "startOffset",
                                "required": true,
                                "spec": [
                                  {
                                    "text": "",
                                    "type": "text"
                                  }
                                ],
                                "type": {
                                  "expression": "[int]",
                                  "name": "int"
                                }
                              },
                              {
                                "alias": "endOffset",
                                "async": false,
                                "comment": "",
                                "deprecated": false,
                                "kind": "property",
                                "langs": {},
                                "name": "endOffset",
                                "required": true,
                                "spec": [
                                  {
                                    "text": "",
                                    "type": "text"
                                  }
                                ],
                                "type": {
                                  "expression": "[int]",
                                  "name": "int"
                                }
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    ]
  },
  {
    "expression": "[Array]<[JSHandle]>",
    "name": "Array",
    "templates": [
      {
        "name": "JSHandle"
      }
    ]
  },
  {
    "expression": "[Object]",
    "name": "Object",
    "properties": [
      {
        "alias": "url",
        "async": false,
        "comment": "URL of the resource.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "url",
        "required": true,
        "spec": [
          {
            "text": "URL of the resource.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "lineNumber",
        "async": false,
        "comment": "0-based line number in the resource.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "lineNumber",
        "required": true,
        "spec": [
          {
            "text": "0-based line number in the resource.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[int]",
          "name": "int"
        }
      },
      {
        "alias": "columnNumber",
        "async": false,
        "comment": "0-based column number in the resource.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "columnNumber",
        "required": true,
        "spec": [
          {
            "text": "0-based column number in the resource.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[int]",
          "name": "int"
        }
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[null]|[Readable]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Readable"
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[null]|[string]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "string"
      }
    ]
  },
  {
    "expression": "[null]|[path]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "path"
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[path]",
    "name": "path"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[ElectronApplication]",
    "name": "ElectronApplication"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "args",
        "async": false,
        "comment": "Additional arguments to pass to the application when launching. You typically pass the main script name here.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "args",
        "required": false,
        "spec": [
          {
            "text": "Additional arguments to pass to the application when launching. You typically pass the main script name here.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[string]>",
          "name": "Array",
          "templates": [
            {
              "name": "string"
            }
          ]
        }
      },
      {
        "alias": "cwd",
        "async": false,
        "comment": "Current working directory to launch application from.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "cwd",
        "required": false,
        "spec": [
          {
            "text": "Current working directory to launch application from.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "env",
        "async": false,
        "comment": "Specifies environment variables that will be visible to Electron. Defaults to `process.env`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "env",
        "required": false,
        "spec": [
          {
            "text": "Specifies environment variables that will be visible to Electron. Defaults to `process.env`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]<[string], [string]>",
          "name": "Object",
          "templates": [
            {
              "name": "string"
            },
            {
              "name": "string"
            }
          ]
        }
      },
      {
        "alias": "executablePath",
        "async": false,
        "comment": "Launches given Electron application. If not specified, launches the default Electron executable installed in this\npackage, located at `node_modules/.bin/electron`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "executablePath",
        "required": false,
        "spec": [
          {
            "text": "Launches given Electron application. If not specified, launches the default Electron executable installed in this package, located at `node_modules/.bin/electron`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[Page]",
    "name": "Page"
  },
  {
    "name": "void"
  },
  {
    "expression": "[BrowserContext]",
    "name": "BrowserContext"
  },
  {
    "expression": "[Serializable]",
    "name": "Serializable"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[EvaluationArgument]",
    "name": "EvaluationArgument"
  },
  {
    "expression": "[JSHandle]",
    "name": "JSHandle"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[EvaluationArgument]",
    "name": "EvaluationArgument"
  },
  {
    "expression": "[Page]",
    "name": "Page"
  },
  {
    "expression": "[any]",
    "name": "any"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[function]|[Object]",
    "name": "",
    "union": [
      {
        "name": "function"
      },
      {
        "name": "Object",
        "properties": [
          {
            "alias": "predicate",
            "async": false,
            "comment": "receives the event data and resolves to truthy value when the waiting should resolve.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "predicate",
            "required": true,
            "spec": [
              {
                "text": "receives the event data and resolves to truthy value when the waiting should resolve.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[function]",
              "name": "function"
            }
          },
          {
            "alias": "timeout",
            "async": false,
            "comment": "maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\nvalue can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "timeout",
            "required": false,
            "spec": [
              {
                "text": "maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[float]",
              "name": "float"
            }
          }
        ]
      }
    ]
  },
  {
    "expression": "[Array]<[Page]>",
    "name": "Array",
    "templates": [
      {
        "name": "Page"
      }
    ]
  },
  {
    "expression": "[null]|[Object]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Object",
        "properties": [
          {
            "alias": "x",
            "async": false,
            "comment": "the x coordinate of the element in pixels.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "x",
            "required": true,
            "spec": [
              {
                "text": "the x coordinate of the element in pixels.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[float]",
              "name": "float"
            }
          },
          {
            "alias": "y",
            "async": false,
            "comment": "the y coordinate of the element in pixels.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "y",
            "required": true,
            "spec": [
              {
                "text": "the y coordinate of the element in pixels.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[float]",
              "name": "float"
            }
          },
          {
            "alias": "width",
            "async": false,
            "comment": "the width of the element in pixels.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "width",
            "required": true,
            "spec": [
              {
                "text": "the width of the element in pixels.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[float]",
              "name": "float"
            }
          },
          {
            "alias": "height",
            "async": false,
            "comment": "the height of the element in pixels.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "height",
            "required": true,
            "spec": [
              {
                "text": "the height of the element in pixels.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[float]",
              "name": "float"
            }
          }
        ]
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "force",
        "async": false,
        "comment": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "force",
        "required": false,
        "spec": [
          {
            "text": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "button",
        "async": false,
        "comment": "Defaults to `left`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "button",
        "required": false,
        "spec": [
          {
            "text": "Defaults to `left`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[MouseButton]<\"left\"|\"right\"|\"middle\">",
          "name": "MouseButton",
          "union": [
            {
              "name": "\"left\""
            },
            {
              "name": "\"right\""
            },
            {
              "name": "\"middle\""
            }
          ]
        }
      },
      {
        "alias": "clickCount",
        "async": false,
        "comment": "defaults to 1. See [UIEvent.detail].",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "clickCount",
        "required": false,
        "spec": [
          {
            "text": "defaults to 1. See [UIEvent.detail].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[int]",
          "name": "int"
        }
      },
      {
        "alias": "delay",
        "async": false,
        "comment": "Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "delay",
        "required": false,
        "spec": [
          {
            "text": "Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "force",
        "async": false,
        "comment": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "force",
        "required": false,
        "spec": [
          {
            "text": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "modifiers",
        "async": false,
        "comment": "Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current\nmodifiers back. If not specified, currently pressed modifiers are used.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "modifiers",
        "required": false,
        "spec": [
          {
            "text": "Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[KeyboardModifier]<\"Alt\"|\"Control\"|\"Meta\"|\"Shift\">>",
          "name": "Array",
          "templates": [
            {
              "name": "KeyboardModifier",
              "union": [
                {
                  "name": "\"Alt\""
                },
                {
                  "name": "\"Control\""
                },
                {
                  "name": "\"Meta\""
                },
                {
                  "name": "\"Shift\""
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "position",
        "async": false,
        "comment": "A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the\nelement.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "position",
        "required": false,
        "spec": [
          {
            "text": "A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "x",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "x",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            },
            {
              "alias": "y",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "y",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            }
          ]
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[null]|[Frame]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Frame"
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "button",
        "async": false,
        "comment": "Defaults to `left`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "button",
        "required": false,
        "spec": [
          {
            "text": "Defaults to `left`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[MouseButton]<\"left\"|\"right\"|\"middle\">",
          "name": "MouseButton",
          "union": [
            {
              "name": "\"left\""
            },
            {
              "name": "\"right\""
            },
            {
              "name": "\"middle\""
            }
          ]
        }
      },
      {
        "alias": "delay",
        "async": false,
        "comment": "Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "delay",
        "required": false,
        "spec": [
          {
            "text": "Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "force",
        "async": false,
        "comment": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "force",
        "required": false,
        "spec": [
          {
            "text": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "modifiers",
        "async": false,
        "comment": "Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current\nmodifiers back. If not specified, currently pressed modifiers are used.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "modifiers",
        "required": false,
        "spec": [
          {
            "text": "Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[KeyboardModifier]<\"Alt\"|\"Control\"|\"Meta\"|\"Shift\">>",
          "name": "Array",
          "templates": [
            {
              "name": "KeyboardModifier",
              "union": [
                {
                  "name": "\"Alt\""
                },
                {
                  "name": "\"Control\""
                },
                {
                  "name": "\"Meta\""
                },
                {
                  "name": "\"Shift\""
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "position",
        "async": false,
        "comment": "A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the\nelement.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "position",
        "required": false,
        "spec": [
          {
            "text": "A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "x",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "x",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            },
            {
              "alias": "y",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "y",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            }
          ]
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[EvaluationArgument]",
    "name": "EvaluationArgument"
  },
  {
    "expression": "[Serializable]",
    "name": "Serializable"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[EvaluationArgument]",
    "name": "EvaluationArgument"
  },
  {
    "expression": "[Serializable]",
    "name": "Serializable"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[EvaluationArgument]",
    "name": "EvaluationArgument"
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[null]|[string]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "string"
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "void"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "force",
        "async": false,
        "comment": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "force",
        "required": false,
        "spec": [
          {
            "text": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "modifiers",
        "async": false,
        "comment": "Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current\nmodifiers back. If not specified, currently pressed modifiers are used.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "modifiers",
        "required": false,
        "spec": [
          {
            "text": "Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[KeyboardModifier]<\"Alt\"|\"Control\"|\"Meta\"|\"Shift\">>",
          "name": "Array",
          "templates": [
            {
              "name": "KeyboardModifier",
              "union": [
                {
                  "name": "\"Alt\""
                },
                {
                  "name": "\"Control\""
                },
                {
                  "name": "\"Meta\""
                },
                {
                  "name": "\"Shift\""
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "position",
        "async": false,
        "comment": "A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the\nelement.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "position",
        "required": false,
        "spec": [
          {
            "text": "A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "x",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "x",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            },
            {
              "alias": "y",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "y",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            }
          ]
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[null]|[Frame]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Frame"
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "delay",
        "async": false,
        "comment": "Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "delay",
        "required": false,
        "spec": [
          {
            "text": "Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[null]|[ElementHandle]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "ElementHandle"
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[Array]<[ElementHandle]>",
    "name": "Array",
    "templates": [
      {
        "name": "ElementHandle"
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[Buffer]",
    "name": "Buffer"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "omitBackground",
        "async": false,
        "comment": "Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images.\nDefaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "omitBackground",
        "required": false,
        "spec": [
          {
            "text": "Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "path",
        "async": false,
        "comment": "The file path to save the image to. The screenshot type will be inferred from file extension. If `path` is a relative\npath, then it is resolved relative to the current working directory. If no path is provided, the image won't be saved to\nthe disk.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "path",
        "required": false,
        "spec": [
          {
            "text": "The file path to save the image to. The screenshot type will be inferred from file extension. If `path` is a relative path, then it is resolved relative to the current working directory. If no path is provided, the image won't be saved to the disk.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "quality",
        "async": false,
        "comment": "The quality of the image, between 0-100. Not applicable to `png` images.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "quality",
        "required": false,
        "spec": [
          {
            "text": "The quality of the image, between 0-100. Not applicable to `png` images.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[int]",
          "name": "int"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "type",
        "async": false,
        "comment": "Specify screenshot type, defaults to `png`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "type",
        "required": false,
        "spec": [
          {
            "text": "Specify screenshot type, defaults to `png`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[ScreenshotType]<\"png\"|\"jpeg\">",
          "name": "ScreenshotType",
          "union": [
            {
              "name": "\"png\""
            },
            {
              "name": "\"jpeg\""
            }
          ]
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Array]<[string]>",
    "name": "Array",
    "templates": [
      {
        "name": "string"
      }
    ]
  },
  {
    "expression": "[null]|[string]|[ElementHandle]|[Array]<[string]>|[Object]|[Array]<[ElementHandle]>|[Array]<[Object]>",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "string"
      },
      {
        "name": "ElementHandle"
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "string"
          }
        ]
      },
      {
        "name": "Object",
        "properties": [
          {
            "alias": "value",
            "async": false,
            "comment": "Matches by `option.value`. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "value",
            "required": false,
            "spec": [
              {
                "text": "Matches by `option.value`. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "label",
            "async": false,
            "comment": "Matches by `option.label`. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "label",
            "required": false,
            "spec": [
              {
                "text": "Matches by `option.label`. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "index",
            "async": false,
            "comment": "Matches by the index. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "index",
            "required": false,
            "spec": [
              {
                "text": "Matches by the index. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[int]",
              "name": "int"
            }
          }
        ]
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "ElementHandle"
          }
        ]
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "Object",
            "properties": [
              {
                "alias": "value",
                "async": false,
                "comment": "Matches by `option.value`. Optional.",
                "deprecated": false,
                "kind": "property",
                "langs": {},
                "name": "value",
                "required": false,
                "spec": [
                  {
                    "text": "Matches by `option.value`. Optional.",
                    "type": "text"
                  }
                ],
                "type": {
                  "expression": "[string]",
                  "name": "string"
                }
              },
              {
                "alias": "label",
                "async": false,
                "comment": "Matches by `option.label`. Optional.",
                "deprecated": false,
                "kind": "property",
                "langs": {},
                "name": "label",
                "required": false,
                "spec": [
                  {
                    "text": "Matches by `option.label`. Optional.",
                    "type": "text"
                  }
                ],
                "type": {
                  "expression": "[string]",
                  "name": "string"
                }
              },
              {
                "alias": "index",
                "async": false,
                "comment": "Matches by the index. Optional.",
                "deprecated": false,
                "kind": "property",
                "langs": {},
                "name": "index",
                "required": false,
                "spec": [
                  {
                    "text": "Matches by the index. Optional.",
                    "type": "text"
                  }
                ],
                "type": {
                  "expression": "[int]",
                  "name": "int"
                }
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Array]<[Object]>",
    "name": "Array",
    "templates": [
      {
        "name": "Object",
        "properties": [
          {
            "alias": "value",
            "async": false,
            "comment": "Matches by `option.value`. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "value",
            "required": false,
            "spec": [
              {
                "text": "Matches by `option.value`. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "label",
            "async": false,
            "comment": "Matches by `option.label`. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "label",
            "required": false,
            "spec": [
              {
                "text": "Matches by `option.label`. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "index",
            "async": false,
            "comment": "Matches by the index. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "index",
            "required": false,
            "spec": [
              {
                "text": "Matches by the index. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[int]",
              "name": "int"
            }
          }
        ]
      }
    ]
  },
  {
    "expression": "[ElementHandle]|[Array]<[ElementHandle]>",
    "name": "",
    "union": [
      {
        "name": "ElementHandle"
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "ElementHandle"
          }
        ]
      }
    ]
  },
  {
    "expression": "[int]|[Array]<[int]>",
    "name": "",
    "union": [
      {
        "name": "int"
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "int"
          }
        ]
      }
    ]
  },
  {
    "expression": "[string]|[Array]<[string]>",
    "name": "",
    "union": [
      {
        "name": "string"
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "string"
          }
        ]
      }
    ]
  },
  {
    "expression": "[string]|[Array]<[string]>",
    "name": "",
    "union": [
      {
        "name": "string"
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "string"
          }
        ]
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[path]|[Array]<[path]>|[Object]|[Array]<[Object]>",
    "name": "",
    "union": [
      {
        "name": "path"
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "path"
          }
        ]
      },
      {
        "name": "Object",
        "properties": [
          {
            "alias": "name",
            "async": false,
            "comment": "File name",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "name",
            "required": true,
            "spec": [
              {
                "text": "File name",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "mimeType",
            "async": false,
            "comment": "File type",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "mimeType",
            "required": true,
            "spec": [
              {
                "text": "File type",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "buffer",
            "async": false,
            "comment": "File content",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "buffer",
            "required": true,
            "spec": [
              {
                "text": "File content",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[Buffer]",
              "name": "Buffer"
            }
          }
        ]
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "Object",
            "properties": [
              {
                "alias": "name",
                "async": false,
                "comment": "File name",
                "deprecated": false,
                "kind": "property",
                "langs": {},
                "name": "name",
                "required": true,
                "spec": [
                  {
                    "text": "File name",
                    "type": "text"
                  }
                ],
                "type": {
                  "expression": "[string]",
                  "name": "string"
                }
              },
              {
                "alias": "mimeType",
                "async": false,
                "comment": "File type",
                "deprecated": false,
                "kind": "property",
                "langs": {},
                "name": "mimeType",
                "required": true,
                "spec": [
                  {
                    "text": "File type",
                    "type": "text"
                  }
                ],
                "type": {
                  "expression": "[string]",
                  "name": "string"
                }
              },
              {
                "alias": "buffer",
                "async": false,
                "comment": "File content",
                "deprecated": false,
                "kind": "property",
                "langs": {},
                "name": "buffer",
                "required": true,
                "spec": [
                  {
                    "text": "File content",
                    "type": "text"
                  }
                ],
                "type": {
                  "expression": "[Buffer]",
                  "name": "Buffer"
                }
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "force",
        "async": false,
        "comment": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "force",
        "required": false,
        "spec": [
          {
            "text": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "modifiers",
        "async": false,
        "comment": "Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current\nmodifiers back. If not specified, currently pressed modifiers are used.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "modifiers",
        "required": false,
        "spec": [
          {
            "text": "Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[KeyboardModifier]<\"Alt\"|\"Control\"|\"Meta\"|\"Shift\">>",
          "name": "Array",
          "templates": [
            {
              "name": "KeyboardModifier",
              "union": [
                {
                  "name": "\"Alt\""
                },
                {
                  "name": "\"Control\""
                },
                {
                  "name": "\"Meta\""
                },
                {
                  "name": "\"Shift\""
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "position",
        "async": false,
        "comment": "A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the\nelement.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "position",
        "required": false,
        "spec": [
          {
            "text": "A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "x",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "x",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            },
            {
              "alias": "y",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "y",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            }
          ]
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[null]|[string]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "string"
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "delay",
        "async": false,
        "comment": "Time to wait between key presses in milliseconds. Defaults to 0.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "delay",
        "required": false,
        "spec": [
          {
            "text": "Time to wait between key presses in milliseconds. Defaults to 0.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "force",
        "async": false,
        "comment": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "force",
        "required": false,
        "spec": [
          {
            "text": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[ElementState]<\"visible\"|\"hidden\"|\"stable\"|\"enabled\"|\"disabled\"|\"editable\">",
    "name": "ElementState",
    "union": [
      {
        "name": "\"visible\""
      },
      {
        "name": "\"hidden\""
      },
      {
        "name": "\"stable\""
      },
      {
        "name": "\"enabled\""
      },
      {
        "name": "\"disabled\""
      },
      {
        "name": "\"editable\""
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[null]|[ElementHandle]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "ElementHandle"
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "state",
        "async": false,
        "comment": "Defaults to `'visible'`. Can be either:\n- `'attached'` - wait for element to be present in DOM.\n- `'detached'` - wait for element to not be present in DOM.\n- `'visible'` - wait for element to have non-empty bounding box and no `visibility:hidden`. Note that element without\n  any content or with `display:none` has an empty bounding box and is not considered visible.\n- `'hidden'` - wait for element to be either detached from DOM, or have an empty bounding box or `visibility:hidden`.\n  This is opposite to the `'visible'` option.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "state",
        "required": false,
        "spec": [
          {
            "text": "Defaults to `'visible'`. Can be either:",
            "type": "text"
          },
          {
            "liType": "bullet",
            "text": "`'attached'` - wait for element to be present in DOM.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'detached'` - wait for element to not be present in DOM.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'visible'` - wait for element to have non-empty bounding box and no `visibility:hidden`. Note that element without any content or with `display:none` has an empty bounding box and is not considered visible.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'hidden'` - wait for element to be either detached from DOM, or have an empty bounding box or `visibility:hidden`. This is opposite to the `'visible'` option.",
            "type": "li"
          }
        ],
        "type": {
          "expression": "[WaitForSelectorState]<\"attached\"|\"detached\"|\"visible\"|\"hidden\">",
          "name": "WaitForSelectorState",
          "union": [
            {
              "name": "\"attached\""
            },
            {
              "name": "\"detached\""
            },
            {
              "name": "\"visible\""
            },
            {
              "name": "\"hidden\""
            }
          ]
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[ElementHandle]",
    "name": "ElementHandle"
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[Page]",
    "name": "Page"
  },
  {
    "name": "void"
  },
  {
    "expression": "[path]|[Array]<[path]>|[Object]|[Array]<[Object]>",
    "name": "",
    "union": [
      {
        "name": "path"
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "path"
          }
        ]
      },
      {
        "name": "Object",
        "properties": [
          {
            "alias": "name",
            "async": false,
            "comment": "File name",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "name",
            "required": true,
            "spec": [
              {
                "text": "File name",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "mimeType",
            "async": false,
            "comment": "File type",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "mimeType",
            "required": true,
            "spec": [
              {
                "text": "File type",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "buffer",
            "async": false,
            "comment": "File content",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "buffer",
            "required": true,
            "spec": [
              {
                "text": "File content",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[Buffer]",
              "name": "Buffer"
            }
          }
        ]
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "Object",
            "properties": [
              {
                "alias": "name",
                "async": false,
                "comment": "File name",
                "deprecated": false,
                "kind": "property",
                "langs": {},
                "name": "name",
                "required": true,
                "spec": [
                  {
                    "text": "File name",
                    "type": "text"
                  }
                ],
                "type": {
                  "expression": "[string]",
                  "name": "string"
                }
              },
              {
                "alias": "mimeType",
                "async": false,
                "comment": "File type",
                "deprecated": false,
                "kind": "property",
                "langs": {},
                "name": "mimeType",
                "required": true,
                "spec": [
                  {
                    "text": "File type",
                    "type": "text"
                  }
                ],
                "type": {
                  "expression": "[string]",
                  "name": "string"
                }
              },
              {
                "alias": "buffer",
                "async": false,
                "comment": "File content",
                "deprecated": false,
                "kind": "property",
                "langs": {},
                "name": "buffer",
                "required": true,
                "spec": [
                  {
                    "text": "File content",
                    "type": "text"
                  }
                ],
                "type": {
                  "expression": "[Buffer]",
                  "name": "Buffer"
                }
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[ElementHandle]",
    "name": "ElementHandle"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "content",
        "async": false,
        "comment": "Raw JavaScript content to be injected into frame.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "content",
        "required": false,
        "spec": [
          {
            "text": "Raw JavaScript content to be injected into frame.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "path",
        "async": false,
        "comment": "Path to the JavaScript file to be injected into frame. If `path` is a relative path, then it is resolved relative to the\ncurrent working directory.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "path",
        "required": false,
        "spec": [
          {
            "text": "Path to the JavaScript file to be injected into frame. If `path` is a relative path, then it is resolved relative to the current working directory.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "type",
        "async": false,
        "comment": "Script type. Use 'module' in order to load a Javascript ES6 module. See\n[script](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script) for more details.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "type",
        "required": false,
        "spec": [
          {
            "text": "Script type. Use 'module' in order to load a Javascript ES6 module. See [script](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script) for more details.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "url",
        "async": false,
        "comment": "URL of a script to be added.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "url",
        "required": false,
        "spec": [
          {
            "text": "URL of a script to be added.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      }
    ]
  },
  {
    "expression": "[ElementHandle]",
    "name": "ElementHandle"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "content",
        "async": false,
        "comment": "Raw CSS content to be injected into frame.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "content",
        "required": false,
        "spec": [
          {
            "text": "Raw CSS content to be injected into frame.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "path",
        "async": false,
        "comment": "Path to the CSS file to be injected into frame. If `path` is a relative path, then it is resolved relative to the\ncurrent working directory.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "path",
        "required": false,
        "spec": [
          {
            "text": "Path to the CSS file to be injected into frame. If `path` is a relative path, then it is resolved relative to the current working directory.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "url",
        "async": false,
        "comment": "URL of the `<link>` tag.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "url",
        "required": false,
        "spec": [
          {
            "text": "URL of the `<link>` tag.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "force",
        "async": false,
        "comment": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "force",
        "required": false,
        "spec": [
          {
            "text": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Array]<[Frame]>",
    "name": "Array",
    "templates": [
      {
        "name": "Frame"
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "button",
        "async": false,
        "comment": "Defaults to `left`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "button",
        "required": false,
        "spec": [
          {
            "text": "Defaults to `left`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[MouseButton]<\"left\"|\"right\"|\"middle\">",
          "name": "MouseButton",
          "union": [
            {
              "name": "\"left\""
            },
            {
              "name": "\"right\""
            },
            {
              "name": "\"middle\""
            }
          ]
        }
      },
      {
        "alias": "clickCount",
        "async": false,
        "comment": "defaults to 1. See [UIEvent.detail].",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "clickCount",
        "required": false,
        "spec": [
          {
            "text": "defaults to 1. See [UIEvent.detail].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[int]",
          "name": "int"
        }
      },
      {
        "alias": "delay",
        "async": false,
        "comment": "Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "delay",
        "required": false,
        "spec": [
          {
            "text": "Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "force",
        "async": false,
        "comment": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "force",
        "required": false,
        "spec": [
          {
            "text": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "modifiers",
        "async": false,
        "comment": "Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current\nmodifiers back. If not specified, currently pressed modifiers are used.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "modifiers",
        "required": false,
        "spec": [
          {
            "text": "Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[KeyboardModifier]<\"Alt\"|\"Control\"|\"Meta\"|\"Shift\">>",
          "name": "Array",
          "templates": [
            {
              "name": "KeyboardModifier",
              "union": [
                {
                  "name": "\"Alt\""
                },
                {
                  "name": "\"Control\""
                },
                {
                  "name": "\"Meta\""
                },
                {
                  "name": "\"Shift\""
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "position",
        "async": false,
        "comment": "A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the\nelement.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "position",
        "required": false,
        "spec": [
          {
            "text": "A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "x",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "x",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            },
            {
              "alias": "y",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "y",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            }
          ]
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "button",
        "async": false,
        "comment": "Defaults to `left`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "button",
        "required": false,
        "spec": [
          {
            "text": "Defaults to `left`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[MouseButton]<\"left\"|\"right\"|\"middle\">",
          "name": "MouseButton",
          "union": [
            {
              "name": "\"left\""
            },
            {
              "name": "\"right\""
            },
            {
              "name": "\"middle\""
            }
          ]
        }
      },
      {
        "alias": "delay",
        "async": false,
        "comment": "Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "delay",
        "required": false,
        "spec": [
          {
            "text": "Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "force",
        "async": false,
        "comment": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "force",
        "required": false,
        "spec": [
          {
            "text": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "modifiers",
        "async": false,
        "comment": "Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current\nmodifiers back. If not specified, currently pressed modifiers are used.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "modifiers",
        "required": false,
        "spec": [
          {
            "text": "Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[KeyboardModifier]<\"Alt\"|\"Control\"|\"Meta\"|\"Shift\">>",
          "name": "Array",
          "templates": [
            {
              "name": "KeyboardModifier",
              "union": [
                {
                  "name": "\"Alt\""
                },
                {
                  "name": "\"Control\""
                },
                {
                  "name": "\"Meta\""
                },
                {
                  "name": "\"Shift\""
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "position",
        "async": false,
        "comment": "A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the\nelement.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "position",
        "required": false,
        "spec": [
          {
            "text": "A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "x",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "x",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            },
            {
              "alias": "y",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "y",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            }
          ]
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[EvaluationArgument]",
    "name": "EvaluationArgument"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Serializable]",
    "name": "Serializable"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[EvaluationArgument]",
    "name": "EvaluationArgument"
  },
  {
    "expression": "[Serializable]",
    "name": "Serializable"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[EvaluationArgument]",
    "name": "EvaluationArgument"
  },
  {
    "expression": "[Serializable]",
    "name": "Serializable"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[EvaluationArgument]",
    "name": "EvaluationArgument"
  },
  {
    "expression": "[JSHandle]",
    "name": "JSHandle"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[EvaluationArgument]",
    "name": "EvaluationArgument"
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[ElementHandle]",
    "name": "ElementHandle"
  },
  {
    "expression": "[null]|[string]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "string"
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[null]|[Response]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Response"
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "referer",
        "async": false,
        "comment": "Referer header value. If provided it will take preference over the referer header value set by\n[`method: Page.setExtraHTTPHeaders`].",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "referer",
        "required": false,
        "spec": [
          {
            "text": "Referer header value. If provided it will take preference over the referer header value set by [`method: Page.setExtraHTTPHeaders`].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be\nchanged by using the [`method: BrowserContext.setDefaultNavigationTimeout`],\n[`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or\n[`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultNavigationTimeout`], [`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "waitUntil",
        "async": false,
        "comment": "When to consider operation succeeded, defaults to `load`. Events can be either:\n- `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.\n- `'load'` - consider operation to be finished when the `load` event is fired.\n- `'networkidle'` - consider operation to be finished when there are no network connections for at least `500` ms.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "waitUntil",
        "required": false,
        "spec": [
          {
            "text": "When to consider operation succeeded, defaults to `load`. Events can be either:",
            "type": "text"
          },
          {
            "liType": "bullet",
            "text": "`'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'load'` - consider operation to be finished when the `load` event is fired.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'networkidle'` - consider operation to be finished when there are no network connections for at least `500` ms.",
            "type": "li"
          }
        ],
        "type": {
          "expression": "[WaitUntilState]<\"load\"|\"domcontentloaded\"|\"networkidle\">",
          "name": "WaitUntilState",
          "union": [
            {
              "name": "\"load\""
            },
            {
              "name": "\"domcontentloaded\""
            },
            {
              "name": "\"networkidle\""
            }
          ]
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "force",
        "async": false,
        "comment": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "force",
        "required": false,
        "spec": [
          {
            "text": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "modifiers",
        "async": false,
        "comment": "Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current\nmodifiers back. If not specified, currently pressed modifiers are used.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "modifiers",
        "required": false,
        "spec": [
          {
            "text": "Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[KeyboardModifier]<\"Alt\"|\"Control\"|\"Meta\"|\"Shift\">>",
          "name": "Array",
          "templates": [
            {
              "name": "KeyboardModifier",
              "union": [
                {
                  "name": "\"Alt\""
                },
                {
                  "name": "\"Control\""
                },
                {
                  "name": "\"Meta\""
                },
                {
                  "name": "\"Shift\""
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "position",
        "async": false,
        "comment": "A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the\nelement.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "position",
        "required": false,
        "spec": [
          {
            "text": "A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "x",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "x",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            },
            {
              "alias": "y",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "y",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            }
          ]
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[Page]",
    "name": "Page"
  },
  {
    "expression": "[null]|[Frame]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Frame"
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "delay",
        "async": false,
        "comment": "Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "delay",
        "required": false,
        "spec": [
          {
            "text": "Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[null]|[ElementHandle]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "ElementHandle"
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[Array]<[ElementHandle]>",
    "name": "Array",
    "templates": [
      {
        "name": "ElementHandle"
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[Array]<[string]>",
    "name": "Array",
    "templates": [
      {
        "name": "string"
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[null]|[string]|[ElementHandle]|[Array]<[string]>|[Object]|[Array]<[ElementHandle]>|[Array]<[Object]>",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "string"
      },
      {
        "name": "ElementHandle"
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "string"
          }
        ]
      },
      {
        "name": "Object",
        "properties": [
          {
            "alias": "value",
            "async": false,
            "comment": "Matches by `option.value`. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "value",
            "required": false,
            "spec": [
              {
                "text": "Matches by `option.value`. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "label",
            "async": false,
            "comment": "Matches by `option.label`. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "label",
            "required": false,
            "spec": [
              {
                "text": "Matches by `option.label`. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "index",
            "async": false,
            "comment": "Matches by the index. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "index",
            "required": false,
            "spec": [
              {
                "text": "Matches by the index. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[int]",
              "name": "int"
            }
          }
        ]
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "ElementHandle"
          }
        ]
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "Object",
            "properties": [
              {
                "alias": "value",
                "async": false,
                "comment": "Matches by `option.value`. Optional.",
                "deprecated": false,
                "kind": "property",
                "langs": {},
                "name": "value",
                "required": false,
                "spec": [
                  {
                    "text": "Matches by `option.value`. Optional.",
                    "type": "text"
                  }
                ],
                "type": {
                  "expression": "[string]",
                  "name": "string"
                }
              },
              {
                "alias": "label",
                "async": false,
                "comment": "Matches by `option.label`. Optional.",
                "deprecated": false,
                "kind": "property",
                "langs": {},
                "name": "label",
                "required": false,
                "spec": [
                  {
                    "text": "Matches by `option.label`. Optional.",
                    "type": "text"
                  }
                ],
                "type": {
                  "expression": "[string]",
                  "name": "string"
                }
              },
              {
                "alias": "index",
                "async": false,
                "comment": "Matches by the index. Optional.",
                "deprecated": false,
                "kind": "property",
                "langs": {},
                "name": "index",
                "required": false,
                "spec": [
                  {
                    "text": "Matches by the index. Optional.",
                    "type": "text"
                  }
                ],
                "type": {
                  "expression": "[int]",
                  "name": "int"
                }
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Array]<[Object]>",
    "name": "Array",
    "templates": [
      {
        "name": "Object",
        "properties": [
          {
            "alias": "value",
            "async": false,
            "comment": "Matches by `option.value`. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "value",
            "required": false,
            "spec": [
              {
                "text": "Matches by `option.value`. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "label",
            "async": false,
            "comment": "Matches by `option.label`. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "label",
            "required": false,
            "spec": [
              {
                "text": "Matches by `option.label`. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "index",
            "async": false,
            "comment": "Matches by the index. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "index",
            "required": false,
            "spec": [
              {
                "text": "Matches by the index. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[int]",
              "name": "int"
            }
          }
        ]
      }
    ]
  },
  {
    "expression": "[ElementHandle]|[Array]<[ElementHandle]>",
    "name": "",
    "union": [
      {
        "name": "ElementHandle"
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "ElementHandle"
          }
        ]
      }
    ]
  },
  {
    "expression": "[int]|[Array]<[int]>",
    "name": "",
    "union": [
      {
        "name": "int"
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "int"
          }
        ]
      }
    ]
  },
  {
    "expression": "[string]|[Array]<[string]>",
    "name": "",
    "union": [
      {
        "name": "string"
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "string"
          }
        ]
      }
    ]
  },
  {
    "expression": "[string]|[Array]<[string]>",
    "name": "",
    "union": [
      {
        "name": "string"
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "string"
          }
        ]
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be\nchanged by using the [`method: BrowserContext.setDefaultNavigationTimeout`],\n[`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or\n[`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultNavigationTimeout`], [`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "waitUntil",
        "async": false,
        "comment": "When to consider operation succeeded, defaults to `load`. Events can be either:\n- `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.\n- `'load'` - consider operation to be finished when the `load` event is fired.\n- `'networkidle'` - consider operation to be finished when there are no network connections for at least `500` ms.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "waitUntil",
        "required": false,
        "spec": [
          {
            "text": "When to consider operation succeeded, defaults to `load`. Events can be either:",
            "type": "text"
          },
          {
            "liType": "bullet",
            "text": "`'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'load'` - consider operation to be finished when the `load` event is fired.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'networkidle'` - consider operation to be finished when there are no network connections for at least `500` ms.",
            "type": "li"
          }
        ],
        "type": {
          "expression": "[WaitUntilState]<\"load\"|\"domcontentloaded\"|\"networkidle\">",
          "name": "WaitUntilState",
          "union": [
            {
              "name": "\"load\""
            },
            {
              "name": "\"domcontentloaded\""
            },
            {
              "name": "\"networkidle\""
            }
          ]
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[path]|[Array]<[path]>|[Object]|[Array]<[Object]>",
    "name": "",
    "union": [
      {
        "name": "path"
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "path"
          }
        ]
      },
      {
        "name": "Object",
        "properties": [
          {
            "alias": "name",
            "async": false,
            "comment": "File name",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "name",
            "required": true,
            "spec": [
              {
                "text": "File name",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "mimeType",
            "async": false,
            "comment": "File type",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "mimeType",
            "required": true,
            "spec": [
              {
                "text": "File type",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "buffer",
            "async": false,
            "comment": "File content",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "buffer",
            "required": true,
            "spec": [
              {
                "text": "File content",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[Buffer]",
              "name": "Buffer"
            }
          }
        ]
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "Object",
            "properties": [
              {
                "alias": "name",
                "async": false,
                "comment": "File name",
                "deprecated": false,
                "kind": "property",
                "langs": {},
                "name": "name",
                "required": true,
                "spec": [
                  {
                    "text": "File name",
                    "type": "text"
                  }
                ],
                "type": {
                  "expression": "[string]",
                  "name": "string"
                }
              },
              {
                "alias": "mimeType",
                "async": false,
                "comment": "File type",
                "deprecated": false,
                "kind": "property",
                "langs": {},
                "name": "mimeType",
                "required": true,
                "spec": [
                  {
                    "text": "File type",
                    "type": "text"
                  }
                ],
                "type": {
                  "expression": "[string]",
                  "name": "string"
                }
              },
              {
                "alias": "buffer",
                "async": false,
                "comment": "File content",
                "deprecated": false,
                "kind": "property",
                "langs": {},
                "name": "buffer",
                "required": true,
                "spec": [
                  {
                    "text": "File content",
                    "type": "text"
                  }
                ],
                "type": {
                  "expression": "[Buffer]",
                  "name": "Buffer"
                }
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "force",
        "async": false,
        "comment": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "force",
        "required": false,
        "spec": [
          {
            "text": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "modifiers",
        "async": false,
        "comment": "Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current\nmodifiers back. If not specified, currently pressed modifiers are used.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "modifiers",
        "required": false,
        "spec": [
          {
            "text": "Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[KeyboardModifier]<\"Alt\"|\"Control\"|\"Meta\"|\"Shift\">>",
          "name": "Array",
          "templates": [
            {
              "name": "KeyboardModifier",
              "union": [
                {
                  "name": "\"Alt\""
                },
                {
                  "name": "\"Control\""
                },
                {
                  "name": "\"Meta\""
                },
                {
                  "name": "\"Shift\""
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "position",
        "async": false,
        "comment": "A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the\nelement.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "position",
        "required": false,
        "spec": [
          {
            "text": "A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "x",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "x",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            },
            {
              "alias": "y",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "y",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            }
          ]
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[null]|[string]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "string"
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "delay",
        "async": false,
        "comment": "Time to wait between key presses in milliseconds. Defaults to 0.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "delay",
        "required": false,
        "spec": [
          {
            "text": "Time to wait between key presses in milliseconds. Defaults to 0.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "force",
        "async": false,
        "comment": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "force",
        "required": false,
        "spec": [
          {
            "text": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[JSHandle]",
    "name": "JSHandle"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[EvaluationArgument]",
    "name": "EvaluationArgument"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "polling",
        "async": false,
        "comment": "If `polling` is `'raf'`, then `expression` is constantly executed in `requestAnimationFrame` callback. If `polling` is a\nnumber, then it is treated as an interval in milliseconds at which the function would be executed. Defaults to `raf`.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "polling",
        "required": false,
        "spec": [
          {
            "text": "If `polling` is `'raf'`, then `expression` is constantly executed in `requestAnimationFrame` callback. If `polling` is a number, then it is treated as an interval in milliseconds at which the function would be executed. Defaults to `raf`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]|\"raf\"",
          "name": "",
          "union": [
            {
              "name": "float"
            },
            {
              "name": "\"raf\""
            }
          ]
        }
      },
      {
        "alias": "pollingInterval",
        "async": false,
        "comment": "If specified, then it is treated as an interval in milliseconds at which the function would be executed. By default if\nthe option is not specified `expression` is executed in `requestAnimationFrame` callback.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "pollingInterval",
        "required": false,
        "spec": [
          {
            "text": "If specified, then it is treated as an interval in milliseconds at which the function would be executed. By default if the option is not specified `expression` is executed in `requestAnimationFrame` callback.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\nvalue can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[LoadState]<\"load\"|\"domcontentloaded\"|\"networkidle\">",
    "name": "LoadState",
    "union": [
      {
        "name": "\"load\""
      },
      {
        "name": "\"domcontentloaded\""
      },
      {
        "name": "\"networkidle\""
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be\nchanged by using the [`method: BrowserContext.setDefaultNavigationTimeout`],\n[`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or\n[`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultNavigationTimeout`], [`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[null]|[Response]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Response"
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be\nchanged by using the [`method: BrowserContext.setDefaultNavigationTimeout`],\n[`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or\n[`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultNavigationTimeout`], [`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "url",
        "async": false,
        "comment": "A glob pattern, regex pattern or predicate receiving [URL] to match while waiting for the navigation.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "url",
        "required": false,
        "spec": [
          {
            "text": "A glob pattern, regex pattern or predicate receiving [URL] to match while waiting for the navigation.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]|[RegExp]|[function]([URL]):[boolean]",
          "name": "",
          "union": [
            {
              "name": "string"
            },
            {
              "name": "RegExp"
            },
            {
              "args": [
                {
                  "name": "URL"
                }
              ],
              "name": "function",
              "returnType": {
                "name": "boolean"
              }
            }
          ]
        }
      },
      {
        "alias": "waitUntil",
        "async": false,
        "comment": "When to consider operation succeeded, defaults to `load`. Events can be either:\n- `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.\n- `'load'` - consider operation to be finished when the `load` event is fired.\n- `'networkidle'` - consider operation to be finished when there are no network connections for at least `500` ms.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "waitUntil",
        "required": false,
        "spec": [
          {
            "text": "When to consider operation succeeded, defaults to `load`. Events can be either:",
            "type": "text"
          },
          {
            "liType": "bullet",
            "text": "`'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'load'` - consider operation to be finished when the `load` event is fired.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'networkidle'` - consider operation to be finished when there are no network connections for at least `500` ms.",
            "type": "li"
          }
        ],
        "type": {
          "expression": "[WaitUntilState]<\"load\"|\"domcontentloaded\"|\"networkidle\">",
          "name": "WaitUntilState",
          "union": [
            {
              "name": "\"load\""
            },
            {
              "name": "\"domcontentloaded\""
            },
            {
              "name": "\"networkidle\""
            }
          ]
        }
      }
    ]
  },
  {
    "expression": "[Runnable]",
    "name": "Runnable"
  },
  {
    "expression": "[null]|[ElementHandle]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "ElementHandle"
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "state",
        "async": false,
        "comment": "Defaults to `'visible'`. Can be either:\n- `'attached'` - wait for element to be present in DOM.\n- `'detached'` - wait for element to not be present in DOM.\n- `'visible'` - wait for element to have non-empty bounding box and no `visibility:hidden`. Note that element without\n  any content or with `display:none` has an empty bounding box and is not considered visible.\n- `'hidden'` - wait for element to be either detached from DOM, or have an empty bounding box or `visibility:hidden`.\n  This is opposite to the `'visible'` option.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "state",
        "required": false,
        "spec": [
          {
            "text": "Defaults to `'visible'`. Can be either:",
            "type": "text"
          },
          {
            "liType": "bullet",
            "text": "`'attached'` - wait for element to be present in DOM.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'detached'` - wait for element to not be present in DOM.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'visible'` - wait for element to have non-empty bounding box and no `visibility:hidden`. Note that element without any content or with `display:none` has an empty bounding box and is not considered visible.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'hidden'` - wait for element to be either detached from DOM, or have an empty bounding box or `visibility:hidden`. This is opposite to the `'visible'` option.",
            "type": "li"
          }
        ],
        "type": {
          "expression": "[WaitForSelectorState]<\"attached\"|\"detached\"|\"visible\"|\"hidden\">",
          "name": "WaitForSelectorState",
          "union": [
            {
              "name": "\"attached\""
            },
            {
              "name": "\"detached\""
            },
            {
              "name": "\"visible\""
            },
            {
              "name": "\"hidden\""
            }
          ]
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[float]",
    "name": "float"
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]|[RegExp]|[function]([URL]):[boolean]",
    "name": "",
    "union": [
      {
        "name": "string"
      },
      {
        "name": "RegExp"
      },
      {
        "args": [
          {
            "name": "URL"
          }
        ],
        "name": "function",
        "returnType": {
          "name": "boolean"
        }
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be\nchanged by using the [`method: BrowserContext.setDefaultNavigationTimeout`],\n[`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or\n[`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultNavigationTimeout`], [`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "waitUntil",
        "async": false,
        "comment": "When to consider operation succeeded, defaults to `load`. Events can be either:\n- `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.\n- `'load'` - consider operation to be finished when the `load` event is fired.\n- `'networkidle'` - consider operation to be finished when there are no network connections for at least `500` ms.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "waitUntil",
        "required": false,
        "spec": [
          {
            "text": "When to consider operation succeeded, defaults to `load`. Events can be either:",
            "type": "text"
          },
          {
            "liType": "bullet",
            "text": "`'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'load'` - consider operation to be finished when the `load` event is fired.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'networkidle'` - consider operation to be finished when there are no network connections for at least `500` ms.",
            "type": "li"
          }
        ],
        "type": {
          "expression": "[WaitUntilState]<\"load\"|\"domcontentloaded\"|\"networkidle\">",
          "name": "WaitUntilState",
          "union": [
            {
              "name": "\"load\""
            },
            {
              "name": "\"domcontentloaded\""
            },
            {
              "name": "\"networkidle\""
            }
          ]
        }
      }
    ]
  },
  {
    "expression": "[null]|[ElementHandle]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "ElementHandle"
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[Serializable]",
    "name": "Serializable"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[EvaluationArgument]",
    "name": "EvaluationArgument"
  },
  {
    "expression": "[JSHandle]",
    "name": "JSHandle"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[EvaluationArgument]",
    "name": "EvaluationArgument"
  },
  {
    "expression": "[Map]<[string], [JSHandle]>",
    "name": "Map",
    "templates": [
      {
        "name": "string"
      },
      {
        "name": "JSHandle"
      }
    ]
  },
  {
    "expression": "[JSHandle]",
    "name": "JSHandle"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[Serializable]",
    "name": "Serializable"
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "delay",
        "async": false,
        "comment": "Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "delay",
        "required": false,
        "spec": [
          {
            "text": "Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "delay",
        "async": false,
        "comment": "Time to wait between key presses in milliseconds. Defaults to 0.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "delay",
        "required": false,
        "spec": [
          {
            "text": "Time to wait between key presses in milliseconds. Defaults to 0.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "\"verbose\"|\"info\"|\"warning\"|\"error\"",
    "name": "",
    "union": [
      {
        "name": "\"verbose\""
      },
      {
        "name": "\"info\""
      },
      {
        "name": "\"warning\""
      },
      {
        "name": "\"error\""
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "\"verbose\"|\"info\"|\"warning\"|\"error\"",
    "name": "",
    "union": [
      {
        "name": "\"verbose\""
      },
      {
        "name": "\"info\""
      },
      {
        "name": "\"warning\""
      },
      {
        "name": "\"error\""
      }
    ]
  },
  {
    "expression": "[string]|[Error]",
    "name": "",
    "union": [
      {
        "name": "string"
      },
      {
        "name": "Error"
      }
    ]
  },
  {
    "expression": "[Array]<[Object]>",
    "name": "Array",
    "templates": [
      {
        "name": "Object"
      }
    ]
  },
  {
    "expression": "[Object]",
    "name": "Object",
    "properties": [
      {
        "alias": "color",
        "async": false,
        "comment": "Optional preferred logger color.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "color",
        "required": false,
        "spec": [
          {
            "text": "Optional preferred logger color.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[float]",
    "name": "float"
  },
  {
    "expression": "[float]",
    "name": "float"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "button",
        "async": false,
        "comment": "Defaults to `left`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "button",
        "required": false,
        "spec": [
          {
            "text": "Defaults to `left`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[MouseButton]<\"left\"|\"right\"|\"middle\">",
          "name": "MouseButton",
          "union": [
            {
              "name": "\"left\""
            },
            {
              "name": "\"right\""
            },
            {
              "name": "\"middle\""
            }
          ]
        }
      },
      {
        "alias": "clickCount",
        "async": false,
        "comment": "defaults to 1. See [UIEvent.detail].",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "clickCount",
        "required": false,
        "spec": [
          {
            "text": "defaults to 1. See [UIEvent.detail].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[int]",
          "name": "int"
        }
      },
      {
        "alias": "delay",
        "async": false,
        "comment": "Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "delay",
        "required": false,
        "spec": [
          {
            "text": "Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[float]",
    "name": "float"
  },
  {
    "expression": "[float]",
    "name": "float"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "button",
        "async": false,
        "comment": "Defaults to `left`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "button",
        "required": false,
        "spec": [
          {
            "text": "Defaults to `left`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[MouseButton]<\"left\"|\"right\"|\"middle\">",
          "name": "MouseButton",
          "union": [
            {
              "name": "\"left\""
            },
            {
              "name": "\"right\""
            },
            {
              "name": "\"middle\""
            }
          ]
        }
      },
      {
        "alias": "delay",
        "async": false,
        "comment": "Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "delay",
        "required": false,
        "spec": [
          {
            "text": "Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "button",
        "async": false,
        "comment": "Defaults to `left`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "button",
        "required": false,
        "spec": [
          {
            "text": "Defaults to `left`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[MouseButton]<\"left\"|\"right\"|\"middle\">",
          "name": "MouseButton",
          "union": [
            {
              "name": "\"left\""
            },
            {
              "name": "\"right\""
            },
            {
              "name": "\"middle\""
            }
          ]
        }
      },
      {
        "alias": "clickCount",
        "async": false,
        "comment": "defaults to 1. See [UIEvent.detail].",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "clickCount",
        "required": false,
        "spec": [
          {
            "text": "defaults to 1. See [UIEvent.detail].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[int]",
          "name": "int"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[float]",
    "name": "float"
  },
  {
    "expression": "[float]",
    "name": "float"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "steps",
        "async": false,
        "comment": "defaults to 1. Sends intermediate `mousemove` events.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "steps",
        "required": false,
        "spec": [
          {
            "text": "defaults to 1. Sends intermediate `mousemove` events.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[int]",
          "name": "int"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "button",
        "async": false,
        "comment": "Defaults to `left`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "button",
        "required": false,
        "spec": [
          {
            "text": "Defaults to `left`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[MouseButton]<\"left\"|\"right\"|\"middle\">",
          "name": "MouseButton",
          "union": [
            {
              "name": "\"left\""
            },
            {
              "name": "\"right\""
            },
            {
              "name": "\"middle\""
            }
          ]
        }
      },
      {
        "alias": "clickCount",
        "async": false,
        "comment": "defaults to 1. See [UIEvent.detail].",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "clickCount",
        "required": false,
        "spec": [
          {
            "text": "defaults to 1. See [UIEvent.detail].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[int]",
          "name": "int"
        }
      }
    ]
  },
  {
    "expression": "[Page]",
    "name": "Page"
  },
  {
    "expression": "[ConsoleMessage]",
    "name": "ConsoleMessage"
  },
  {
    "expression": "[Page]",
    "name": "Page"
  },
  {
    "expression": "[Dialog]",
    "name": "Dialog"
  },
  {
    "expression": "[Page]",
    "name": "Page"
  },
  {
    "expression": "[Download]",
    "name": "Download"
  },
  {
    "expression": "[FileChooser]",
    "name": "FileChooser"
  },
  {
    "expression": "[Frame]",
    "name": "Frame"
  },
  {
    "expression": "[Frame]",
    "name": "Frame"
  },
  {
    "expression": "[Frame]",
    "name": "Frame"
  },
  {
    "expression": "[Page]",
    "name": "Page"
  },
  {
    "expression": "[Error]",
    "name": "Error"
  },
  {
    "expression": "[Page]",
    "name": "Page"
  },
  {
    "expression": "[Request]",
    "name": "Request"
  },
  {
    "expression": "[Request]",
    "name": "Request"
  },
  {
    "expression": "[Request]",
    "name": "Request"
  },
  {
    "expression": "[Response]",
    "name": "Response"
  },
  {
    "expression": "[WebSocket]",
    "name": "WebSocket"
  },
  {
    "expression": "[Worker]",
    "name": "Worker"
  },
  {
    "expression": "[Accessibility]",
    "name": "Accessibility"
  },
  {
    "name": "void"
  },
  {
    "expression": "[function]|[string]|[Object]",
    "name": "",
    "union": [
      {
        "name": "function"
      },
      {
        "name": "string"
      },
      {
        "name": "Object",
        "properties": [
          {
            "alias": "path",
            "async": false,
            "comment": "Path to the JavaScript file. If `path` is a relative path, then it is resolved relative to the current working\ndirectory. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "path",
            "required": false,
            "spec": [
              {
                "text": "Path to the JavaScript file. If `path` is a relative path, then it is resolved relative to the current working directory. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[path]",
              "name": "path"
            }
          },
          {
            "alias": "content",
            "async": false,
            "comment": "Raw script content. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "content",
            "required": false,
            "spec": [
              {
                "text": "Raw script content. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          }
        ]
      }
    ]
  },
  {
    "expression": "[string]|[path]",
    "name": "",
    "union": [
      {
        "name": "string"
      },
      {
        "name": "path"
      }
    ]
  },
  {
    "expression": "[Serializable]",
    "name": "Serializable"
  },
  {
    "expression": "[path]",
    "name": "path"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[ElementHandle]",
    "name": "ElementHandle"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "content",
        "async": false,
        "comment": "Raw JavaScript content to be injected into frame.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "content",
        "required": false,
        "spec": [
          {
            "text": "Raw JavaScript content to be injected into frame.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "path",
        "async": false,
        "comment": "Path to the JavaScript file to be injected into frame. If `path` is a relative path, then it is resolved relative to the\ncurrent working directory.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "path",
        "required": false,
        "spec": [
          {
            "text": "Path to the JavaScript file to be injected into frame. If `path` is a relative path, then it is resolved relative to the current working directory.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "type",
        "async": false,
        "comment": "Script type. Use 'module' in order to load a Javascript ES6 module. See\n[script](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script) for more details.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "type",
        "required": false,
        "spec": [
          {
            "text": "Script type. Use 'module' in order to load a Javascript ES6 module. See [script](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script) for more details.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "url",
        "async": false,
        "comment": "URL of a script to be added.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "url",
        "required": false,
        "spec": [
          {
            "text": "URL of a script to be added.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      }
    ]
  },
  {
    "expression": "[ElementHandle]",
    "name": "ElementHandle"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "content",
        "async": false,
        "comment": "Raw CSS content to be injected into frame.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "content",
        "required": false,
        "spec": [
          {
            "text": "Raw CSS content to be injected into frame.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "path",
        "async": false,
        "comment": "Path to the CSS file to be injected into frame. If `path` is a relative path, then it is resolved relative to the\ncurrent working directory.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "path",
        "required": false,
        "spec": [
          {
            "text": "Path to the CSS file to be injected into frame. If `path` is a relative path, then it is resolved relative to the current working directory.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "url",
        "async": false,
        "comment": "URL of the `<link>` tag.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "url",
        "required": false,
        "spec": [
          {
            "text": "URL of the `<link>` tag.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "force",
        "async": false,
        "comment": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "force",
        "required": false,
        "spec": [
          {
            "text": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "button",
        "async": false,
        "comment": "Defaults to `left`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "button",
        "required": false,
        "spec": [
          {
            "text": "Defaults to `left`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[MouseButton]<\"left\"|\"right\"|\"middle\">",
          "name": "MouseButton",
          "union": [
            {
              "name": "\"left\""
            },
            {
              "name": "\"right\""
            },
            {
              "name": "\"middle\""
            }
          ]
        }
      },
      {
        "alias": "clickCount",
        "async": false,
        "comment": "defaults to 1. See [UIEvent.detail].",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "clickCount",
        "required": false,
        "spec": [
          {
            "text": "defaults to 1. See [UIEvent.detail].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[int]",
          "name": "int"
        }
      },
      {
        "alias": "delay",
        "async": false,
        "comment": "Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "delay",
        "required": false,
        "spec": [
          {
            "text": "Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "force",
        "async": false,
        "comment": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "force",
        "required": false,
        "spec": [
          {
            "text": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "modifiers",
        "async": false,
        "comment": "Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current\nmodifiers back. If not specified, currently pressed modifiers are used.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "modifiers",
        "required": false,
        "spec": [
          {
            "text": "Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[KeyboardModifier]<\"Alt\"|\"Control\"|\"Meta\"|\"Shift\">>",
          "name": "Array",
          "templates": [
            {
              "name": "KeyboardModifier",
              "union": [
                {
                  "name": "\"Alt\""
                },
                {
                  "name": "\"Control\""
                },
                {
                  "name": "\"Meta\""
                },
                {
                  "name": "\"Shift\""
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "position",
        "async": false,
        "comment": "A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the\nelement.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "position",
        "required": false,
        "spec": [
          {
            "text": "A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "x",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "x",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            },
            {
              "alias": "y",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "y",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            }
          ]
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "runBeforeUnload",
        "async": false,
        "comment": "Defaults to `false`. Whether to run the\n[before unload](https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload) page handlers.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "runBeforeUnload",
        "required": false,
        "spec": [
          {
            "text": "Defaults to `false`. Whether to run the [before unload](https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload) page handlers.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[BrowserContext]",
    "name": "BrowserContext"
  },
  {
    "expression": "[null]|[ChromiumCoverage]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "ChromiumCoverage"
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "button",
        "async": false,
        "comment": "Defaults to `left`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "button",
        "required": false,
        "spec": [
          {
            "text": "Defaults to `left`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[MouseButton]<\"left\"|\"right\"|\"middle\">",
          "name": "MouseButton",
          "union": [
            {
              "name": "\"left\""
            },
            {
              "name": "\"right\""
            },
            {
              "name": "\"middle\""
            }
          ]
        }
      },
      {
        "alias": "delay",
        "async": false,
        "comment": "Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "delay",
        "required": false,
        "spec": [
          {
            "text": "Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "force",
        "async": false,
        "comment": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "force",
        "required": false,
        "spec": [
          {
            "text": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "modifiers",
        "async": false,
        "comment": "Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current\nmodifiers back. If not specified, currently pressed modifiers are used.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "modifiers",
        "required": false,
        "spec": [
          {
            "text": "Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[KeyboardModifier]<\"Alt\"|\"Control\"|\"Meta\"|\"Shift\">>",
          "name": "Array",
          "templates": [
            {
              "name": "KeyboardModifier",
              "union": [
                {
                  "name": "\"Alt\""
                },
                {
                  "name": "\"Control\""
                },
                {
                  "name": "\"Meta\""
                },
                {
                  "name": "\"Shift\""
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "position",
        "async": false,
        "comment": "A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the\nelement.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "position",
        "required": false,
        "spec": [
          {
            "text": "A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "x",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "x",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            },
            {
              "alias": "y",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "y",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            }
          ]
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[EvaluationArgument]",
    "name": "EvaluationArgument"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "colorScheme",
        "async": false,
        "comment": "Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. Passing\n`null` disables color scheme emulation.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "colorScheme",
        "required": false,
        "spec": [
          {
            "text": "Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. Passing `null` disables color scheme emulation.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "null|[ColorScheme]<\"light\"|\"dark\"|\"no-preference\">",
          "name": "",
          "union": [
            {
              "name": "null"
            },
            {
              "name": "ColorScheme",
              "union": [
                {
                  "name": "\"light\""
                },
                {
                  "name": "\"dark\""
                },
                {
                  "name": "\"no-preference\""
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "media",
        "async": false,
        "comment": "Changes the CSS media type of the page. The only allowed values are `'screen'`, `'print'` and `null`. Passing `null`\ndisables CSS media emulation.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "media",
        "required": false,
        "spec": [
          {
            "text": "Changes the CSS media type of the page. The only allowed values are `'screen'`, `'print'` and `null`. Passing `null` disables CSS media emulation.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "null|[Media]<\"screen\"|\"print\">",
          "name": "",
          "union": [
            {
              "name": "null"
            },
            {
              "name": "Media",
              "union": [
                {
                  "name": "\"screen\""
                },
                {
                  "name": "\"print\""
                }
              ]
            }
          ]
        }
      }
    ]
  },
  {
    "expression": "[Serializable]",
    "name": "Serializable"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[EvaluationArgument]",
    "name": "EvaluationArgument"
  },
  {
    "expression": "[Serializable]",
    "name": "Serializable"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[EvaluationArgument]",
    "name": "EvaluationArgument"
  },
  {
    "expression": "[Serializable]",
    "name": "Serializable"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[EvaluationArgument]",
    "name": "EvaluationArgument"
  },
  {
    "expression": "[JSHandle]",
    "name": "JSHandle"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[EvaluationArgument]",
    "name": "EvaluationArgument"
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[function]",
    "name": "function"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "handle",
        "async": false,
        "comment": "Whether to pass the argument as a handle, instead of passing by value. When passing a handle, only one argument is\nsupported. When passing by value, multiple arguments are supported.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "handle",
        "required": false,
        "spec": [
          {
            "text": "Whether to pass the argument as a handle, instead of passing by value. When passing a handle, only one argument is supported. When passing by value, multiple arguments are supported.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[function]",
    "name": "function"
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[null]|[Frame]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Frame"
      }
    ]
  },
  {
    "expression": "[string]|[Object]",
    "name": "",
    "union": [
      {
        "name": "string"
      },
      {
        "name": "Object",
        "properties": [
          {
            "alias": "name",
            "async": false,
            "comment": "Frame name specified in the `iframe`'s `name` attribute. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "name",
            "required": false,
            "spec": [
              {
                "text": "Frame name specified in the `iframe`'s `name` attribute. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "url",
            "async": false,
            "comment": "A glob pattern, regex pattern or predicate receiving frame's `url` as a [URL] object. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "url",
            "required": false,
            "spec": [
              {
                "text": "A glob pattern, regex pattern or predicate receiving frame's `url` as a [URL] object. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]|[RegExp]|[function]([URL]):[boolean]",
              "name": "",
              "union": [
                {
                  "name": "string"
                },
                {
                  "name": "RegExp"
                },
                {
                  "args": [
                    {
                      "name": "URL"
                    }
                  ],
                  "name": "function",
                  "returnType": {
                    "name": "boolean"
                  }
                }
              ]
            }
          }
        ]
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "name",
        "async": false,
        "comment": "Frame name specified in the `iframe`'s `name` attribute. Optional.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "name",
        "required": false,
        "spec": [
          {
            "text": "Frame name specified in the `iframe`'s `name` attribute. Optional.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "url",
        "async": false,
        "comment": "A glob pattern, regex pattern or predicate receiving frame's `url` as a [URL] object. Optional.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "url",
        "required": false,
        "spec": [
          {
            "text": "A glob pattern, regex pattern or predicate receiving frame's `url` as a [URL] object. Optional.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]|[RegExp]|[function]([URL]):[boolean]",
          "name": "",
          "union": [
            {
              "name": "string"
            },
            {
              "name": "RegExp"
            },
            {
              "args": [
                {
                  "name": "URL"
                }
              ],
              "name": "function",
              "returnType": {
                "name": "boolean"
              }
            }
          ]
        }
      }
    ]
  },
  {
    "expression": "[null]|[Frame]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Frame"
      }
    ]
  },
  {
    "expression": "[string]|[RegExp]|[function]([URL]):[boolean]",
    "name": "",
    "union": [
      {
        "name": "string"
      },
      {
        "name": "RegExp"
      },
      {
        "args": [
          {
            "name": "URL"
          }
        ],
        "name": "function",
        "returnType": {
          "name": "boolean"
        }
      }
    ]
  },
  {
    "expression": "[Array]<[Frame]>",
    "name": "Array",
    "templates": [
      {
        "name": "Frame"
      }
    ]
  },
  {
    "expression": "[null]|[string]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "string"
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[null]|[Response]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Response"
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be\nchanged by using the [`method: BrowserContext.setDefaultNavigationTimeout`],\n[`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or\n[`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultNavigationTimeout`], [`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "waitUntil",
        "async": false,
        "comment": "When to consider operation succeeded, defaults to `load`. Events can be either:\n- `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.\n- `'load'` - consider operation to be finished when the `load` event is fired.\n- `'networkidle'` - consider operation to be finished when there are no network connections for at least `500` ms.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "waitUntil",
        "required": false,
        "spec": [
          {
            "text": "When to consider operation succeeded, defaults to `load`. Events can be either:",
            "type": "text"
          },
          {
            "liType": "bullet",
            "text": "`'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'load'` - consider operation to be finished when the `load` event is fired.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'networkidle'` - consider operation to be finished when there are no network connections for at least `500` ms.",
            "type": "li"
          }
        ],
        "type": {
          "expression": "[WaitUntilState]<\"load\"|\"domcontentloaded\"|\"networkidle\">",
          "name": "WaitUntilState",
          "union": [
            {
              "name": "\"load\""
            },
            {
              "name": "\"domcontentloaded\""
            },
            {
              "name": "\"networkidle\""
            }
          ]
        }
      }
    ]
  },
  {
    "expression": "[null]|[Response]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Response"
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be\nchanged by using the [`method: BrowserContext.setDefaultNavigationTimeout`],\n[`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or\n[`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultNavigationTimeout`], [`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "waitUntil",
        "async": false,
        "comment": "When to consider operation succeeded, defaults to `load`. Events can be either:\n- `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.\n- `'load'` - consider operation to be finished when the `load` event is fired.\n- `'networkidle'` - consider operation to be finished when there are no network connections for at least `500` ms.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "waitUntil",
        "required": false,
        "spec": [
          {
            "text": "When to consider operation succeeded, defaults to `load`. Events can be either:",
            "type": "text"
          },
          {
            "liType": "bullet",
            "text": "`'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'load'` - consider operation to be finished when the `load` event is fired.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'networkidle'` - consider operation to be finished when there are no network connections for at least `500` ms.",
            "type": "li"
          }
        ],
        "type": {
          "expression": "[WaitUntilState]<\"load\"|\"domcontentloaded\"|\"networkidle\">",
          "name": "WaitUntilState",
          "union": [
            {
              "name": "\"load\""
            },
            {
              "name": "\"domcontentloaded\""
            },
            {
              "name": "\"networkidle\""
            }
          ]
        }
      }
    ]
  },
  {
    "expression": "[null]|[Response]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Response"
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "referer",
        "async": false,
        "comment": "Referer header value. If provided it will take preference over the referer header value set by\n[`method: Page.setExtraHTTPHeaders`].",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "referer",
        "required": false,
        "spec": [
          {
            "text": "Referer header value. If provided it will take preference over the referer header value set by [`method: Page.setExtraHTTPHeaders`].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be\nchanged by using the [`method: BrowserContext.setDefaultNavigationTimeout`],\n[`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or\n[`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultNavigationTimeout`], [`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "waitUntil",
        "async": false,
        "comment": "When to consider operation succeeded, defaults to `load`. Events can be either:\n- `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.\n- `'load'` - consider operation to be finished when the `load` event is fired.\n- `'networkidle'` - consider operation to be finished when there are no network connections for at least `500` ms.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "waitUntil",
        "required": false,
        "spec": [
          {
            "text": "When to consider operation succeeded, defaults to `load`. Events can be either:",
            "type": "text"
          },
          {
            "liType": "bullet",
            "text": "`'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'load'` - consider operation to be finished when the `load` event is fired.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'networkidle'` - consider operation to be finished when there are no network connections for at least `500` ms.",
            "type": "li"
          }
        ],
        "type": {
          "expression": "[WaitUntilState]<\"load\"|\"domcontentloaded\"|\"networkidle\">",
          "name": "WaitUntilState",
          "union": [
            {
              "name": "\"load\""
            },
            {
              "name": "\"domcontentloaded\""
            },
            {
              "name": "\"networkidle\""
            }
          ]
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "force",
        "async": false,
        "comment": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "force",
        "required": false,
        "spec": [
          {
            "text": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "modifiers",
        "async": false,
        "comment": "Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current\nmodifiers back. If not specified, currently pressed modifiers are used.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "modifiers",
        "required": false,
        "spec": [
          {
            "text": "Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[KeyboardModifier]<\"Alt\"|\"Control\"|\"Meta\"|\"Shift\">>",
          "name": "Array",
          "templates": [
            {
              "name": "KeyboardModifier",
              "union": [
                {
                  "name": "\"Alt\""
                },
                {
                  "name": "\"Control\""
                },
                {
                  "name": "\"Meta\""
                },
                {
                  "name": "\"Shift\""
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "position",
        "async": false,
        "comment": "A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the\nelement.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "position",
        "required": false,
        "spec": [
          {
            "text": "A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "x",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "x",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            },
            {
              "alias": "y",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "y",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            }
          ]
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Keyboard]",
    "name": "Keyboard"
  },
  {
    "expression": "[Frame]",
    "name": "Frame"
  },
  {
    "expression": "[Mouse]",
    "name": "Mouse"
  },
  {
    "expression": "[null]|[Page]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Page"
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[Buffer]",
    "name": "Buffer"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "displayHeaderFooter",
        "async": false,
        "comment": "Display header and footer. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "displayHeaderFooter",
        "required": false,
        "spec": [
          {
            "text": "Display header and footer. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "footerTemplate",
        "async": false,
        "comment": "HTML template for the print footer. Should use the same format as the `headerTemplate`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "footerTemplate",
        "required": false,
        "spec": [
          {
            "text": "HTML template for the print footer. Should use the same format as the `headerTemplate`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "format",
        "async": false,
        "comment": "Paper format. If set, takes priority over `width` or `height` options. Defaults to 'Letter'.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "format",
        "required": false,
        "spec": [
          {
            "text": "Paper format. If set, takes priority over `width` or `height` options. Defaults to 'Letter'.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "headerTemplate",
        "async": false,
        "comment": "HTML template for the print header. Should be valid HTML markup with following classes used to inject printing values\ninto them:\n- `'date'` formatted print date\n- `'title'` document title\n- `'url'` document location\n- `'pageNumber'` current page number\n- `'totalPages'` total pages in the document",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "headerTemplate",
        "required": false,
        "spec": [
          {
            "text": "HTML template for the print header. Should be valid HTML markup with following classes used to inject printing values into them:",
            "type": "text"
          },
          {
            "liType": "bullet",
            "text": "`'date'` formatted print date",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'title'` document title",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'url'` document location",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'pageNumber'` current page number",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'totalPages'` total pages in the document",
            "type": "li"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "height",
        "async": false,
        "comment": "Paper height, accepts values labeled with units.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "height",
        "required": false,
        "spec": [
          {
            "text": "Paper height, accepts values labeled with units.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]|[float]",
          "name": "",
          "union": [
            {
              "name": "string"
            },
            {
              "name": "float"
            }
          ]
        }
      },
      {
        "alias": "height",
        "async": false,
        "comment": "Paper height, accepts values labeled with units.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "height",
        "required": false,
        "spec": [
          {
            "text": "Paper height, accepts values labeled with units.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "landscape",
        "async": false,
        "comment": "Paper orientation. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "landscape",
        "required": false,
        "spec": [
          {
            "text": "Paper orientation. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "margin",
        "async": false,
        "comment": "Paper margins, defaults to none.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "margin",
        "required": false,
        "spec": [
          {
            "text": "Paper margins, defaults to none.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "top",
              "async": false,
              "comment": "Top margin, accepts values labeled with units. Defaults to `0`.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "top",
              "required": false,
              "spec": [
                {
                  "text": "Top margin, accepts values labeled with units. Defaults to `0`.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]|[float]",
                "name": "",
                "union": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "float"
                  }
                ]
              }
            },
            {
              "alias": "right",
              "async": false,
              "comment": "Right margin, accepts values labeled with units. Defaults to `0`.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "right",
              "required": false,
              "spec": [
                {
                  "text": "Right margin, accepts values labeled with units. Defaults to `0`.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]|[float]",
                "name": "",
                "union": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "float"
                  }
                ]
              }
            },
            {
              "alias": "bottom",
              "async": false,
              "comment": "Bottom margin, accepts values labeled with units. Defaults to `0`.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "bottom",
              "required": false,
              "spec": [
                {
                  "text": "Bottom margin, accepts values labeled with units. Defaults to `0`.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]|[float]",
                "name": "",
                "union": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "float"
                  }
                ]
              }
            },
            {
              "alias": "left",
              "async": false,
              "comment": "Left margin, accepts values labeled with units. Defaults to `0`.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "left",
              "required": false,
              "spec": [
                {
                  "text": "Left margin, accepts values labeled with units. Defaults to `0`.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]|[float]",
                "name": "",
                "union": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "float"
                  }
                ]
              }
            }
          ]
        }
      },
      {
        "alias": "margin",
        "async": false,
        "comment": "Paper margins, defaults to none.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "margin",
        "required": false,
        "spec": [
          {
            "text": "Paper margins, defaults to none.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "top",
              "async": false,
              "comment": "Top margin, accepts values labeled with units. Defaults to `0`.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "top",
              "required": false,
              "spec": [
                {
                  "text": "Top margin, accepts values labeled with units. Defaults to `0`.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            },
            {
              "alias": "right",
              "async": false,
              "comment": "Right margin, accepts values labeled with units. Defaults to `0`.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "right",
              "required": false,
              "spec": [
                {
                  "text": "Right margin, accepts values labeled with units. Defaults to `0`.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            },
            {
              "alias": "bottom",
              "async": false,
              "comment": "Bottom margin, accepts values labeled with units. Defaults to `0`.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "bottom",
              "required": false,
              "spec": [
                {
                  "text": "Bottom margin, accepts values labeled with units. Defaults to `0`.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            },
            {
              "alias": "left",
              "async": false,
              "comment": "Left margin, accepts values labeled with units. Defaults to `0`.",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "left",
              "required": false,
              "spec": [
                {
                  "text": "Left margin, accepts values labeled with units. Defaults to `0`.",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[string]",
                "name": "string"
              }
            }
          ]
        }
      },
      {
        "alias": "pageRanges",
        "async": false,
        "comment": "Paper ranges to print, e.g., '1-5, 8, 11-13'. Defaults to the empty string, which means print all pages.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "pageRanges",
        "required": false,
        "spec": [
          {
            "text": "Paper ranges to print, e.g., '1-5, 8, 11-13'. Defaults to the empty string, which means print all pages.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "path",
        "async": false,
        "comment": "The file path to save the PDF to. If `path` is a relative path, then it is resolved relative to the current working\ndirectory. If no path is provided, the PDF won't be saved to the disk.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "path",
        "required": false,
        "spec": [
          {
            "text": "The file path to save the PDF to. If `path` is a relative path, then it is resolved relative to the current working directory. If no path is provided, the PDF won't be saved to the disk.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "preferCSSPageSize",
        "async": false,
        "comment": "Give any CSS `@page` size declared in the page priority over what is declared in `width` and `height` or `format`\noptions. Defaults to `false`, which will scale the content to fit the paper size.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "preferCSSPageSize",
        "required": false,
        "spec": [
          {
            "text": "Give any CSS `@page` size declared in the page priority over what is declared in `width` and `height` or `format` options. Defaults to `false`, which will scale the content to fit the paper size.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "printBackground",
        "async": false,
        "comment": "Print background graphics. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "printBackground",
        "required": false,
        "spec": [
          {
            "text": "Print background graphics. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "scale",
        "async": false,
        "comment": "Scale of the webpage rendering. Defaults to `1`. Scale amount must be between 0.1 and 2.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "scale",
        "required": false,
        "spec": [
          {
            "text": "Scale of the webpage rendering. Defaults to `1`. Scale amount must be between 0.1 and 2.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "width",
        "async": false,
        "comment": "Paper width, accepts values labeled with units.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "width",
        "required": false,
        "spec": [
          {
            "text": "Paper width, accepts values labeled with units.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]|[float]",
          "name": "",
          "union": [
            {
              "name": "string"
            },
            {
              "name": "float"
            }
          ]
        }
      },
      {
        "alias": "width",
        "async": false,
        "comment": "Paper width, accepts values labeled with units.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "width",
        "required": false,
        "spec": [
          {
            "text": "Paper width, accepts values labeled with units.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "delay",
        "async": false,
        "comment": "Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "delay",
        "required": false,
        "spec": [
          {
            "text": "Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[null]|[ElementHandle]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "ElementHandle"
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[Array]<[ElementHandle]>",
    "name": "Array",
    "templates": [
      {
        "name": "ElementHandle"
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[null]|[Response]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Response"
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be\nchanged by using the [`method: BrowserContext.setDefaultNavigationTimeout`],\n[`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or\n[`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultNavigationTimeout`], [`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "waitUntil",
        "async": false,
        "comment": "When to consider operation succeeded, defaults to `load`. Events can be either:\n- `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.\n- `'load'` - consider operation to be finished when the `load` event is fired.\n- `'networkidle'` - consider operation to be finished when there are no network connections for at least `500` ms.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "waitUntil",
        "required": false,
        "spec": [
          {
            "text": "When to consider operation succeeded, defaults to `load`. Events can be either:",
            "type": "text"
          },
          {
            "liType": "bullet",
            "text": "`'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'load'` - consider operation to be finished when the `load` event is fired.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'networkidle'` - consider operation to be finished when there are no network connections for at least `500` ms.",
            "type": "li"
          }
        ],
        "type": {
          "expression": "[WaitUntilState]<\"load\"|\"domcontentloaded\"|\"networkidle\">",
          "name": "WaitUntilState",
          "union": [
            {
              "name": "\"load\""
            },
            {
              "name": "\"domcontentloaded\""
            },
            {
              "name": "\"networkidle\""
            }
          ]
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]|[RegExp]|[function]([URL]):[boolean]",
    "name": "",
    "union": [
      {
        "name": "string"
      },
      {
        "name": "RegExp"
      },
      {
        "args": [
          {
            "name": "URL"
          }
        ],
        "name": "function",
        "returnType": {
          "name": "boolean"
        }
      }
    ]
  },
  {
    "args": [
      {
        "name": "Route"
      },
      {
        "name": "Request"
      }
    ],
    "expression": "[function]([Route], [Request])",
    "name": "function",
    "returnType": null
  },
  {
    "args": [
      {
        "name": "Route"
      }
    ],
    "expression": "[function]([Route])",
    "name": "function",
    "returnType": null
  },
  {
    "expression": "[Buffer]",
    "name": "Buffer"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "clip",
        "async": false,
        "comment": "An object which specifies clipping of the resulting image. Should have the following fields:",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "clip",
        "required": false,
        "spec": [
          {
            "text": "An object which specifies clipping of the resulting image. Should have the following fields:",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "x",
              "async": false,
              "comment": "x-coordinate of top-left corner of clip area",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "x",
              "required": true,
              "spec": [
                {
                  "text": "x-coordinate of top-left corner of clip area",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            },
            {
              "alias": "y",
              "async": false,
              "comment": "y-coordinate of top-left corner of clip area",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "y",
              "required": true,
              "spec": [
                {
                  "text": "y-coordinate of top-left corner of clip area",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            },
            {
              "alias": "width",
              "async": false,
              "comment": "width of clipping area",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "width",
              "required": true,
              "spec": [
                {
                  "text": "width of clipping area",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            },
            {
              "alias": "height",
              "async": false,
              "comment": "height of clipping area",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "height",
              "required": true,
              "spec": [
                {
                  "text": "height of clipping area",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            }
          ]
        }
      },
      {
        "alias": "fullPage",
        "async": false,
        "comment": "When true, takes a screenshot of the full scrollable page, instead of the currently visible viewport. Defaults to\n`false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "fullPage",
        "required": false,
        "spec": [
          {
            "text": "When true, takes a screenshot of the full scrollable page, instead of the currently visible viewport. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "omitBackground",
        "async": false,
        "comment": "Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images.\nDefaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "omitBackground",
        "required": false,
        "spec": [
          {
            "text": "Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "path",
        "async": false,
        "comment": "The file path to save the image to. The screenshot type will be inferred from file extension. If `path` is a relative\npath, then it is resolved relative to the current working directory. If no path is provided, the image won't be saved to\nthe disk.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "path",
        "required": false,
        "spec": [
          {
            "text": "The file path to save the image to. The screenshot type will be inferred from file extension. If `path` is a relative path, then it is resolved relative to the current working directory. If no path is provided, the image won't be saved to the disk.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "quality",
        "async": false,
        "comment": "The quality of the image, between 0-100. Not applicable to `png` images.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "quality",
        "required": false,
        "spec": [
          {
            "text": "The quality of the image, between 0-100. Not applicable to `png` images.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[int]",
          "name": "int"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "type",
        "async": false,
        "comment": "Specify screenshot type, defaults to `png`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "type",
        "required": false,
        "spec": [
          {
            "text": "Specify screenshot type, defaults to `png`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[ScreenshotType]<\"png\"|\"jpeg\">",
          "name": "ScreenshotType",
          "union": [
            {
              "name": "\"png\""
            },
            {
              "name": "\"jpeg\""
            }
          ]
        }
      }
    ]
  },
  {
    "expression": "[Array]<[string]>",
    "name": "Array",
    "templates": [
      {
        "name": "string"
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[null]|[string]|[ElementHandle]|[Array]<[string]>|[Object]|[Array]<[ElementHandle]>|[Array]<[Object]>",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "string"
      },
      {
        "name": "ElementHandle"
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "string"
          }
        ]
      },
      {
        "name": "Object",
        "properties": [
          {
            "alias": "value",
            "async": false,
            "comment": "Matches by `option.value`. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "value",
            "required": false,
            "spec": [
              {
                "text": "Matches by `option.value`. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "label",
            "async": false,
            "comment": "Matches by `option.label`. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "label",
            "required": false,
            "spec": [
              {
                "text": "Matches by `option.label`. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "index",
            "async": false,
            "comment": "Matches by the index. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "index",
            "required": false,
            "spec": [
              {
                "text": "Matches by the index. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[int]",
              "name": "int"
            }
          }
        ]
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "ElementHandle"
          }
        ]
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "Object",
            "properties": [
              {
                "alias": "value",
                "async": false,
                "comment": "Matches by `option.value`. Optional.",
                "deprecated": false,
                "kind": "property",
                "langs": {},
                "name": "value",
                "required": false,
                "spec": [
                  {
                    "text": "Matches by `option.value`. Optional.",
                    "type": "text"
                  }
                ],
                "type": {
                  "expression": "[string]",
                  "name": "string"
                }
              },
              {
                "alias": "label",
                "async": false,
                "comment": "Matches by `option.label`. Optional.",
                "deprecated": false,
                "kind": "property",
                "langs": {},
                "name": "label",
                "required": false,
                "spec": [
                  {
                    "text": "Matches by `option.label`. Optional.",
                    "type": "text"
                  }
                ],
                "type": {
                  "expression": "[string]",
                  "name": "string"
                }
              },
              {
                "alias": "index",
                "async": false,
                "comment": "Matches by the index. Optional.",
                "deprecated": false,
                "kind": "property",
                "langs": {},
                "name": "index",
                "required": false,
                "spec": [
                  {
                    "text": "Matches by the index. Optional.",
                    "type": "text"
                  }
                ],
                "type": {
                  "expression": "[int]",
                  "name": "int"
                }
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Array]<[Object]>",
    "name": "Array",
    "templates": [
      {
        "name": "Object",
        "properties": [
          {
            "alias": "value",
            "async": false,
            "comment": "Matches by `option.value`. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "value",
            "required": false,
            "spec": [
              {
                "text": "Matches by `option.value`. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "label",
            "async": false,
            "comment": "Matches by `option.label`. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "label",
            "required": false,
            "spec": [
              {
                "text": "Matches by `option.label`. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "index",
            "async": false,
            "comment": "Matches by the index. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "index",
            "required": false,
            "spec": [
              {
                "text": "Matches by the index. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[int]",
              "name": "int"
            }
          }
        ]
      }
    ]
  },
  {
    "expression": "[ElementHandle]|[Array]<[ElementHandle]>",
    "name": "",
    "union": [
      {
        "name": "ElementHandle"
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "ElementHandle"
          }
        ]
      }
    ]
  },
  {
    "expression": "[int]|[Array]<[int]>",
    "name": "",
    "union": [
      {
        "name": "int"
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "int"
          }
        ]
      }
    ]
  },
  {
    "expression": "[string]|[Array]<[string]>",
    "name": "",
    "union": [
      {
        "name": "string"
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "string"
          }
        ]
      }
    ]
  },
  {
    "expression": "[string]|[Array]<[string]>",
    "name": "",
    "union": [
      {
        "name": "string"
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "string"
          }
        ]
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be\nchanged by using the [`method: BrowserContext.setDefaultNavigationTimeout`],\n[`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or\n[`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultNavigationTimeout`], [`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "waitUntil",
        "async": false,
        "comment": "When to consider operation succeeded, defaults to `load`. Events can be either:\n- `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.\n- `'load'` - consider operation to be finished when the `load` event is fired.\n- `'networkidle'` - consider operation to be finished when there are no network connections for at least `500` ms.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "waitUntil",
        "required": false,
        "spec": [
          {
            "text": "When to consider operation succeeded, defaults to `load`. Events can be either:",
            "type": "text"
          },
          {
            "liType": "bullet",
            "text": "`'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'load'` - consider operation to be finished when the `load` event is fired.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'networkidle'` - consider operation to be finished when there are no network connections for at least `500` ms.",
            "type": "li"
          }
        ],
        "type": {
          "expression": "[WaitUntilState]<\"load\"|\"domcontentloaded\"|\"networkidle\">",
          "name": "WaitUntilState",
          "union": [
            {
              "name": "\"load\""
            },
            {
              "name": "\"domcontentloaded\""
            },
            {
              "name": "\"networkidle\""
            }
          ]
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[float]",
    "name": "float"
  },
  {
    "name": "void"
  },
  {
    "expression": "[float]",
    "name": "float"
  },
  {
    "name": "void"
  },
  {
    "expression": "[Object]<[string], [string]>",
    "name": "Object",
    "templates": [
      {
        "name": "string"
      },
      {
        "name": "string"
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[path]|[Array]<[path]>|[Object]|[Array]<[Object]>",
    "name": "",
    "union": [
      {
        "name": "path"
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "path"
          }
        ]
      },
      {
        "name": "Object",
        "properties": [
          {
            "alias": "name",
            "async": false,
            "comment": "File name",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "name",
            "required": true,
            "spec": [
              {
                "text": "File name",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "mimeType",
            "async": false,
            "comment": "File type",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "mimeType",
            "required": true,
            "spec": [
              {
                "text": "File type",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          },
          {
            "alias": "buffer",
            "async": false,
            "comment": "File content",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "buffer",
            "required": true,
            "spec": [
              {
                "text": "File content",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[Buffer]",
              "name": "Buffer"
            }
          }
        ]
      },
      {
        "name": "Array",
        "templates": [
          {
            "name": "Object",
            "properties": [
              {
                "alias": "name",
                "async": false,
                "comment": "File name",
                "deprecated": false,
                "kind": "property",
                "langs": {},
                "name": "name",
                "required": true,
                "spec": [
                  {
                    "text": "File name",
                    "type": "text"
                  }
                ],
                "type": {
                  "expression": "[string]",
                  "name": "string"
                }
              },
              {
                "alias": "mimeType",
                "async": false,
                "comment": "File type",
                "deprecated": false,
                "kind": "property",
                "langs": {},
                "name": "mimeType",
                "required": true,
                "spec": [
                  {
                    "text": "File type",
                    "type": "text"
                  }
                ],
                "type": {
                  "expression": "[string]",
                  "name": "string"
                }
              },
              {
                "alias": "buffer",
                "async": false,
                "comment": "File content",
                "deprecated": false,
                "kind": "property",
                "langs": {},
                "name": "buffer",
                "required": true,
                "spec": [
                  {
                    "text": "File content",
                    "type": "text"
                  }
                ],
                "type": {
                  "expression": "[Buffer]",
                  "name": "Buffer"
                }
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[Object]",
    "name": "Object",
    "properties": [
      {
        "alias": "width",
        "async": false,
        "comment": "page width in pixels.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "width",
        "required": true,
        "spec": [
          {
            "text": "page width in pixels.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[int]",
          "name": "int"
        }
      },
      {
        "alias": "height",
        "async": false,
        "comment": "page height in pixels.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "height",
        "required": true,
        "spec": [
          {
            "text": "page height in pixels.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[int]",
          "name": "int"
        }
      }
    ]
  },
  {
    "expression": "[int]",
    "name": "int"
  },
  {
    "expression": "[int]",
    "name": "int"
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "force",
        "async": false,
        "comment": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "force",
        "required": false,
        "spec": [
          {
            "text": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "modifiers",
        "async": false,
        "comment": "Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current\nmodifiers back. If not specified, currently pressed modifiers are used.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "modifiers",
        "required": false,
        "spec": [
          {
            "text": "Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores current modifiers back. If not specified, currently pressed modifiers are used.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Array]<[KeyboardModifier]<\"Alt\"|\"Control\"|\"Meta\"|\"Shift\">>",
          "name": "Array",
          "templates": [
            {
              "name": "KeyboardModifier",
              "union": [
                {
                  "name": "\"Alt\""
                },
                {
                  "name": "\"Control\""
                },
                {
                  "name": "\"Meta\""
                },
                {
                  "name": "\"Shift\""
                }
              ]
            }
          ]
        }
      },
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "position",
        "async": false,
        "comment": "A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the\nelement.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "position",
        "required": false,
        "spec": [
          {
            "text": "A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of the element.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]",
          "name": "Object",
          "properties": [
            {
              "alias": "x",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "x",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            },
            {
              "alias": "y",
              "async": false,
              "comment": "",
              "deprecated": false,
              "kind": "property",
              "langs": {},
              "name": "y",
              "required": true,
              "spec": [
                {
                  "text": "",
                  "type": "text"
                }
              ],
              "type": {
                "expression": "[float]",
                "name": "float"
              }
            }
          ]
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[null]|[string]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "string"
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[Touchscreen]",
    "name": "Touchscreen"
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "delay",
        "async": false,
        "comment": "Time to wait between key presses in milliseconds. Defaults to 0.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "delay",
        "required": false,
        "spec": [
          {
            "text": "Time to wait between key presses in milliseconds. Defaults to 0.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "force",
        "async": false,
        "comment": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "force",
        "required": false,
        "spec": [
          {
            "text": "Whether to bypass the [actionability](./actionability.md) checks. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "noWaitAfter",
        "async": false,
        "comment": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can\nopt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to\ninaccessible pages. Defaults to `false`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "noWaitAfter",
        "required": false,
        "spec": [
          {
            "text": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to `false`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]|[RegExp]|[function]([URL]):[boolean]",
    "name": "",
    "union": [
      {
        "name": "string"
      },
      {
        "name": "RegExp"
      },
      {
        "args": [
          {
            "name": "URL"
          }
        ],
        "name": "function",
        "returnType": {
          "name": "boolean"
        }
      }
    ]
  },
  {
    "args": [
      {
        "name": "Route"
      },
      {
        "name": "Request"
      }
    ],
    "expression": "[function]([Route], [Request])",
    "name": "function",
    "returnType": null
  },
  {
    "args": [
      {
        "name": "Route"
      }
    ],
    "expression": "[function]([Route])",
    "name": "function",
    "returnType": null
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[null]|[Video]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Video"
      }
    ]
  },
  {
    "expression": "[null]|[Object]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Object",
        "properties": [
          {
            "alias": "width",
            "async": false,
            "comment": "page width in pixels.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "width",
            "required": true,
            "spec": [
              {
                "text": "page width in pixels.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[int]",
              "name": "int"
            }
          },
          {
            "alias": "height",
            "async": false,
            "comment": "page height in pixels.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "height",
            "required": true,
            "spec": [
              {
                "text": "page height in pixels.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[int]",
              "name": "int"
            }
          }
        ]
      }
    ]
  },
  {
    "expression": "[Page]",
    "name": "Page"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\nvalue can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Runnable]",
    "name": "Runnable"
  },
  {
    "expression": "[ConsoleMessage]",
    "name": "ConsoleMessage"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "predicate",
        "async": false,
        "comment": "Receives the `ConsoleMessage` object and resolves to truthy value when the waiting should resolve.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "predicate",
        "required": false,
        "spec": [
          {
            "text": "Receives the `ConsoleMessage` object and resolves to truthy value when the waiting should resolve.",
            "type": "text"
          }
        ],
        "type": {
          "args": [
            {
              "name": "ConsoleMessage"
            }
          ],
          "expression": "[function]([ConsoleMessage]):[boolean]",
          "name": "function",
          "returnType": {
            "name": "boolean"
          }
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\nvalue can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Runnable]",
    "name": "Runnable"
  },
  {
    "expression": "[Download]",
    "name": "Download"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "predicate",
        "async": false,
        "comment": "Receives the `Download` object and resolves to truthy value when the waiting should resolve.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "predicate",
        "required": false,
        "spec": [
          {
            "text": "Receives the `Download` object and resolves to truthy value when the waiting should resolve.",
            "type": "text"
          }
        ],
        "type": {
          "args": [
            {
              "name": "Download"
            }
          ],
          "expression": "[function]([Download]):[boolean]",
          "name": "function",
          "returnType": {
            "name": "boolean"
          }
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\nvalue can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Runnable]",
    "name": "Runnable"
  },
  {
    "expression": "[any]",
    "name": "any"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[function]|[Object]",
    "name": "",
    "union": [
      {
        "name": "function"
      },
      {
        "name": "Object",
        "properties": [
          {
            "alias": "predicate",
            "async": false,
            "comment": "receives the event data and resolves to truthy value when the waiting should resolve.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "predicate",
            "required": true,
            "spec": [
              {
                "text": "receives the event data and resolves to truthy value when the waiting should resolve.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[function]",
              "name": "function"
            }
          },
          {
            "alias": "timeout",
            "async": false,
            "comment": "maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\nvalue can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "timeout",
            "required": false,
            "spec": [
              {
                "text": "maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[float]",
              "name": "float"
            }
          }
        ]
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "predicate",
        "async": false,
        "comment": "Receives the event data and resolves to truthy value when the waiting should resolve.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "predicate",
        "required": false,
        "spec": [
          {
            "text": "Receives the event data and resolves to truthy value when the waiting should resolve.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[function]",
          "name": "function"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\nvalue can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[FileChooser]",
    "name": "FileChooser"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "predicate",
        "async": false,
        "comment": "Receives the `FileChooser` object and resolves to truthy value when the waiting should resolve.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "predicate",
        "required": false,
        "spec": [
          {
            "text": "Receives the `FileChooser` object and resolves to truthy value when the waiting should resolve.",
            "type": "text"
          }
        ],
        "type": {
          "args": [
            {
              "name": "FileChooser"
            }
          ],
          "expression": "[function]([FileChooser]):[boolean]",
          "name": "function",
          "returnType": {
            "name": "boolean"
          }
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\nvalue can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Runnable]",
    "name": "Runnable"
  },
  {
    "expression": "[JSHandle]",
    "name": "JSHandle"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[EvaluationArgument]",
    "name": "EvaluationArgument"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "polling",
        "async": false,
        "comment": "If `polling` is `'raf'`, then `expression` is constantly executed in `requestAnimationFrame` callback. If `polling` is a\nnumber, then it is treated as an interval in milliseconds at which the function would be executed. Defaults to `raf`.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "polling",
        "required": false,
        "spec": [
          {
            "text": "If `polling` is `'raf'`, then `expression` is constantly executed in `requestAnimationFrame` callback. If `polling` is a number, then it is treated as an interval in milliseconds at which the function would be executed. Defaults to `raf`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]|\"raf\"",
          "name": "",
          "union": [
            {
              "name": "float"
            },
            {
              "name": "\"raf\""
            }
          ]
        }
      },
      {
        "alias": "pollingInterval",
        "async": false,
        "comment": "If specified, then it is treated as an interval in milliseconds at which the function would be executed. By default if\nthe option is not specified `expression` is executed in `requestAnimationFrame` callback.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "pollingInterval",
        "required": false,
        "spec": [
          {
            "text": "If specified, then it is treated as an interval in milliseconds at which the function would be executed. By default if the option is not specified `expression` is executed in `requestAnimationFrame` callback.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\nvalue can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[LoadState]<\"load\"|\"domcontentloaded\"|\"networkidle\">",
    "name": "LoadState",
    "union": [
      {
        "name": "\"load\""
      },
      {
        "name": "\"domcontentloaded\""
      },
      {
        "name": "\"networkidle\""
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be\nchanged by using the [`method: BrowserContext.setDefaultNavigationTimeout`],\n[`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or\n[`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultNavigationTimeout`], [`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[null]|[Response]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Response"
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be\nchanged by using the [`method: BrowserContext.setDefaultNavigationTimeout`],\n[`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or\n[`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultNavigationTimeout`], [`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "url",
        "async": false,
        "comment": "A glob pattern, regex pattern or predicate receiving [URL] to match while waiting for the navigation.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "url",
        "required": false,
        "spec": [
          {
            "text": "A glob pattern, regex pattern or predicate receiving [URL] to match while waiting for the navigation.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]|[RegExp]|[function]([URL]):[boolean]",
          "name": "",
          "union": [
            {
              "name": "string"
            },
            {
              "name": "RegExp"
            },
            {
              "args": [
                {
                  "name": "URL"
                }
              ],
              "name": "function",
              "returnType": {
                "name": "boolean"
              }
            }
          ]
        }
      },
      {
        "alias": "waitUntil",
        "async": false,
        "comment": "When to consider operation succeeded, defaults to `load`. Events can be either:\n- `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.\n- `'load'` - consider operation to be finished when the `load` event is fired.\n- `'networkidle'` - consider operation to be finished when there are no network connections for at least `500` ms.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "waitUntil",
        "required": false,
        "spec": [
          {
            "text": "When to consider operation succeeded, defaults to `load`. Events can be either:",
            "type": "text"
          },
          {
            "liType": "bullet",
            "text": "`'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'load'` - consider operation to be finished when the `load` event is fired.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'networkidle'` - consider operation to be finished when there are no network connections for at least `500` ms.",
            "type": "li"
          }
        ],
        "type": {
          "expression": "[WaitUntilState]<\"load\"|\"domcontentloaded\"|\"networkidle\">",
          "name": "WaitUntilState",
          "union": [
            {
              "name": "\"load\""
            },
            {
              "name": "\"domcontentloaded\""
            },
            {
              "name": "\"networkidle\""
            }
          ]
        }
      }
    ]
  },
  {
    "expression": "[Runnable]",
    "name": "Runnable"
  },
  {
    "expression": "[Page]",
    "name": "Page"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "predicate",
        "async": false,
        "comment": "Receives the `Page` object and resolves to truthy value when the waiting should resolve.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "predicate",
        "required": false,
        "spec": [
          {
            "text": "Receives the `Page` object and resolves to truthy value when the waiting should resolve.",
            "type": "text"
          }
        ],
        "type": {
          "args": [
            {
              "name": "Page"
            }
          ],
          "expression": "[function]([Page]):[boolean]",
          "name": "function",
          "returnType": {
            "name": "boolean"
          }
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\nvalue can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Runnable]",
    "name": "Runnable"
  },
  {
    "expression": "[Request]",
    "name": "Request"
  },
  {
    "expression": "[string]|[RegExp]|[function]([Request]):[boolean]",
    "name": "",
    "union": [
      {
        "name": "string"
      },
      {
        "name": "RegExp"
      },
      {
        "args": [
          {
            "name": "Request"
          }
        ],
        "name": "function",
        "returnType": {
          "name": "boolean"
        }
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum wait time in milliseconds, defaults to 30 seconds, pass `0` to disable the timeout. The default value can be\nchanged by using the [`method: Page.setDefaultTimeout`] method.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum wait time in milliseconds, defaults to 30 seconds, pass `0` to disable the timeout. The default value can be changed by using the [`method: Page.setDefaultTimeout`] method.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Runnable]",
    "name": "Runnable"
  },
  {
    "expression": "[Response]",
    "name": "Response"
  },
  {
    "expression": "[string]|[RegExp]|[function]([Response]):[boolean]",
    "name": "",
    "union": [
      {
        "name": "string"
      },
      {
        "name": "RegExp"
      },
      {
        "args": [
          {
            "name": "Response"
          }
        ],
        "name": "function",
        "returnType": {
          "name": "boolean"
        }
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum wait time in milliseconds, defaults to 30 seconds, pass `0` to disable the timeout. The default value can be\nchanged by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum wait time in milliseconds, defaults to 30 seconds, pass `0` to disable the timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Runnable]",
    "name": "Runnable"
  },
  {
    "expression": "[null]|[ElementHandle]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "ElementHandle"
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "state",
        "async": false,
        "comment": "Defaults to `'visible'`. Can be either:\n- `'attached'` - wait for element to be present in DOM.\n- `'detached'` - wait for element to not be present in DOM.\n- `'visible'` - wait for element to have non-empty bounding box and no `visibility:hidden`. Note that element without\n  any content or with `display:none` has an empty bounding box and is not considered visible.\n- `'hidden'` - wait for element to be either detached from DOM, or have an empty bounding box or `visibility:hidden`.\n  This is opposite to the `'visible'` option.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "state",
        "required": false,
        "spec": [
          {
            "text": "Defaults to `'visible'`. Can be either:",
            "type": "text"
          },
          {
            "liType": "bullet",
            "text": "`'attached'` - wait for element to be present in DOM.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'detached'` - wait for element to not be present in DOM.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'visible'` - wait for element to have non-empty bounding box and no `visibility:hidden`. Note that element without any content or with `display:none` has an empty bounding box and is not considered visible.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'hidden'` - wait for element to be either detached from DOM, or have an empty bounding box or `visibility:hidden`. This is opposite to the `'visible'` option.",
            "type": "li"
          }
        ],
        "type": {
          "expression": "[WaitForSelectorState]<\"attached\"|\"detached\"|\"visible\"|\"hidden\">",
          "name": "WaitForSelectorState",
          "union": [
            {
              "name": "\"attached\""
            },
            {
              "name": "\"detached\""
            },
            {
              "name": "\"visible\""
            },
            {
              "name": "\"hidden\""
            }
          ]
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\nusing the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[float]",
    "name": "float"
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]|[RegExp]|[function]([URL]):[boolean]",
    "name": "",
    "union": [
      {
        "name": "string"
      },
      {
        "name": "RegExp"
      },
      {
        "args": [
          {
            "name": "URL"
          }
        ],
        "name": "function",
        "returnType": {
          "name": "boolean"
        }
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be\nchanged by using the [`method: BrowserContext.setDefaultNavigationTimeout`],\n[`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or\n[`method: Page.setDefaultTimeout`] methods.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultNavigationTimeout`], [`method: BrowserContext.setDefaultTimeout`], [`method: Page.setDefaultNavigationTimeout`] or [`method: Page.setDefaultTimeout`] methods.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "waitUntil",
        "async": false,
        "comment": "When to consider operation succeeded, defaults to `load`. Events can be either:\n- `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.\n- `'load'` - consider operation to be finished when the `load` event is fired.\n- `'networkidle'` - consider operation to be finished when there are no network connections for at least `500` ms.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "waitUntil",
        "required": false,
        "spec": [
          {
            "text": "When to consider operation succeeded, defaults to `load`. Events can be either:",
            "type": "text"
          },
          {
            "liType": "bullet",
            "text": "`'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'load'` - consider operation to be finished when the `load` event is fired.",
            "type": "li"
          },
          {
            "liType": "bullet",
            "text": "`'networkidle'` - consider operation to be finished when there are no network connections for at least `500` ms.",
            "type": "li"
          }
        ],
        "type": {
          "expression": "[WaitUntilState]<\"load\"|\"domcontentloaded\"|\"networkidle\">",
          "name": "WaitUntilState",
          "union": [
            {
              "name": "\"load\""
            },
            {
              "name": "\"domcontentloaded\""
            },
            {
              "name": "\"networkidle\""
            }
          ]
        }
      }
    ]
  },
  {
    "expression": "[WebSocket]",
    "name": "WebSocket"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "predicate",
        "async": false,
        "comment": "Receives the `WebSocket` object and resolves to truthy value when the waiting should resolve.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "predicate",
        "required": false,
        "spec": [
          {
            "text": "Receives the `WebSocket` object and resolves to truthy value when the waiting should resolve.",
            "type": "text"
          }
        ],
        "type": {
          "args": [
            {
              "name": "WebSocket"
            }
          ],
          "expression": "[function]([WebSocket]):[boolean]",
          "name": "function",
          "returnType": {
            "name": "boolean"
          }
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\nvalue can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Runnable]",
    "name": "Runnable"
  },
  {
    "expression": "[Worker]",
    "name": "Worker"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "predicate",
        "async": false,
        "comment": "Receives the `Worker` object and resolves to truthy value when the waiting should resolve.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "predicate",
        "required": false,
        "spec": [
          {
            "text": "Receives the `Worker` object and resolves to truthy value when the waiting should resolve.",
            "type": "text"
          }
        ],
        "type": {
          "args": [
            {
              "name": "Worker"
            }
          ],
          "expression": "[function]([Worker]):[boolean]",
          "name": "function",
          "returnType": {
            "name": "boolean"
          }
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\nvalue can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Runnable]",
    "name": "Runnable"
  },
  {
    "expression": "[Array]<[Worker]>",
    "name": "Array",
    "templates": [
      {
        "name": "Worker"
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "args": [
      {
        "name": "Dialog"
      }
    ],
    "expression": "[function]([Dialog])",
    "name": "function",
    "returnType": null
  },
  {
    "expression": "[Any]",
    "name": "Any"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "predicate",
        "async": false,
        "comment": "Receives the event data and resolves to truthy value when the waiting should resolve.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "predicate",
        "required": false,
        "spec": [
          {
            "text": "Receives the event data and resolves to truthy value when the waiting should resolve.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[function]",
          "name": "function"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\nvalue can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[BrowserType]",
    "name": "BrowserType"
  },
  {
    "expression": "[Object]",
    "name": "Object"
  },
  {
    "expression": "[Object]",
    "name": "Object",
    "properties": [
      {
        "alias": "TimeoutError",
        "async": false,
        "comment": "A class of `TimeoutError`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "TimeoutError",
        "required": true,
        "spec": [
          {
            "text": "A class of `TimeoutError`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[function]",
          "name": "function"
        }
      }
    ]
  },
  {
    "expression": "[BrowserType]",
    "name": "BrowserType"
  },
  {
    "expression": "[Selectors]",
    "name": "Selectors"
  },
  {
    "expression": "[BrowserType]",
    "name": "BrowserType"
  },
  {
    "name": "void"
  },
  {
    "expression": "[Playwright]",
    "name": "Playwright"
  },
  {
    "name": "void"
  },
  {
    "expression": "[null]|[string]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "string"
      }
    ]
  },
  {
    "expression": "[Frame]",
    "name": "Frame"
  },
  {
    "expression": "[Object]<[string], [string]>",
    "name": "Object",
    "templates": [
      {
        "name": "string"
      },
      {
        "name": "string"
      }
    ]
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[null]|[string]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "string"
      }
    ]
  },
  {
    "expression": "[null]|[Buffer]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Buffer"
      }
    ]
  },
  {
    "expression": "[null]|[any]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "any"
      }
    ]
  },
  {
    "expression": "[null]|[Request]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Request"
      }
    ]
  },
  {
    "expression": "[null]|[Request]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Request"
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[null]|[Response]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Response"
      }
    ]
  },
  {
    "expression": "[Object]",
    "name": "Object",
    "properties": [
      {
        "alias": "startTime",
        "async": false,
        "comment": "Request start time in milliseconds elapsed since January 1, 1970 00:00:00 UTC",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "startTime",
        "required": true,
        "spec": [
          {
            "text": "Request start time in milliseconds elapsed since January 1, 1970 00:00:00 UTC",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "domainLookupStart",
        "async": false,
        "comment": "Time immediately before the browser starts the domain name lookup for the resource. The value is given in milliseconds\nrelative to `startTime`, -1 if not available.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "domainLookupStart",
        "required": true,
        "spec": [
          {
            "text": "Time immediately before the browser starts the domain name lookup for the resource. The value is given in milliseconds relative to `startTime`, -1 if not available.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "domainLookupEnd",
        "async": false,
        "comment": "Time immediately after the browser starts the domain name lookup for the resource. The value is given in milliseconds\nrelative to `startTime`, -1 if not available.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "domainLookupEnd",
        "required": true,
        "spec": [
          {
            "text": "Time immediately after the browser starts the domain name lookup for the resource. The value is given in milliseconds relative to `startTime`, -1 if not available.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "connectStart",
        "async": false,
        "comment": "Time immediately before the user agent starts establishing the connection to the server to retrieve the resource. The\nvalue is given in milliseconds relative to `startTime`, -1 if not available.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "connectStart",
        "required": true,
        "spec": [
          {
            "text": "Time immediately before the user agent starts establishing the connection to the server to retrieve the resource. The value is given in milliseconds relative to `startTime`, -1 if not available.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "secureConnectionStart",
        "async": false,
        "comment": "Time immediately before the browser starts the handshake process to secure the current connection. The value is given in\nmilliseconds relative to `startTime`, -1 if not available.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "secureConnectionStart",
        "required": true,
        "spec": [
          {
            "text": "Time immediately before the browser starts the handshake process to secure the current connection. The value is given in milliseconds relative to `startTime`, -1 if not available.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "connectEnd",
        "async": false,
        "comment": "Time immediately before the user agent starts establishing the connection to the server to retrieve the resource. The\nvalue is given in milliseconds relative to `startTime`, -1 if not available.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "connectEnd",
        "required": true,
        "spec": [
          {
            "text": "Time immediately before the user agent starts establishing the connection to the server to retrieve the resource. The value is given in milliseconds relative to `startTime`, -1 if not available.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "requestStart",
        "async": false,
        "comment": "Time immediately before the browser starts requesting the resource from the server, cache, or local resource. The value\nis given in milliseconds relative to `startTime`, -1 if not available.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "requestStart",
        "required": true,
        "spec": [
          {
            "text": "Time immediately before the browser starts requesting the resource from the server, cache, or local resource. The value is given in milliseconds relative to `startTime`, -1 if not available.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "responseStart",
        "async": false,
        "comment": "Time immediately after the browser starts requesting the resource from the server, cache, or local resource. The value\nis given in milliseconds relative to `startTime`, -1 if not available.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "responseStart",
        "required": true,
        "spec": [
          {
            "text": "Time immediately after the browser starts requesting the resource from the server, cache, or local resource. The value is given in milliseconds relative to `startTime`, -1 if not available.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      },
      {
        "alias": "responseEnd",
        "async": false,
        "comment": "Time immediately after the browser receives the last byte of the resource or immediately before the transport connection\nis closed, whichever comes first. The value is given in milliseconds relative to `startTime`, -1 if not available.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "responseEnd",
        "required": true,
        "spec": [
          {
            "text": "Time immediately after the browser receives the last byte of the resource or immediately before the transport connection is closed, whichever comes first. The value is given in milliseconds relative to `startTime`, -1 if not available.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[JsonDocument]",
    "name": "JsonDocument"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "documentOptions",
        "async": false,
        "comment": "The options that control custom behaviour when parsing the JSON.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "documentOptions",
        "required": false,
        "spec": [
          {
            "text": "The options that control custom behaviour when parsing the JSON.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[null]|[JsonDocumentOptions]",
          "name": "",
          "union": [
            {
              "name": "null"
            },
            {
              "name": "JsonDocumentOptions"
            }
          ]
        }
      }
    ]
  },
  {
    "expression": "[Buffer]",
    "name": "Buffer"
  },
  {
    "expression": "[null]|[string]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "string"
      }
    ]
  },
  {
    "expression": "[Frame]",
    "name": "Frame"
  },
  {
    "expression": "[Object]<[string], [string]>",
    "name": "Object",
    "templates": [
      {
        "name": "string"
      },
      {
        "name": "string"
      }
    ]
  },
  {
    "expression": "[Serializable]",
    "name": "Serializable"
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[Request]",
    "name": "Request"
  },
  {
    "expression": "[int]",
    "name": "int"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[System.Net.HttpStatusCode]",
    "name": "System.Net.HttpStatusCode"
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "void"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "headers",
        "async": false,
        "comment": "If set changes the request HTTP headers. Header values will be converted to a string.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "headers",
        "required": false,
        "spec": [
          {
            "text": "If set changes the request HTTP headers. Header values will be converted to a string.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]<[string], [string]>",
          "name": "Object",
          "templates": [
            {
              "name": "string"
            },
            {
              "name": "string"
            }
          ]
        }
      },
      {
        "alias": "method",
        "async": false,
        "comment": "If set changes the request method (e.g. GET or POST)",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "method",
        "required": false,
        "spec": [
          {
            "text": "If set changes the request method (e.g. GET or POST)",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "postData",
        "async": false,
        "comment": "If set changes the post data of request",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "postData",
        "required": false,
        "spec": [
          {
            "text": "If set changes the post data of request",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]|[Buffer]",
          "name": "",
          "union": [
            {
              "name": "string"
            },
            {
              "name": "Buffer"
            }
          ]
        }
      },
      {
        "alias": "url",
        "async": false,
        "comment": "If set changes the request URL. New URL must have same protocol as original one.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "url",
        "required": false,
        "spec": [
          {
            "text": "If set changes the request URL. New URL must have same protocol as original one.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "body",
        "async": false,
        "comment": "Response body.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "js",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "body",
        "required": false,
        "spec": [
          {
            "text": "Response body.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]|[Buffer]",
          "name": "",
          "union": [
            {
              "name": "string"
            },
            {
              "name": "Buffer"
            }
          ]
        }
      },
      {
        "alias": "body",
        "async": false,
        "comment": "Optional response body as text.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "body",
        "required": false,
        "spec": [
          {
            "text": "Optional response body as text.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "bodyBytes",
        "async": false,
        "comment": "Optional response body as raw bytes.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "bodyBytes",
        "required": false,
        "spec": [
          {
            "text": "Optional response body as raw bytes.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Buffer]",
          "name": "Buffer"
        }
      },
      {
        "alias": "contentType",
        "async": false,
        "comment": "If set, equals to setting `Content-Type` response header.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "contentType",
        "required": false,
        "spec": [
          {
            "text": "If set, equals to setting `Content-Type` response header.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      },
      {
        "alias": "headers",
        "async": false,
        "comment": "Response headers. Header values will be converted to a string.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "headers",
        "required": false,
        "spec": [
          {
            "text": "Response headers. Header values will be converted to a string.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[Object]<[string], [string]>",
          "name": "Object",
          "templates": [
            {
              "name": "string"
            },
            {
              "name": "string"
            }
          ]
        }
      },
      {
        "alias": "path",
        "async": false,
        "comment": "File path to respond with. The content type will be inferred from file extension. If `path` is a relative path, then it\nis resolved relative to the current working directory.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "path",
        "required": false,
        "spec": [
          {
            "text": "File path to respond with. The content type will be inferred from file extension. If `path` is a relative path, then it is resolved relative to the current working directory.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "status",
        "async": false,
        "comment": "Response status code, defaults to `200`.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "status",
        "required": false,
        "spec": [
          {
            "text": "Response status code, defaults to `200`.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[int]",
          "name": "int"
        }
      }
    ]
  },
  {
    "expression": "[Request]",
    "name": "Request"
  },
  {
    "name": "void"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[function]|[string]|[Object]",
    "name": "",
    "union": [
      {
        "name": "function"
      },
      {
        "name": "string"
      },
      {
        "name": "Object",
        "properties": [
          {
            "alias": "path",
            "async": false,
            "comment": "Path to the JavaScript file. If `path` is a relative path, then it is resolved relative to the current working\ndirectory. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "path",
            "required": false,
            "spec": [
              {
                "text": "Path to the JavaScript file. If `path` is a relative path, then it is resolved relative to the current working directory. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[path]",
              "name": "path"
            }
          },
          {
            "alias": "content",
            "async": false,
            "comment": "Raw script content. Optional.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "content",
            "required": false,
            "spec": [
              {
                "text": "Raw script content. Optional.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[string]",
              "name": "string"
            }
          }
        ]
      }
    ]
  },
  {
    "expression": "[string]|[path]",
    "name": "",
    "union": [
      {
        "name": "string"
      },
      {
        "name": "path"
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "contentScript",
        "async": false,
        "comment": "Whether to run this selector engine in isolated JavaScript environment. This environment has access to the same DOM, but\nnot any JavaScript objects from the frame's scripts. Defaults to `false`. Note that running as a content script is not\nguaranteed when this engine is used together with other registered engines.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "contentScript",
        "required": false,
        "spec": [
          {
            "text": "Whether to run this selector engine in isolated JavaScript environment. This environment has access to the same DOM, but not any JavaScript objects from the frame's scripts. Defaults to `false`. Note that running as a content script is not guaranteed when this engine is used together with other registered engines.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[boolean]",
          "name": "boolean"
        }
      },
      {
        "alias": "path",
        "async": false,
        "comment": "Path to the JavaScript file. If `path` is a relative path, then it is resolved relative to the current working\ndirectory.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "path",
        "required": false,
        "spec": [
          {
            "text": "Path to the JavaScript file. If `path` is a relative path, then it is resolved relative to the current working directory.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[path]",
          "name": "path"
        }
      },
      {
        "alias": "script",
        "async": false,
        "comment": "Raw script content.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "script",
        "required": false,
        "spec": [
          {
            "text": "Raw script content.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]",
          "name": "string"
        }
      }
    ]
  },
  {
    "name": "void"
  },
  {
    "expression": "[float]",
    "name": "float"
  },
  {
    "expression": "[float]",
    "name": "float"
  },
  {
    "expression": "[path]",
    "name": "path"
  },
  {
    "expression": "[WebSocket]",
    "name": "WebSocket"
  },
  {
    "expression": "[Object]",
    "name": "Object",
    "properties": [
      {
        "alias": "payload",
        "async": false,
        "comment": "frame payload",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "payload",
        "required": true,
        "spec": [
          {
            "text": "frame payload",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]|[Buffer]",
          "name": "",
          "union": [
            {
              "name": "string"
            },
            {
              "name": "Buffer"
            }
          ]
        }
      }
    ]
  },
  {
    "expression": "[Object]",
    "name": "Object",
    "properties": [
      {
        "alias": "payload",
        "async": false,
        "comment": "frame payload",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "payload",
        "required": true,
        "spec": [
          {
            "text": "frame payload",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[string]|[Buffer]",
          "name": "",
          "union": [
            {
              "name": "string"
            },
            {
              "name": "Buffer"
            }
          ]
        }
      }
    ]
  },
  {
    "expression": "[String]",
    "name": "String"
  },
  {
    "expression": "[boolean]",
    "name": "boolean"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[any]",
    "name": "any"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[function]|[Object]",
    "name": "",
    "union": [
      {
        "name": "function"
      },
      {
        "name": "Object",
        "properties": [
          {
            "alias": "predicate",
            "async": false,
            "comment": "receives the event data and resolves to truthy value when the waiting should resolve.",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "predicate",
            "required": true,
            "spec": [
              {
                "text": "receives the event data and resolves to truthy value when the waiting should resolve.",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[function]",
              "name": "function"
            }
          },
          {
            "alias": "timeout",
            "async": false,
            "comment": "maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\nvalue can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
            "deprecated": false,
            "kind": "property",
            "langs": {},
            "name": "timeout",
            "required": false,
            "spec": [
              {
                "text": "maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
                "type": "text"
              }
            ],
            "type": {
              "expression": "[float]",
              "name": "float"
            }
          }
        ]
      }
    ]
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "predicate",
        "async": false,
        "comment": "Receives the event data and resolves to truthy value when the waiting should resolve.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "predicate",
        "required": false,
        "spec": [
          {
            "text": "Receives the event data and resolves to truthy value when the waiting should resolve.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[function]",
          "name": "function"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\nvalue can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[WebSocketFrame]",
    "name": "WebSocketFrame"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "predicate",
        "async": false,
        "comment": "Receives the `WebSocketFrame` object and resolves to truthy value when the waiting should resolve.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "predicate",
        "required": false,
        "spec": [
          {
            "text": "Receives the `WebSocketFrame` object and resolves to truthy value when the waiting should resolve.",
            "type": "text"
          }
        ],
        "type": {
          "args": [
            {
              "name": "WebSocketFrame"
            }
          ],
          "expression": "[function]([WebSocketFrame]):[boolean]",
          "name": "function",
          "returnType": {
            "name": "boolean"
          }
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\nvalue can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Runnable]",
    "name": "Runnable"
  },
  {
    "expression": "[WebSocketFrame]",
    "name": "WebSocketFrame"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "predicate",
        "async": false,
        "comment": "Receives the `WebSocketFrame` object and resolves to truthy value when the waiting should resolve.",
        "deprecated": false,
        "kind": "property",
        "langs": {},
        "name": "predicate",
        "required": false,
        "spec": [
          {
            "text": "Receives the `WebSocketFrame` object and resolves to truthy value when the waiting should resolve.",
            "type": "text"
          }
        ],
        "type": {
          "args": [
            {
              "name": "WebSocketFrame"
            }
          ],
          "expression": "[function]([WebSocketFrame]):[boolean]",
          "name": "function",
          "returnType": {
            "name": "boolean"
          }
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\nvalue can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Runnable]",
    "name": "Runnable"
  },
  {
    "expression": "[Any]",
    "name": "Any"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "predicate",
        "async": false,
        "comment": "Receives the event data and resolves to truthy value when the waiting should resolve.",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "predicate",
        "required": false,
        "spec": [
          {
            "text": "Receives the event data and resolves to truthy value when the waiting should resolve.",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[function]",
          "name": "function"
        }
      },
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\nvalue can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[null]|[Buffer]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "Buffer"
      }
    ]
  },
  {
    "expression": "[null]|[string]",
    "name": "",
    "union": [
      {
        "name": "null"
      },
      {
        "name": "string"
      }
    ]
  },
  {
    "expression": "[Worker]",
    "name": "Worker"
  },
  {
    "expression": "[Serializable]",
    "name": "Serializable"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[EvaluationArgument]",
    "name": "EvaluationArgument"
  },
  {
    "expression": "[JSHandle]",
    "name": "JSHandle"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[EvaluationArgument]",
    "name": "EvaluationArgument"
  },
  {
    "expression": "[string]",
    "name": "string"
  },
  {
    "expression": "[Worker]",
    "name": "Worker"
  },
  {
    "name": "Object",
    "properties": [
      {
        "alias": "timeout",
        "async": false,
        "comment": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\nvalue can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
        "deprecated": false,
        "kind": "property",
        "langs": {
          "aliases": {},
          "only": [
            "csharp",
            "java",
            "python"
          ],
          "overrides": {},
          "types": {}
        },
        "name": "timeout",
        "required": false,
        "spec": [
          {
            "text": "Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can be changed by using the [`method: BrowserContext.setDefaultTimeout`].",
            "type": "text"
          }
        ],
        "type": {
          "expression": "[float]",
          "name": "float"
        }
      }
    ]
  },
  {
    "expression": "[Runnable]",
    "name": "Runnable"
  }
]
